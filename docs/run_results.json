{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.9", "generated_at": "2024-09-16T15:42:01.437894Z", "invocation_id": "5aecf1fa-848f-4aa3-9a19-971219d0d6cd", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.664843Z", "completed_at": "2024-09-16T15:41:45.686290Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.688117Z", "completed_at": "2024-09-16T15:41:45.688173Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0305330753326416, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__account_types_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_account_type_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__account_types_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.678718Z", "completed_at": "2024-09-16T15:41:45.687066Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.689926Z", "completed_at": "2024-09-16T15:41:45.689931Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02916097640991211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_books_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_accounting_book_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_books_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.682676Z", "completed_at": "2024-09-16T15:41:45.687358Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.690208Z", "completed_at": "2024-09-16T15:41:45.690212Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02895522117614746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_accounting_period_fiscal_cal_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_period_fiscal_cal_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.674853Z", "completed_at": "2024-09-16T15:41:45.687794Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.690467Z", "completed_at": "2024-09-16T15:41:45.690471Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03167581558227539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_accounting_book_sub_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_book_subsidiaries_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.697420Z", "completed_at": "2024-09-16T15:41:45.720449Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.722156Z", "completed_at": "2024-09-16T15:41:45.722163Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.029783010482788086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_periods_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_accounting_period_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_periods_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.710959Z", "completed_at": "2024-09-16T15:41:45.721472Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.724352Z", "completed_at": "2024-09-16T15:41:45.724357Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02940082550048828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__classes_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_classification_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__classes_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.704816Z", "completed_at": "2024-09-16T15:41:45.721820Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.724678Z", "completed_at": "2024-09-16T15:41:45.724681Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03064703941345215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounts_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_account_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounts_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.716696Z", "completed_at": "2024-09-16T15:41:45.722415Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.725451Z", "completed_at": "2024-09-16T15:41:45.725455Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.031138896942138672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_consolidated_exchange_rate_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__consolidated_exchange_rates_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.731848Z", "completed_at": "2024-09-16T15:41:45.746309Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.747461Z", "completed_at": "2024-09-16T15:41:45.747469Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021989822387695312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__currencies_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_currency_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__currencies_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.736885Z", "completed_at": "2024-09-16T15:41:45.747791Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.750625Z", "completed_at": "2024-09-16T15:41:45.750629Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.021075963973999023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__customers_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_customer_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__customers_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.742932Z", "completed_at": "2024-09-16T15:41:45.748068Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.750905Z", "completed_at": "2024-09-16T15:41:45.750909Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017132997512817383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__employees_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_employee_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__employees_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.740184Z", "completed_at": "2024-09-16T15:41:45.748404Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.751185Z", "completed_at": "2024-09-16T15:41:45.751188Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0216519832611084, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__departments_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_department_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__departments_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.754783Z", "completed_at": "2024-09-16T15:41:45.764108Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.771446Z", "completed_at": "2024-09-16T15:41:45.771455Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020673036575317383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__entities_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_entities_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__entities_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.761517Z", "completed_at": "2024-09-16T15:41:45.772511Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.775037Z", "completed_at": "2024-09-16T15:41:45.775042Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017439842224121094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__entity_address_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_entity_address_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__entity_address_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.767634Z", "completed_at": "2024-09-16T15:41:45.773283Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.775585Z", "completed_at": "2024-09-16T15:41:45.775588Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020242929458618164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__jobs_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_job_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__jobs_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.764546Z", "completed_at": "2024-09-16T15:41:45.773611Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.775852Z", "completed_at": "2024-09-16T15:41:45.775856Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.021419048309326172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__items_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_item_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__items_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.776927Z", "completed_at": "2024-09-16T15:41:45.782446Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.785300Z", "completed_at": "2024-09-16T15:41:45.785306Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08834719657897949, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__location_main_address_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_location_main_address_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__location_main_address_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.785613Z", "completed_at": "2024-09-16T15:41:45.864291Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.870524Z", "completed_at": "2024-09-16T15:41:45.870532Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0891880989074707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__locations_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_location_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__locations_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.789630Z", "completed_at": "2024-09-16T15:41:45.864669Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.870850Z", "completed_at": "2024-09-16T15:41:45.870854Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0891561508178711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__subsidiaries_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_subsidiary_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__subsidiaries_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.858689Z", "completed_at": "2024-09-16T15:41:45.864960Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.871220Z", "completed_at": "2024-09-16T15:41:45.871223Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.08926177024841309, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__transaction_accounting_lines_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_tran_acct_line_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transaction_accounting_lines_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.866442Z", "completed_at": "2024-09-16T15:41:45.873281Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.877345Z", "completed_at": "2024-09-16T15:41:45.877354Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01483011245727539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__transaction_lines_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_transaction_line_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transaction_lines_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.884701Z", "completed_at": "2024-09-16T15:41:45.897776Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.900133Z", "completed_at": "2024-09-16T15:41:45.900136Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02595996856689453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__vendors_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_vendor_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__vendors_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.881757Z", "completed_at": "2024-09-16T15:41:45.897422Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.899606Z", "completed_at": "2024-09-16T15:41:45.899609Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.028519153594970703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__vendor_categories_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_vendor_category_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__vendor_categories_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.879015Z", "completed_at": "2024-09-16T15:41:45.897029Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.899337Z", "completed_at": "2024-09-16T15:41:45.899344Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02980780601501465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__transactions_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_transaction_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transactions_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.889652Z", "completed_at": "2024-09-16T15:41:45.900614Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.906616Z", "completed_at": "2024-09-16T15:41:45.906621Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020879745483398438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__accounting_books_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_accounting_books_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounting_books_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.920140Z", "completed_at": "2024-09-16T15:41:45.934338Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.936219Z", "completed_at": "2024-09-16T15:41:45.936226Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02956414222717285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__accounts_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_accounts_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounts_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.923901Z", "completed_at": "2024-09-16T15:41:45.934703Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.937064Z", "completed_at": "2024-09-16T15:41:45.937067Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.025885820388793945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__classes_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_classes_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__classes_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.915903Z", "completed_at": "2024-09-16T15:41:45.935239Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.937952Z", "completed_at": "2024-09-16T15:41:45.937955Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03259897232055664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__accounting_periods_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_accounting_periods_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounting_periods_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.929578Z", "completed_at": "2024-09-16T15:41:45.935686Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.938207Z", "completed_at": "2024-09-16T15:41:45.938211Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01703500747680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__consolidated_exchange_rates_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_consolidated_exchange_rates_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__consolidated_exchange_rates_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.944240Z", "completed_at": "2024-09-16T15:41:45.956163Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.957795Z", "completed_at": "2024-09-16T15:41:45.957804Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017859697341918945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__currencies_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_currencies_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__currencies_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.950749Z", "completed_at": "2024-09-16T15:41:45.957052Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.959858Z", "completed_at": "2024-09-16T15:41:45.959862Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018273115158081055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__departments_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_departments_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__departments_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.947913Z", "completed_at": "2024-09-16T15:41:45.957396Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.960179Z", "completed_at": "2024-09-16T15:41:45.960185Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019674301147460938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__customers_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_customers_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__customers_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.953296Z", "completed_at": "2024-09-16T15:41:45.958072Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.960864Z", "completed_at": "2024-09-16T15:41:45.960869Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019476890563964844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__expense_accounts_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_expense_accounts_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__expense_accounts_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.965618Z", "completed_at": "2024-09-16T15:41:45.979175Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.990389Z", "completed_at": "2024-09-16T15:41:45.990397Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03258991241455078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__income_accounts_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_income_accounts_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__income_accounts_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.973183Z", "completed_at": "2024-09-16T15:41:45.991099Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.997621Z", "completed_at": "2024-09-16T15:41:45.997626Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03570675849914551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__items_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_items_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__items_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.980193Z", "completed_at": "2024-09-16T15:41:45.995675Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.999113Z", "completed_at": "2024-09-16T15:41:45.999119Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03682398796081543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__locations_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_locations_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__locations_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:45.985951Z", "completed_at": "2024-09-16T15:41:45.996064Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:45.999563Z", "completed_at": "2024-09-16T15:41:45.999585Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03220486640930176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__subsidiaries_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_subsidiaries_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__subsidiaries_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.003810Z", "completed_at": "2024-09-16T15:41:46.018142Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.027770Z", "completed_at": "2024-09-16T15:41:46.027793Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.031697988510131836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__transaction_lines_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_transaction_lines_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__transaction_lines_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.019611Z", "completed_at": "2024-09-16T15:41:46.026817Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.030087Z", "completed_at": "2024-09-16T15:41:46.030097Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02081298828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__vendor_types_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_vendor_types_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__vendor_types_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.012739Z", "completed_at": "2024-09-16T15:41:46.027279Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.030689Z", "completed_at": "2024-09-16T15:41:46.030694Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02321004867553711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__transactions_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_transactions_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__transactions_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.022411Z", "completed_at": "2024-09-16T15:41:46.028515Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.032153Z", "completed_at": "2024-09-16T15:41:46.032158Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023128747940063477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__vendors_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_vendors_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__vendors_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.036678Z", "completed_at": "2024-09-16T15:41:46.038024Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.043045Z", "completed_at": "2024-09-16T15:41:46.043051Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01326608657836914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_account_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.039708Z", "completed_at": "2024-09-16T15:41:46.040820Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.046627Z", "completed_at": "2024-09-16T15:41:46.046630Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012706756591796875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_account_type_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.041426Z", "completed_at": "2024-09-16T15:41:46.042684Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.047129Z", "completed_at": "2024-09-16T15:41:46.047140Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01284027099609375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_accounting_book_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.043633Z", "completed_at": "2024-09-16T15:41:46.045621Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.048464Z", "completed_at": "2024-09-16T15:41:46.048468Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01195383071899414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_accounting_book_sub_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.052553Z", "completed_at": "2024-09-16T15:41:46.053767Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.058187Z", "completed_at": "2024-09-16T15:41:46.058192Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010820150375366211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_accounting_period_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.055223Z", "completed_at": "2024-09-16T15:41:46.056230Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.060556Z", "completed_at": "2024-09-16T15:41:46.060559Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010222196578979492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_accounting_period_fiscal_cal_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.056720Z", "completed_at": "2024-09-16T15:41:46.057879Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.060981Z", "completed_at": "2024-09-16T15:41:46.060984Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010462284088134766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_classification_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.058630Z", "completed_at": "2024-09-16T15:41:46.059574Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.062033Z", "completed_at": "2024-09-16T15:41:46.062036Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009546995162963867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_consolidated_exchange_rate_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.065735Z", "completed_at": "2024-09-16T15:41:46.068030Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.072363Z", "completed_at": "2024-09-16T15:41:46.072369Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012590885162353516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_currency_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.069344Z", "completed_at": "2024-09-16T15:41:46.070480Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.075967Z", "completed_at": "2024-09-16T15:41:46.075971Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012425899505615234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_customer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.071010Z", "completed_at": "2024-09-16T15:41:46.071985Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.076444Z", "completed_at": "2024-09-16T15:41:46.076447Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012586116790771484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_department_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.072922Z", "completed_at": "2024-09-16T15:41:46.073877Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.077562Z", "completed_at": "2024-09-16T15:41:46.077565Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010710000991821289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_employee_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.081504Z", "completed_at": "2024-09-16T15:41:46.082772Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.087942Z", "completed_at": "2024-09-16T15:41:46.087947Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011586666107177734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_entities_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.084154Z", "completed_at": "2024-09-16T15:41:46.085215Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.090143Z", "completed_at": "2024-09-16T15:41:46.090146Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011163711547851562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_entity_address_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.085815Z", "completed_at": "2024-09-16T15:41:46.087680Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.090560Z", "completed_at": "2024-09-16T15:41:46.090563Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011058807373046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.088382Z", "completed_at": "2024-09-16T15:41:46.089243Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.091654Z", "completed_at": "2024-09-16T15:41:46.091657Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010053157806396484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_job_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.095364Z", "completed_at": "2024-09-16T15:41:46.096517Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.100965Z", "completed_at": "2024-09-16T15:41:46.100972Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01180410385131836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_location_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.097936Z", "completed_at": "2024-09-16T15:41:46.098971Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.104584Z", "completed_at": "2024-09-16T15:41:46.104588Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011784076690673828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_location_main_address_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.099443Z", "completed_at": "2024-09-16T15:41:46.100582Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.105105Z", "completed_at": "2024-09-16T15:41:46.105110Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011690139770507812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_subsidiary_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.101437Z", "completed_at": "2024-09-16T15:41:46.103286Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.106219Z", "completed_at": "2024-09-16T15:41:46.106223Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010549068450927734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_tran_acct_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.110071Z", "completed_at": "2024-09-16T15:41:46.111334Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.115825Z", "completed_at": "2024-09-16T15:41:46.115831Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01085805892944336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_transaction_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.112844Z", "completed_at": "2024-09-16T15:41:46.114047Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.118094Z", "completed_at": "2024-09-16T15:41:46.118096Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010418176651000977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_transaction_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.114623Z", "completed_at": "2024-09-16T15:41:46.115567Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.118542Z", "completed_at": "2024-09-16T15:41:46.118545Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010189056396484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_vendor_category_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.116271Z", "completed_at": "2024-09-16T15:41:46.117169Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.119467Z", "completed_at": "2024-09-16T15:41:46.119469Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009006023406982422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_vendor_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.123129Z", "completed_at": "2024-09-16T15:41:46.124142Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.129001Z", "completed_at": "2024-09-16T15:41:46.129006Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010792255401611328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_accounting_books_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.125623Z", "completed_at": "2024-09-16T15:41:46.127445Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.131193Z", "completed_at": "2024-09-16T15:41:46.131196Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010179996490478516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_accounting_periods_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.127901Z", "completed_at": "2024-09-16T15:41:46.128747Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.131610Z", "completed_at": "2024-09-16T15:41:46.131613Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010638952255249023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_accounts_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.129425Z", "completed_at": "2024-09-16T15:41:46.130269Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.132705Z", "completed_at": "2024-09-16T15:41:46.132715Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00978398323059082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_classes_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.136359Z", "completed_at": "2024-09-16T15:41:46.137559Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.142949Z", "completed_at": "2024-09-16T15:41:46.142953Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01143503189086914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_consolidated_exchange_rates_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.139023Z", "completed_at": "2024-09-16T15:41:46.140026Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.145422Z", "completed_at": "2024-09-16T15:41:46.145426Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011363744735717773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_currencies_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.140551Z", "completed_at": "2024-09-16T15:41:46.142647Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.145863Z", "completed_at": "2024-09-16T15:41:46.145866Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011309146881103516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_customers_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.143379Z", "completed_at": "2024-09-16T15:41:46.144321Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.146892Z", "completed_at": "2024-09-16T15:41:46.146896Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010069131851196289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_departments_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.150068Z", "completed_at": "2024-09-16T15:41:46.151064Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.155135Z", "completed_at": "2024-09-16T15:41:46.155141Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009673118591308594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_expense_accounts_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.152292Z", "completed_at": "2024-09-16T15:41:46.153153Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.157761Z", "completed_at": "2024-09-16T15:41:46.157766Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009984016418457031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_income_accounts_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.153625Z", "completed_at": "2024-09-16T15:41:46.154780Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.158266Z", "completed_at": "2024-09-16T15:41:46.158272Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010032176971435547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_items_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.155622Z", "completed_at": "2024-09-16T15:41:46.156594Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.159281Z", "completed_at": "2024-09-16T15:41:46.159284Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009047985076904297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_locations_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.162445Z", "completed_at": "2024-09-16T15:41:46.164515Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.168716Z", "completed_at": "2024-09-16T15:41:46.168722Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010987043380737305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_subsidiaries_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.165737Z", "completed_at": "2024-09-16T15:41:46.166703Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.171321Z", "completed_at": "2024-09-16T15:41:46.171327Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011223077774047852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_transaction_lines_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.167237Z", "completed_at": "2024-09-16T15:41:46.168339Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.171872Z", "completed_at": "2024-09-16T15:41:46.171875Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011275053024291992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_transactions_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.169194Z", "completed_at": "2024-09-16T15:41:46.170174Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.172871Z", "completed_at": "2024-09-16T15:41:46.172874Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009474039077758789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_vendor_types_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.176770Z", "completed_at": "2024-09-16T15:41:46.177723Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:46.191064Z", "completed_at": "2024-09-16T15:41:46.191072Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.023253917694091797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_vendors_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.186815Z", "completed_at": "2024-09-16T15:41:47.219605Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:47.220759Z", "completed_at": "2024-09-16T15:41:47.220763Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1492719650268555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_books", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_books_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    basebook\n    \n as \n    \n    basebook\n    \n, \n    cast(null as TEXT) as \n    \n    contingentrevenuehandling\n    \n , \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    effectiveperiod\n    \n as \n    \n    effectiveperiod\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isadjustmentonly\n    \n as \n    \n    isadjustmentonly\n    \n, \n    \n    \n    isconsolidated\n    \n as \n    \n    isconsolidated\n    \n, \n    \n    \n    isprimary\n    \n as \n    \n    isprimary\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    subsidiariesstring\n    \n as \n    \n    subsidiariesstring\n    \n, \n    cast(null as TEXT) as \n    \n    twosteprevenueallocation\n    \n , \n    cast(null as TEXT) as \n    \n    unbilledreceivablegrouping\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as accounting_book_id,\n        name as accounting_book_name,\n        basebook as base_book_id,\n        effectiveperiod as effective_period_id,\n        isadjustmentonly = 'T' as is_adjustment_only,\n        isconsolidated = 'T' as is_consolidated,\n        contingentrevenuehandling as is_contingent_revenue_handling,\n        isprimary = 'T' as is_primary,\n        twosteprevenueallocation as is_two_step_revenue_allocation\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_books\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.191629Z", "completed_at": "2024-09-16T15:41:47.219190Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:47.220482Z", "completed_at": "2024-09-16T15:41:47.220501Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1477549076080322, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_book_subsidiaries_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accountingbook\n    \n as \n    \n    accountingbook\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        _fivetran_synced,\n        accountingbook as accounting_book_id,\n        status,\n        subsidiary as subsidiary_id\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_book_subsidiaries\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.199523Z", "completed_at": "2024-09-16T15:41:47.264485Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:47.265107Z", "completed_at": "2024-09-16T15:41:47.265118Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1681013107299805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_period_fiscal_cal_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accountingperiod\n    \n as \n    \n    accountingperiod\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    fiscalcalendar\n    \n as \n    \n    fiscalcalendar\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        _fivetran_synced,\n        accountingperiod as accounting_period_id,\n        fiscalcalendar as fiscal_calendar_id,\n        parent as parent_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_period_fiscal_cal\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:46.178881Z", "completed_at": "2024-09-16T15:41:47.265867Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:47.266415Z", "completed_at": "2024-09-16T15:41:47.266419Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2420871257781982, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__account_types", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__account_types_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    balancesheet\n    \n as \n    \n    balancesheet\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    defaultcashflowratetype\n    \n as \n    \n    defaultcashflowratetype\n    \n, \n    \n    \n    defaultgeneralratetype\n    \n as \n    \n    defaultgeneralratetype\n    \n, \n    \n    \n    eliminationalgo\n    \n as \n    \n    eliminationalgo\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    includeinrevaldefault\n    \n as \n    \n    includeinrevaldefault\n    \n, \n    \n    \n    internalid\n    \n as \n    \n    internalid\n    \n, \n    \n    \n        \n            \n            \"left\"\n            \n        \n    \n as \n    \n        \n            \n            \"left\"\n            \n        \n    \n, \n    \n    \n    longname\n    \n as \n    \n    longname\n    \n, \n    \n    \n    seqnum\n    \n as \n    \n    seqnum\n    \n, \n    \n    \n    usercanchangerevaloption\n    \n as \n    \n    usercanchangerevaloption\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted,\n        _fivetran_synced,\n        id as account_type_id,\n        balancesheet = 'T' as is_balancesheet,\"left\"= 'T' as is_leftside,\n        longname as type_name\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__account_types\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:47.328271Z", "completed_at": "2024-09-16T15:41:48.428127Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:48.428902Z", "completed_at": "2024-09-16T15:41:48.428924Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2185237407684326, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_periods", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_periods_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    alllocked\n    \n as \n    \n    alllocked\n    \n, \n    \n    \n    allownonglchanges\n    \n as \n    \n    allownonglchanges\n    \n, \n    \n    \n    aplocked\n    \n as \n    \n    aplocked\n    \n, \n    \n    \n    arlocked\n    \n as \n    \n    arlocked\n    \n, \n    \n    \n    closed\n    \n as \n    \n    closed\n    \n, \n    \n    \n    closedondate\n    \n as \n    \n    closedondate\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    enddate\n    \n as \n    \n    enddate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isadjust\n    \n as \n    \n    isadjust\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    isposting\n    \n as \n    \n    isposting\n    \n, \n    \n    \n    isquarter\n    \n as \n    \n    isquarter\n    \n, \n    \n    \n    isyear\n    \n as \n    \n    isyear\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    periodname\n    \n as \n    \n    periodname\n    \n, \n    \n    \n    startdate\n    \n as \n    \n    startdate\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as accounting_period_id,\n        parent as parent_id, \n        periodname as name,\n        cast(startdate as date) as starting_at,\n        cast(enddate as date) as ending_at,\n        closedondate as closed_at,\n        isquarter = 'T' as is_quarter,\n        isyear = 'T' as is_year,\n        isadjust = 'T' as is_adjustment,\n        isposting = 'T' as is_posting,\n        closed = 'T' as is_closed,\n        alllocked = 'T' as is_all_locked,\n        arlocked = 'T' as is_ar_locked,\n        aplocked = 'T' as is_ap_locked\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_periods\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:47.333814Z", "completed_at": "2024-09-16T15:41:48.467942Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:48.468577Z", "completed_at": "2024-09-16T15:41:48.468584Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2565398216247559, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__classes", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__classes_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as class_id,\n        externalid as class_external_id,\n        name,\n        fullname as full_name,\n        isinactive = 'T' as is_inactive,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your classes_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__classes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:47.419173Z", "completed_at": "2024-09-16T15:41:48.536441Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:48.537074Z", "completed_at": "2024-09-16T15:41:48.537080Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.22542405128479, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__consolidated_exchange_rates_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    averagerate\n    \n as \n    \n    averagerate\n    \n, \n    \n    \n    currentrate\n    \n as \n    \n    currentrate\n    \n, \n    \n    \n    fromcurrency\n    \n as \n    \n    fromcurrency\n    \n, \n    \n    \n    fromsubsidiary\n    \n as \n    \n    fromsubsidiary\n    \n, \n    \n    \n    historicalrate\n    \n as \n    \n    historicalrate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    accountingbook\n    \n as \n    \n    accountingbook\n    \n, \n    \n    \n    postingperiod\n    \n as \n    \n    postingperiod\n    \n, \n    \n    \n    tocurrency\n    \n as \n    \n    tocurrency\n    \n, \n    \n    \n    tosubsidiary\n    \n as \n    \n    tosubsidiary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as consolidated_exchange_rate_id,\n        postingperiod as accounting_period_id,\n        fromcurrency as from_currency_id,\n        fromsubsidiary as from_subsidiary_id,\n        tocurrency as to_currency_id,\n        tosubsidiary as to_subsidiary_id,\n        accountingbook as accounting_book_id,\n        currentrate as current_rate, \n        averagerate as average_rate,\n        historicalrate as historical_rate\n\n        --The below macro adds the fields defined within your consolidated_exchange_rates_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__consolidated_exchange_rates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:47.370707Z", "completed_at": "2024-09-16T15:41:48.539004Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:48.539464Z", "completed_at": "2024-09-16T15:41:48.539468Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.288409948348999, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounts", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounts_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    acctnumber\n    \n as \n    \n    acctnumber\n    \n, \n    \n    \n    accttype\n    \n as \n    \n    accttype\n    \n, \n    \n    \n    sspecacct\n    \n as \n    \n    sspecacct\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    accountsearchdisplaynamecopy\n    \n as \n    \n    accountsearchdisplaynamecopy\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    deferralacct\n    \n as \n    \n    deferralacct\n    \n, \n    \n    \n    cashflowrate\n    \n as \n    \n    cashflowrate\n    \n, \n    \n    \n    generalrate\n    \n as \n    \n    generalrate\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    class\n    \n as \n    \n    class\n    \n, \n    \n    \n    department\n    \n as \n    \n    department\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    includechildren\n    \n as \n    \n    includechildren\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    issummary\n    \n as \n    \n    issummary\n    \n, \n    \n    \n    eliminate\n    \n as \n    \n    eliminate\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as account_id, \n        externalid as account_external_id,\n        parent as parent_id,\n        acctnumber as account_number,\n        accttype as account_type_id,\n        sspecacct as special_account_type_id,\n        fullname as name,\n        accountsearchdisplaynamecopy as display_name,\n        description as account_description,\n        deferralacct as deferral_account_id,\n        cashflowrate as cash_flow_rate_type,\n        generalrate as general_rate_type,\n        currency as currency_id,\n        class as class_id,\n        department as department_id,\n        location as location_id,\n        includechildren = 'T' as is_including_child_subs,\n        isinactive = 'T' as is_inactive,\n        issummary = 'T' as is_summary,\n        eliminate = 'T' as is_eliminate,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your accounts_pass_through_columns variable into the staging model\n        \n\n\n\n\n        \n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:48.585608Z", "completed_at": "2024-09-16T15:41:49.672743Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:49.673763Z", "completed_at": "2024-09-16T15:41:49.673766Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3276770114898682, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__customers", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__customers_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    entityid\n    \n as \n    \n    entityid\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    isperson\n    \n as \n    \n    isperson\n    \n, \n    \n    \n    altname\n    \n as \n    \n    altname\n    \n, \n    \n    \n    companyname\n    \n as \n    \n    companyname\n    \n, \n    \n    \n    firstname\n    \n as \n    \n    firstname\n    \n, \n    \n    \n    lastname\n    \n as \n    \n    lastname\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    defaultbillingaddress\n    \n as \n    \n    defaultbillingaddress\n    \n, \n    \n    \n    defaultshippingaddress\n    \n as \n    \n    defaultshippingaddress\n    \n, \n    \n    \n    receivablesaccount\n    \n as \n    \n    receivablesaccount\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    firstorderdate\n    \n as \n    \n    firstorderdate\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as customer_id,\n        entityid as entity_id,\n        externalid as customer_external_id,\n        parent as parent_id,\n        isperson = 'T' as is_person,\n        altname as alt_name,\n        companyname as company_name,\n        firstname as first_name,\n        lastname as last_name,\n        email as email_address,\n        phone as phone_number,\n        defaultbillingaddress as default_billing_address_id,\n        defaultshippingaddress as default_shipping_address_id,\n        receivablesaccount as receivables_account_id,\n        currency as currency_id,\n        firstorderdate as date_first_order_at\n\n        --The below macro adds the fields defined within your customers_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__customers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:48.660759Z", "completed_at": "2024-09-16T15:41:49.701250Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:49.701733Z", "completed_at": "2024-09-16T15:41:49.701740Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.2557060718536377, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__employees", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__employees_tmp\"\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as TEXT) as \n    \n    accountnumber\n    \n , \n    cast(null as TEXT) as \n    \n    aliennumber\n    \n , \n    \n    \n    approvallimit\n    \n as \n    \n    approvallimit\n    \n, \n    cast(null as integer) as \n    \n    approver\n    \n , \n    cast(null as integer) as \n    \n    class\n    \n , \n    cast(null as TEXT) as \n    \n    comments\n    \n , \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    department\n    \n as \n    \n    department\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    cast(null as integer) as \n    \n    employeestatus\n    \n , \n    cast(null as integer) as \n    \n    employeetype\n    \n , \n    \n    \n    entityid\n    \n as \n    \n    entityid\n    \n, \n    \n    \n    expenselimit\n    \n as \n    \n    expenselimit\n    \n, \n    \n    \n    firstname\n    \n as \n    \n    firstname\n    \n, \n    cast(null as TEXT) as \n    \n    giveaccess\n    \n , \n    cast(null as timestamp) as \n    \n    hiredate\n    \n , \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    lastname\n    \n as \n    \n    lastname\n    \n, \n    cast(null as integer) as \n    \n    location\n    \n , \n    cast(null as TEXT) as \n    \n    middlename\n    \n , \n    \n    \n    purchaseorderapprovallimit\n    \n as \n    \n    purchaseorderapprovallimit\n    \n, \n    \n    \n    purchaseorderlimit\n    \n as \n    \n    purchaseorderlimit\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n, \n    \n    \n    supervisor\n    \n as \n    \n    supervisor\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as employee_id,\n        entityid as entity_id,\n        firstname as first_name,\n        lastname as last_name,\n        department as department_id,\n        subsidiary as subsidiary_id,\n        email,\n        supervisor as supervisor_id,\n        approvallimit as approval_limit,\n        expenselimit as expense_limit,\n        purchaseorderapprovallimit as purchase_order_approval_limit,\n        purchaseorderlimit as purchase_order_limit,\n        currency as currency_id,\n        isinactive = 'T' as is_inactive\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__employees\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:48.547247Z", "completed_at": "2024-09-16T15:41:49.672415Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:49.673521Z", "completed_at": "2024-09-16T15:41:49.673529Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.3799631595611572, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__currencies", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__currencies_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    currencyprecision\n    \n as \n    \n    currencyprecision\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    displaysymbol\n    \n as \n    \n    displaysymbol\n    \n, \n    \n    \n    exchangerate\n    \n as \n    \n    exchangerate\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    fxrateupdatetimezone\n    \n as \n    \n    fxrateupdatetimezone\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    includeinfxrateupdates\n    \n as \n    \n    includeinfxrateupdates\n    \n, \n    \n    \n    isbasecurrency\n    \n as \n    \n    isbasecurrency\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    overridecurrencyformat\n    \n as \n    \n    overridecurrencyformat\n    \n, \n    \n    \n    symbol\n    \n as \n    \n    symbol\n    \n, \n    \n    \n    symbolplacement\n    \n as \n    \n    symbolplacement\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as currency_id,\n        name,\n        symbol\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__currencies\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:48.646606Z", "completed_at": "2024-09-16T15:41:49.948910Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:49.954889Z", "completed_at": "2024-09-16T15:41:49.954896Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.4327869415283203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__departments", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__departments_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as department_id,\n        parent as parent_id,\n        name,\n        fullname as full_name,\n        subsidiary as subsidiary_id,\n        isinactive = 'T' as is_inactive,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your departments_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__departments\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:49.942545Z", "completed_at": "2024-09-16T15:41:51.117507Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:51.118725Z", "completed_at": "2024-09-16T15:41:51.118728Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3016140460968018, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__entity_address", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__entity_address_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    addr1\n    \n as \n    \n    addr1\n    \n, \n    \n    \n    addr2\n    \n as \n    \n    addr2\n    \n, \n    \n    \n    addr3\n    \n as \n    \n    addr3\n    \n, \n    \n    \n    addressee\n    \n as \n    \n    addressee\n    \n, \n    \n    \n    addrphone\n    \n as \n    \n    addrphone\n    \n, \n    \n    \n    addrtext\n    \n as \n    \n    addrtext\n    \n, \n    \n    \n    attention\n    \n as \n    \n    attention\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    dropdownstate\n    \n as \n    \n    dropdownstate\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    nkey\n    \n as \n    \n    nkey\n    \n, \n    \n    \n    override\n    \n as \n    \n    override\n    \n, \n    \n    \n    recordowner\n    \n as \n    \n    recordowner\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        addr1,\n        addr2,\n        addr3,\n        addressee,\n        addrtext as full_address,\n        city,\n        country,\n        coalesce(state, dropdownstate) as state,\n        nkey,\n        zip as zipcode\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__entity_address\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:49.929022Z", "completed_at": "2024-09-16T15:41:51.117079Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:51.118444Z", "completed_at": "2024-09-16T15:41:51.118452Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3110342025756836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__entities", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__entities_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    contact\n    \n as \n    \n    contact\n    \n, \n    \n    \n    customer\n    \n as \n    \n    customer\n    \n, \n    \n    \n    employee\n    \n as \n    \n    employee\n    \n, \n    \n    \n    entitytitle\n    \n as \n    \n    entitytitle\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isperson\n    \n as \n    \n    isperson\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    project\n    \n as \n    \n    project\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    vendor\n    \n as \n    \n    vendor\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as entity_id,\n        parent as parent_id,\n        entitytitle as entity_name,\n        type as entity_type,\n        isperson = 'T' as is_person,\n        contact as contact_id,\n        customer as customer_id,\n        employee as employee_id,\n        project as job_id,\n        vendor as vendor_id\n\n        --The below macro adds the fields defined within your entities_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__entities\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:49.949807Z", "completed_at": "2024-09-16T15:41:51.118960Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:51.119982Z", "completed_at": "2024-09-16T15:41:51.119989Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2854321002960205, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__jobs", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__jobs_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accountnumber\n    \n as \n    \n    accountnumber\n    \n, \n    \n    \n    actualtime\n    \n as \n    \n    actualtime\n    \n, \n    \n    \n    allowallresourcesfortasks\n    \n as \n    \n    allowallresourcesfortasks\n    \n, \n    \n    \n    allowexpenses\n    \n as \n    \n    allowexpenses\n    \n, \n    \n    \n    allowtime\n    \n as \n    \n    allowtime\n    \n, \n    \n    \n    alternatecontact\n    \n as \n    \n    alternatecontact\n    \n, \n    \n    \n    altname\n    \n as \n    \n    altname\n    \n, \n    \n    \n    billingschedule\n    \n as \n    \n    billingschedule\n    \n, \n    \n    \n    calculatedenddate\n    \n as \n    \n    calculatedenddate\n    \n, \n    \n    \n    calculatedenddatebaseline\n    \n as \n    \n    calculatedenddatebaseline\n    \n, \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    comments\n    \n as \n    \n    comments\n    \n, \n    \n    \n    companyname\n    \n as \n    \n    companyname\n    \n, \n    \n    \n    contact\n    \n as \n    \n    contact\n    \n, \n    \n    \n    contactlist\n    \n as \n    \n    contactlist\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    currencyprecision\n    \n as \n    \n    currencyprecision\n    \n, \n    \n    \n    custentity1\n    \n as \n    \n    custentity1\n    \n, \n    \n    \n    custentity4\n    \n as \n    \n    custentity4\n    \n, \n    \n    \n    custentity5\n    \n as \n    \n    custentity5\n    \n, \n    \n    \n    customer\n    \n as \n    \n    customer\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    datecreated\n    \n as \n    \n    datecreated\n    \n, \n    \n    \n    defaultbillingaddress\n    \n as \n    \n    defaultbillingaddress\n    \n, \n    \n    \n    defaultshippingaddress\n    \n as \n    \n    defaultshippingaddress\n    \n, \n    \n    \n    enddate\n    \n as \n    \n    enddate\n    \n, \n    \n    \n    entityid\n    \n as \n    \n    entityid\n    \n, \n    \n    \n    entitynumber\n    \n as \n    \n    entitynumber\n    \n, \n    \n    \n    entitystatus\n    \n as \n    \n    entitystatus\n    \n, \n    \n    \n    entitytitle\n    \n as \n    \n    entitytitle\n    \n, \n    \n    \n    estimatedcost\n    \n as \n    \n    estimatedcost\n    \n, \n    \n    \n    estimatedgrossprofit\n    \n as \n    \n    estimatedgrossprofit\n    \n, \n    \n    \n    estimatedgrossprofitpercent\n    \n as \n    \n    estimatedgrossprofitpercent\n    \n, \n    \n    \n    estimatedlaborcost\n    \n as \n    \n    estimatedlaborcost\n    \n, \n    \n    \n    estimatedlaborcostbaseline\n    \n as \n    \n    estimatedlaborcostbaseline\n    \n, \n    \n    \n    estimatedlaborrevenue\n    \n as \n    \n    estimatedlaborrevenue\n    \n, \n    \n    \n    estimatedrevenue\n    \n as \n    \n    estimatedrevenue\n    \n, \n    \n    \n    estimatedtime\n    \n as \n    \n    estimatedtime\n    \n, \n    \n    \n    estimatedtimeoverride\n    \n as \n    \n    estimatedtimeoverride\n    \n, \n    \n    \n    estimatedtimeoverridebaseline\n    \n as \n    \n    estimatedtimeoverridebaseline\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    files\n    \n as \n    \n    files\n    \n, \n    \n    \n    forecastchargerunondemand\n    \n as \n    \n    forecastchargerunondemand\n    \n, \n    \n    \n    fxrate\n    \n as \n    \n    fxrate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    includecrmtasksintotals\n    \n as \n    \n    includecrmtasksintotals\n    \n, \n    \n    \n    isexempttime\n    \n as \n    \n    isexempttime\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    isproductivetime\n    \n as \n    \n    isproductivetime\n    \n, \n    \n    \n    isutilizedtime\n    \n as \n    \n    isutilizedtime\n    \n, \n    \n    \n    jobbillingtype\n    \n as \n    \n    jobbillingtype\n    \n, \n    \n    \n    jobitem\n    \n as \n    \n    jobitem\n    \n, \n    \n    \n    jobprice\n    \n as \n    \n    jobprice\n    \n, \n    \n    \n    jobtype\n    \n as \n    \n    jobtype\n    \n, \n    \n    \n    lastbaselinedate\n    \n as \n    \n    lastbaselinedate\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    limittimetoassignees\n    \n as \n    \n    limittimetoassignees\n    \n, \n    \n    \n    materializetime\n    \n as \n    \n    materializetime\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    percentcomplete\n    \n as \n    \n    percentcomplete\n    \n, \n    \n    \n    percenttimecomplete\n    \n as \n    \n    percenttimecomplete\n    \n, \n    \n    \n    primarycontact\n    \n as \n    \n    primarycontact\n    \n, \n    \n    \n    projectedenddate\n    \n as \n    \n    projectedenddate\n    \n, \n    \n    \n    projectedenddatebaseline\n    \n as \n    \n    projectedenddatebaseline\n    \n, \n    \n    \n    projectmanager\n    \n as \n    \n    projectmanager\n    \n, \n    \n    \n    startdate\n    \n as \n    \n    startdate\n    \n, \n    \n    \n    startdatebaseline\n    \n as \n    \n    startdatebaseline\n    \n, \n    \n    \n    timeapproval\n    \n as \n    \n    timeapproval\n    \n, \n    \n    \n    timeremaining\n    \n as \n    \n    timeremaining\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        id as job_id,\n        externalid as job_external_id,\n        customer as customer_id,\n        entityid as entity_id,\n        defaultbillingaddress as billing_address_id,\n        defaultshippingaddress as shipping_address_id,\n        parent as parent_id\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__jobs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:50.082432Z", "completed_at": "2024-09-16T15:41:51.223251Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:51.223752Z", "completed_at": "2024-09-16T15:41:51.223758Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.321807861328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__items", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__items_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as integer) as \n    \n    alternatedemandsourceitem\n    \n , \n    cast(null as integer) as \n    \n    amortizationperiod\n    \n , \n    cast(null as integer) as \n    \n    amortizationtemplate\n    \n , \n    \n    \n    assetaccount\n    \n as \n    \n    assetaccount\n    \n, \n    cast(null as TEXT) as \n    \n    atpmethod\n    \n , \n    cast(null as TEXT) as \n    \n    autoexpandkitforrevenuemgmt\n    \n , \n    cast(null as float) as \n    \n    averagecost\n    \n , \n    cast(null as integer) as \n    \n    backwardconsumptiondays\n    \n , \n    cast(null as integer) as \n    \n    billexchratevarianceacct\n    \n , \n    cast(null as integer) as \n    \n    billingschedule\n    \n , \n    cast(null as integer) as \n    \n    billpricevarianceacct\n    \n , \n    cast(null as integer) as \n    \n    billqtyvarianceacct\n    \n , \n    cast(null as TEXT) as \n    \n    buildentireassembly\n    \n , \n    cast(null as float) as \n    \n    buildtime\n    \n , \n    \n    \n    class\n    \n as \n    \n    class\n    \n, \n    cast(null as integer) as \n    \n    consumptionunit\n    \n , \n    cast(null as TEXT) as \n    \n    copydescription\n    \n , \n    cast(null as float) as \n    \n    cost\n    \n , \n    cast(null as float) as \n    \n    costestimate\n    \n , \n    cast(null as TEXT) as \n    \n    costestimatetype\n    \n , \n    cast(null as TEXT) as \n    \n    costingmethod\n    \n , \n    cast(null as TEXT) as \n    \n    costingmethoddisplay\n    \n , \n    cast(null as TEXT) as \n    \n    countryofmanufacture\n    \n , \n    cast(null as timestamp) as \n    \n    createddate\n    \n , \n    cast(null as integer) as \n    \n    createexpenseplanson\n    \n , \n    cast(null as TEXT) as \n    \n    createjob\n    \n , \n    cast(null as integer) as \n    \n    createrevenueplanson\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    \n    \n    deferralaccount\n    \n as \n    \n    deferralaccount\n    \n, \n    cast(null as integer) as \n    \n    deferredrevenueaccount\n    \n , \n    cast(null as TEXT) as \n    \n    deferrevrec\n    \n , \n    cast(null as float) as \n    \n    demandmodifier\n    \n , \n    cast(null as TEXT) as \n    \n    demandsource\n    \n , \n    cast(null as integer) as \n    \n    demandtimefence\n    \n , \n    \n    \n    department\n    \n as \n    \n    department\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    cast(null as TEXT) as \n    \n    directrevenueposting\n    \n , \n    cast(null as TEXT) as \n    \n    displayname\n    \n , \n    cast(null as integer) as \n    \n    dropshipexpenseaccount\n    \n , \n    cast(null as TEXT) as \n    \n    enforceminqtyinternally\n    \n , \n    cast(null as TEXT) as \n    \n    excludefromsitemap\n    \n , \n    \n    \n    expenseaccount\n    \n as \n    \n    expenseaccount\n    \n, \n    cast(null as integer) as \n    \n    expenseamortizationrule\n    \n , \n    cast(null as TEXT) as \n    \n    externalid\n    \n , \n    cast(null as float) as \n    \n    fixedlotsize\n    \n , \n    cast(null as integer) as \n    \n    forwardconsumptiondays\n    \n , \n    cast(null as TEXT) as \n    \n    froogleproductfeed\n    \n , \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    cast(null as float) as \n    \n    fxcost\n    \n , \n    \n    \n    gainlossaccount\n    \n as \n    \n    gainlossaccount\n    \n, \n    cast(null as TEXT) as \n    \n    generateaccruals\n    \n , \n    cast(null as float) as \n    \n    handlingcost\n    \n , \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as TEXT) as \n    \n    includechildren\n    \n , \n    \n    \n    incomeaccount\n    \n as \n    \n    incomeaccount\n    \n, \n    cast(null as integer) as \n    \n    intercodefrevaccount\n    \n , \n    cast(null as integer) as \n    \n    intercoexpenseaccount\n    \n , \n    cast(null as integer) as \n    \n    intercoincomeaccount\n    \n , \n    cast(null as TEXT) as \n    \n    isdropshipitem\n    \n , \n    cast(null as TEXT) as \n    \n    isfulfillable\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as TEXT) as \n    \n    islotitem\n    \n , \n    cast(null as TEXT) as \n    \n    isonline\n    \n , \n    cast(null as TEXT) as \n    \n    isphantom\n    \n , \n    cast(null as TEXT) as \n    \n    isserialitem\n    \n , \n    cast(null as TEXT) as \n    \n    isspecialorderitem\n    \n , \n    cast(null as TEXT) as \n    \n    isspecialworkorderitem\n    \n , \n    cast(null as TEXT) as \n    \n    itemid\n    \n , \n    cast(null as integer) as \n    \n    itemrevenuecategory\n    \n , \n    \n    \n    itemtype\n    \n as \n    \n    itemtype\n    \n, \n    cast(null as timestamp) as \n    \n    lastmodifieddate\n    \n , \n    cast(null as float) as \n    \n    lastpurchaseprice\n    \n , \n    cast(null as integer) as \n    \n    leadtime\n    \n , \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    cast(null as TEXT) as \n    \n    manufacturer\n    \n , \n    cast(null as TEXT) as \n    \n    matchbilltoreceipt\n    \n , \n    cast(null as TEXT) as \n    \n    matrixitemnametemplate\n    \n , \n    cast(null as TEXT) as \n    \n    matrixtype\n    \n , \n    cast(null as integer) as \n    \n    maximumquantity\n    \n , \n    cast(null as integer) as \n    \n    minimumquantity\n    \n , \n    cast(null as TEXT) as \n    \n    mpn\n    \n , \n    cast(null as TEXT) as \n    \n    nextagcategory\n    \n , \n    cast(null as TEXT) as \n    \n    nextagproductfeed\n    \n , \n    cast(null as TEXT) as \n    \n    overallquantitypricingtype\n    \n , \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    cast(null as integer) as \n    \n    periodiclotsizedays\n    \n , \n    cast(null as TEXT) as \n    \n    periodiclotsizetype\n    \n , \n    cast(null as integer) as \n    \n    preferredlocation\n    \n , \n    cast(null as integer) as \n    \n    pricinggroup\n    \n , \n    cast(null as TEXT) as \n    \n    printitems\n    \n , \n    cast(null as integer) as \n    \n    prodpricevarianceacct\n    \n , \n    cast(null as integer) as \n    \n    prodqtyvarianceacct\n    \n , \n    cast(null as integer) as \n    \n    projectexpensetype\n    \n , \n    cast(null as integer) as \n    \n    projecttemplate\n    \n , \n    cast(null as TEXT) as \n    \n    purchasedescription\n    \n , \n    cast(null as float) as \n    \n    purchaseorderamount\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantity\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantitydiff\n    \n , \n    cast(null as integer) as \n    \n    purchasepricevarianceacct\n    \n , \n    cast(null as integer) as \n    \n    purchaseunit\n    \n , \n    cast(null as integer) as \n    \n    quantitypricingschedule\n    \n , \n    cast(null as float) as \n    \n    receiptamount\n    \n , \n    cast(null as float) as \n    \n    receiptquantity\n    \n , \n    cast(null as float) as \n    \n    receiptquantitydiff\n    \n , \n    cast(null as TEXT) as \n    \n    relateditemsdescription\n    \n , \n    cast(null as integer) as \n    \n    rescheduleindays\n    \n , \n    cast(null as integer) as \n    \n    rescheduleoutdays\n    \n , \n    cast(null as float) as \n    \n    residual\n    \n , \n    cast(null as integer) as \n    \n    revenueallocationgroup\n    \n , \n    cast(null as integer) as \n    \n    revenuerecognitionrule\n    \n , \n    cast(null as integer) as \n    \n    revrecforecastrule\n    \n , \n    cast(null as integer) as \n    \n    revreclassfxaccount\n    \n , \n    cast(null as TEXT) as \n    \n    roundupascomponent\n    \n , \n    cast(null as float) as \n    \n    safetystocklevel\n    \n , \n    cast(null as integer) as \n    \n    saleunit\n    \n , \n    cast(null as integer) as \n    \n    scrapacct\n    \n , \n    cast(null as TEXT) as \n    \n    searchkeywords\n    \n , \n    cast(null as TEXT) as \n    \n    seasonaldemand\n    \n , \n    cast(null as TEXT) as \n    \n    shipindividually\n    \n , \n    cast(null as integer) as \n    \n    shippackage\n    \n , \n    cast(null as float) as \n    \n    shippingcost\n    \n , \n    cast(null as TEXT) as \n    \n    shoppingdotcomcategory\n    \n , \n    cast(null as TEXT) as \n    \n    shoppingproductfeed\n    \n , \n    cast(null as integer) as \n    \n    shopzillacategoryid\n    \n , \n    cast(null as TEXT) as \n    \n    shopzillaproductfeed\n    \n , \n    cast(null as TEXT) as \n    \n    sitemappriority\n    \n , \n    cast(null as TEXT) as \n    \n    stockdescription\n    \n , \n    cast(null as integer) as \n    \n    stockunit\n    \n , \n    cast(null as TEXT) as \n    \n    storedescription\n    \n , \n    cast(null as integer) as \n    \n    storedisplayimage\n    \n , \n    cast(null as TEXT) as \n    \n    storedisplayname\n    \n , \n    cast(null as integer) as \n    \n    storedisplaythumbnail\n    \n , \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n, \n    cast(null as TEXT) as \n    \n    subtype\n    \n , \n    cast(null as TEXT) as \n    \n    supplylotsizingmethod\n    \n , \n    cast(null as TEXT) as \n    \n    supplyreplenishmentmethod\n    \n , \n    cast(null as integer) as \n    \n    supplytimefence\n    \n , \n    cast(null as TEXT) as \n    \n    supplytype\n    \n , \n    cast(null as float) as \n    \n    totalquantityonhand\n    \n , \n    cast(null as float) as \n    \n    totalvalue\n    \n , \n    cast(null as float) as \n    \n    transferprice\n    \n , \n    cast(null as integer) as \n    \n    unbuildvarianceaccount\n    \n , \n    cast(null as integer) as \n    \n    unitstype\n    \n , \n    cast(null as TEXT) as \n    \n    upccode\n    \n , \n    cast(null as TEXT) as \n    \n    usebins\n    \n , \n    cast(null as TEXT) as \n    \n    usemarginalrates\n    \n , \n    cast(null as TEXT) as \n    \n    vendorname\n    \n , \n    cast(null as integer) as \n    \n    vendreturnvarianceaccount\n    \n , \n    cast(null as TEXT) as \n    \n    vsoedelivered\n    \n , \n    cast(null as TEXT) as \n    \n    vsoepermitdiscount\n    \n , \n    cast(null as TEXT) as \n    \n    vsoesopgroup\n    \n , \n    cast(null as float) as \n    \n    weight\n    \n , \n    cast(null as integer) as \n    \n    weightunit\n    \n , \n    cast(null as TEXT) as \n    \n    weightunits\n    \n , \n    cast(null as integer) as \n    \n    wipacct\n    \n , \n    cast(null as integer) as \n    \n    wipvarianceacct\n    \n , \n    cast(null as TEXT) as \n    \n    yahooproductfeed\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as item_id,\n        fullname as name,\n        itemtype as type_name,\n        description as sales_description,\n        department as department_id,\n        class as class_id,\n        location as location_id,\n        subsidiary as subsidiary_id,\n        assetaccount as asset_account_id,\n        expenseaccount as expense_account_id,\n        gainlossaccount as gain_loss_account_id,\n        incomeaccount as income_account_id,\n        intercoexpenseaccount as interco_expense_account_id,\n        intercoincomeaccount as interco_income_account_id,\n        deferralaccount as deferred_expense_account_id,\n        deferredrevenueaccount as deferred_revenue_account_id,\n        parent as parent_item_id\n\n        --The below macro adds the fields defined within your items_pass_through_columns variable into the staging model\n        \n\n\n\n\n        \n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__items\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:51.235737Z", "completed_at": "2024-09-16T15:41:52.346886Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:52.348072Z", "completed_at": "2024-09-16T15:41:52.348082Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2155818939208984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__locations", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__locations_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    mainaddress\n    \n as \n    \n    mainaddress\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as location_id,\n        name,\n        fullname as full_name,\n        mainaddress as main_address_id,\n        parent as parent_id,\n        subsidiary as subsidiary_id\n\n        --The below macro adds the fields defined within your locations_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__locations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:51.226559Z", "completed_at": "2024-09-16T15:41:52.386264Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:52.386862Z", "completed_at": "2024-09-16T15:41:52.386867Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.274595022201538, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__location_main_address", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__location_main_address_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    addr1\n    \n as \n    \n    addr1\n    \n, \n    \n    \n    addr2\n    \n as \n    \n    addr2\n    \n, \n    \n    \n    addr3\n    \n as \n    \n    addr3\n    \n, \n    \n    \n    addressee\n    \n as \n    \n    addressee\n    \n, \n    \n    \n    addrphone\n    \n as \n    \n    addrphone\n    \n, \n    \n    \n    addrtext\n    \n as \n    \n    addrtext\n    \n, \n    \n    \n    attention\n    \n as \n    \n    attention\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    dropdownstate\n    \n as \n    \n    dropdownstate\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    nkey\n    \n as \n    \n    nkey\n    \n, \n    \n    \n    override\n    \n as \n    \n    override\n    \n, \n    \n    \n    recordowner\n    \n as \n    \n    recordowner\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        addr1,\n        addr2,\n        addr3,\n        addressee,\n        addrtext as full_address,\n        city,\n        country,\n        coalesce(state, dropdownstate) as state,\n        nkey,\n        zip as zipcode\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__location_main_address\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:51.240266Z", "completed_at": "2024-09-16T15:41:52.385136Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:52.385798Z", "completed_at": "2024-09-16T15:41:52.385805Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2665348052978516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__subsidiaries", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__subsidiaries_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    mainaddress\n    \n as \n    \n    mainaddress\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    fiscalcalendar\n    \n as \n    \n    fiscalcalendar\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    iselimination\n    \n as \n    \n    iselimination\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as subsidiary_id,\n        name,\n        fullname as full_name,\n        email as email_address,\n        mainaddress as main_address_id,\n        country,\n        state,\n        fiscalcalendar as fiscal_calendar_id,\n        parent as parent_id,\n        iselimination = 'T' as is_elimination,\n        currency as currency_id\n\n        --The below macro adds the fields defined within your subsidiaries_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__subsidiaries\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:51.404044Z", "completed_at": "2024-09-16T15:41:52.441372Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:52.442418Z", "completed_at": "2024-09-16T15:41:52.442428Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1423001289367676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__transaction_accounting_lines", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transaction_accounting_lines_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account\n    \n as \n    \n    account\n    \n, \n    \n    \n    accountingbook\n    \n as \n    \n    accountingbook\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amountlinked\n    \n as \n    \n    amountlinked\n    \n, \n    \n    \n    amountpaid\n    \n as \n    \n    amountpaid\n    \n, \n    \n    \n    amountunpaid\n    \n as \n    \n    amountunpaid\n    \n, \n    \n    \n    credit\n    \n as \n    \n    credit\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    debit\n    \n as \n    \n    debit\n    \n, \n    \n    \n    exchangerate\n    \n as \n    \n    exchangerate\n    \n, \n    \n    \n    netamount\n    \n as \n    \n    netamount\n    \n, \n    \n    \n    overheadparentitem\n    \n as \n    \n    overheadparentitem\n    \n, \n    \n    \n    paymentamountunused\n    \n as \n    \n    paymentamountunused\n    \n, \n    \n    \n    paymentamountused\n    \n as \n    \n    paymentamountused\n    \n, \n    \n    \n    posting\n    \n as \n    \n    posting\n    \n, \n    \n    \n    transaction\n    \n as \n    \n    transaction\n    \n, \n    \n    \n    transactionline\n    \n as \n    \n    transactionline\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted,\n        _fivetran_synced,\n        transaction as transaction_id,\n        transactionline as transaction_line_id,\n        accountingbook as accounting_book_id,\n        account as account_id,\n        posting = 'T' as is_posting,\n        exchangerate as exchange_rate,\n        amount,\n        credit as credit_amount,\n        debit as debit_amount,\n        netamount as net_amount,\n        amountpaid as paid_amount,\n        amountunpaid as unpaid_amount\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transaction_accounting_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:52.451479Z", "completed_at": "2024-09-16T15:41:53.527927Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:53.528569Z", "completed_at": "2024-09-16T15:41:53.528587Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1832590103149414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__transaction_lines", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transaction_lines_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    transaction\n    \n as \n    \n    transaction\n    \n, \n    \n    \n    linesequencenumber\n    \n as \n    \n    linesequencenumber\n    \n, \n    \n    \n    memo\n    \n as \n    \n    memo\n    \n, \n    \n    \n    entity\n    \n as \n    \n    entity\n    \n, \n    \n    \n    item\n    \n as \n    \n    item\n    \n, \n    \n    \n    class\n    \n as \n    \n    class\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n, \n    \n    \n    department\n    \n as \n    \n    department\n    \n, \n    \n    \n    isclosed\n    \n as \n    \n    isclosed\n    \n, \n    \n    \n    isbillable\n    \n as \n    \n    isbillable\n    \n, \n    \n    \n    iscogs\n    \n as \n    \n    iscogs\n    \n, \n    \n    \n    cleared\n    \n as \n    \n    cleared\n    \n, \n    \n    \n    commitmentfirm\n    \n as \n    \n    commitmentfirm\n    \n, \n    \n    \n    mainline\n    \n as \n    \n    mainline\n    \n, \n    \n    \n    taxline\n    \n as \n    \n    taxline\n    \n, \n    cast(null as TEXT) as \n    \n    eliminate\n    \n , \n    \n    \n    netamount\n    \n as \n    \n    netamount\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as transaction_line_id,\n        transaction as transaction_id,\n        linesequencenumber as transaction_line_number,\n        memo,\n        entity as entity_id,\n        item as item_id,\n        class as class_id,\n        location as location_id,\n        subsidiary as subsidiary_id,\n        department as department_id,\n        isclosed = 'T' as is_closed,\n        isbillable = 'T' as is_billable,\n        iscogs = 'T' as is_cogs,\n        cleared = 'T' as is_cleared,\n        commitmentfirm = 'T' as is_commitment_firm,\n        mainline = 'T' as is_main_line,\n        taxline = 'T' as is_tax_line,\n        eliminate = 'T' as is_eliminate,\n        netamount\n\n        --The below macro adds the fields defined within your transaction_lines_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transaction_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:52.504288Z", "completed_at": "2024-09-16T15:41:53.529301Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:53.529902Z", "completed_at": "2024-09-16T15:41:53.529906Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.141808032989502, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__vendors", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__vendors_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accountnumber\n    \n as \n    \n    accountnumber\n    \n, \n    \n    \n    altemail\n    \n as \n    \n    altemail\n    \n, \n    \n    \n    altname\n    \n as \n    \n    altname\n    \n, \n    \n    \n    altphone\n    \n as \n    \n    altphone\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    balanceprimary\n    \n as \n    \n    balanceprimary\n    \n, \n    cast(null as integer) as \n    \n    billingclass\n    \n , \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    comments\n    \n as \n    \n    comments\n    \n, \n    \n    \n    companyname\n    \n as \n    \n    companyname\n    \n, \n    \n    \n    contact\n    \n as \n    \n    contact\n    \n, \n    \n    \n    contactlist\n    \n as \n    \n    contactlist\n    \n, \n    \n    \n    creditlimit\n    \n as \n    \n    creditlimit\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    datecreated\n    \n as \n    \n    datecreated\n    \n, \n    \n    \n    defaultbankaccount\n    \n as \n    \n    defaultbankaccount\n    \n, \n    \n    \n    defaultbillingaddress\n    \n as \n    \n    defaultbillingaddress\n    \n, \n    \n    \n    defaultshippingaddress\n    \n as \n    \n    defaultshippingaddress\n    \n, \n    \n    \n    defaultvendorpaymentaccount\n    \n as \n    \n    defaultvendorpaymentaccount\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    emailpreference\n    \n as \n    \n    emailpreference\n    \n, \n    \n    \n    emailtransactions\n    \n as \n    \n    emailtransactions\n    \n, \n    \n    \n    entityid\n    \n as \n    \n    entityid\n    \n, \n    \n    \n    entitynumber\n    \n as \n    \n    entitynumber\n    \n, \n    \n    \n    entitytitle\n    \n as \n    \n    entitytitle\n    \n, \n    \n    \n    expenseaccount\n    \n as \n    \n    expenseaccount\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    fax\n    \n as \n    \n    fax\n    \n, \n    \n    \n    faxtransactions\n    \n as \n    \n    faxtransactions\n    \n, \n    \n    \n    firstname\n    \n as \n    \n    firstname\n    \n, \n    \n    \n    giveaccess\n    \n as \n    \n    giveaccess\n    \n, \n    \n    \n    homephone\n    \n as \n    \n    homephone\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    incoterm\n    \n as \n    \n    incoterm\n    \n, \n    cast(null as TEXT) as \n    \n    isautogeneratedrepresentingentity\n    \n , \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    isjobresourcevend\n    \n as \n    \n    isjobresourcevend\n    \n, \n    \n    \n    isperson\n    \n as \n    \n    isperson\n    \n, \n    \n    \n    laborcost\n    \n as \n    \n    laborcost\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    lastname\n    \n as \n    \n    lastname\n    \n, \n    \n    \n    legalname\n    \n as \n    \n    legalname\n    \n, \n    \n    \n    middlename\n    \n as \n    \n    middlename\n    \n, \n    \n    \n    mobilephone\n    \n as \n    \n    mobilephone\n    \n, \n    \n    \n    payablesaccount\n    \n as \n    \n    payablesaccount\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    printoncheckas\n    \n as \n    \n    printoncheckas\n    \n, \n    \n    \n    printtransactions\n    \n as \n    \n    printtransactions\n    \n, \n    \n    \n    purchaseorderamount\n    \n as \n    \n    purchaseorderamount\n    \n, \n    \n    \n    purchaseorderquantity\n    \n as \n    \n    purchaseorderquantity\n    \n, \n    \n    \n    purchaseorderquantitydiff\n    \n as \n    \n    purchaseorderquantitydiff\n    \n, \n    \n    \n    receiptamount\n    \n as \n    \n    receiptamount\n    \n, \n    \n    \n    receiptquantity\n    \n as \n    \n    receiptquantity\n    \n, \n    \n    \n    receiptquantitydiff\n    \n as \n    \n    receiptquantitydiff\n    \n, \n    cast(null as integer) as \n    \n    representingsubsidiary\n    \n , \n    \n    \n    rolesforsearch\n    \n as \n    \n    rolesforsearch\n    \n, \n    \n    \n    salutation\n    \n as \n    \n    salutation\n    \n, \n    \n    \n    subsidiaryedition\n    \n as \n    \n    subsidiaryedition\n    \n, \n    \n    \n    terms\n    \n as \n    \n    terms\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    unbilledorders\n    \n as \n    \n    unbilledorders\n    \n, \n    \n    \n    unbilledordersprimary\n    \n as \n    \n    unbilledordersprimary\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n, \n    \n    \n    workcalendar\n    \n as \n    \n    workcalendar\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as vendor_id,\n        altname as alt_name,\n        companyname as company_name,\n        datecreated as create_date_at,\n        category as vendor_category_id\n\n        --The below macro adds the fields defined within your vendors_pass_through_columns variable into the staging model\n        \n\n\n\n\n        \n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__vendors\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:52.510037Z", "completed_at": "2024-09-16T15:41:53.553697Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:53.554209Z", "completed_at": "2024-09-16T15:41:53.554216Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1933000087738037, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__vendor_categories", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__vendor_categories_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    istaxagency\n    \n as \n    \n    istaxagency\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as vendor_category_id,\n        name,\n        _fivetran_synced\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__vendor_categories\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:52.548431Z", "completed_at": "2024-09-16T15:41:53.698400Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:53.700382Z", "completed_at": "2024-09-16T15:41:53.700388Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2691442966461182, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__transactions", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transactions_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    transactionnumber\n    \n as \n    \n    transactionnumber\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    memo\n    \n as \n    \n    memo\n    \n, \n    \n    \n    trandate\n    \n as \n    \n    trandate\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    cast(null as integer) as \n    \n    createdby\n    \n , \n    \n    \n    createddate\n    \n as \n    \n    createddate\n    \n, \n    \n    \n    duedate\n    \n as \n    \n    duedate\n    \n, \n    \n    \n    closedate\n    \n as \n    \n    closedate\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    entity\n    \n as \n    \n    entity\n    \n, \n    cast(null as integer) as \n    \n    lastmodifiedby\n    \n , \n    \n    \n    postingperiod\n    \n as \n    \n    postingperiod\n    \n, \n    \n    \n    posting\n    \n as \n    \n    posting\n    \n, \n    cast(null as TEXT) as \n    \n    intercoadj\n    \n , \n    \n    \n    isreversal\n    \n as \n    \n    isreversal\n    \n, \n    cast(null as integer) as \n    \n    reversal\n    \n , \n    cast(null as timestamp) as \n    \n    reversaldate\n    \n , \n    cast(null as TEXT) as \n    \n    reversaldefer\n    \n , \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        cast(_fivetran_synced as date) as _fivetran_synced_date,\n        id as transaction_id,\n        transactionnumber as transaction_number,\n        type as transaction_type,\n        memo,\n        cast(trandate as date) as transaction_date,\n        status,\n        createddate as created_at,\n        cast(duedate as date) as due_date_at,\n        closedate as closed_at,\n        currency as currency_id,\n        entity as entity_id,\n        postingperiod as accounting_period_id,\n        posting = 'T' as is_posting,\n        intercoadj = 'T' as is_intercompany_adjustment,\n        isreversal = 'T' as is_reversal,\n        reversal as reversal_transaction_id,\n        cast(reversaldate as date) as reversal_date,\n        reversaldefer = 'T' as is_reversal_defer\n\n        --The below macro adds the fields defined within your transactions_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:53.702026Z", "completed_at": "2024-09-16T15:41:54.769019Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:54.770841Z", "completed_at": "2024-09-16T15:41:54.770849Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1809430122375488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__classes", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__classes_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        class_id,\n        full_name,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your classes_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__classes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:53.648580Z", "completed_at": "2024-09-16T15:41:54.768691Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:54.770546Z", "completed_at": "2024-09-16T15:41:54.770552Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2495172023773193, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__accounting_books", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounting_books_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    accounting_book_extid\n    \n , \n    \n    \n    accounting_book_id\n    \n as \n    \n    accounting_book_id\n    \n, \n    cast(null as TEXT) as \n    \n    accounting_book_name\n    \n , \n    cast(null as float) as \n    \n    base_book_id\n    \n , \n    cast(null as timestamp) as \n    \n    date_created\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as float) as \n    \n    effective_period_id\n    \n , \n    cast(null as TEXT) as \n    \n    form_template_component_id\n    \n , \n    cast(null as float) as \n    \n    form_template_id\n    \n , \n    cast(null as TEXT) as \n    \n    is_adjustment_only\n    \n , \n    cast(null as TEXT) as \n    \n    is_arrangement_level_reclass\n    \n , \n    cast(null as TEXT) as \n    \n    is_consolidated\n    \n , \n    cast(null as TEXT) as \n    \n    is_contingent_revenue_handling\n    \n , \n    cast(null as TEXT) as \n    \n    is_include_child_subsidiaries\n    \n , \n    \n    \n    is_primary\n    \n as \n    \n    is_primary\n    \n, \n    cast(null as TEXT) as \n    \n    is_two_step_revenue_allocation\n    \n , \n    cast(null as TEXT) as \n    \n    status\n    \n , \n    cast(null as TEXT) as \n    \n    unbilled_receivable_grouping\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        accounting_book_id,\n        is_primary,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounting_books\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:53.672785Z", "completed_at": "2024-09-16T15:41:54.767815Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:54.769382Z", "completed_at": "2024-09-16T15:41:54.769392Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.2330892086029053, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__accounts", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounts_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    cast(null as TEXT) as \n    \n    accountnumber\n    \n , \n    \n    \n    general_rate_type\n    \n as \n    \n    general_rate_type\n    \n, \n    \n    \n    is_balancesheet\n    \n as \n    \n    is_balancesheet\n    \n, \n    \n    \n    is_leftside\n    \n as \n    \n    is_leftside\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    \n    \n    type_name\n    \n as \n    \n    type_name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        account_id,\n        parent_id,\n        name,\n        type_name,\n        accountnumber as account_number,\n        general_rate_type,\n        is_leftside,\n        is_balancesheet,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your accounts_pass_through_columns variable into the staging model\n        \n\n\n\n\n        \n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:53.816524Z", "completed_at": "2024-09-16T15:41:54.859471Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:54.860402Z", "completed_at": "2024-09-16T15:41:54.860412Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1530590057373047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__accounting_periods", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounting_periods_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TEXT) as \n    \n    _fivetran_id\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    accounting_period_id\n    \n as \n    \n    accounting_period_id\n    \n, \n    \n    \n    closed\n    \n as \n    \n    closed\n    \n, \n    cast(null as TEXT) as \n    \n    closed_accounts_payable\n    \n , \n    cast(null as TEXT) as \n    \n    closed_accounts_receivable\n    \n , \n    cast(null as TEXT) as \n    \n    closed_all\n    \n , \n    cast(null as timestamp) as \n    \n    closed_on\n    \n , \n    cast(null as TEXT) as \n    \n    closed_payroll\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    \n    \n    ending\n    \n as \n    \n    ending\n    \n, \n    \n    \n    fiscal_calendar_id\n    \n as \n    \n    fiscal_calendar_id\n    \n, \n    cast(null as TEXT) as \n    \n    fivetran_index\n    \n , \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n, \n    \n    \n    is_adjustment\n    \n as \n    \n    is_adjustment\n    \n, \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as TEXT) as \n    \n    locked_accounts_payable\n    \n , \n    cast(null as TEXT) as \n    \n    locked_accounts_receivable\n    \n , \n    cast(null as TEXT) as \n    \n    locked_all\n    \n , \n    cast(null as TEXT) as \n    \n    locked_payroll\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as float) as \n    \n    parent_id\n    \n , \n    \n    \n    quarter\n    \n as \n    \n    quarter\n    \n, \n    \n    \n    starting\n    \n as \n    \n    starting\n    \n, \n    \n    \n    year_0\n    \n as \n    \n    year_0\n    \n, \n    \n    \n    year_id\n    \n as \n    \n    year_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        accounting_period_id,\n        name,\n        full_name,\n        fiscal_calendar_id,\n        year_id,\n        starting as starting_at,\n        ending as ending_at,\n        quarter,\n        year_0,\n        is_adjustment,\n        closed as is_closed,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounting_periods\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:54.970154Z", "completed_at": "2024-09-16T15:41:55.981131Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:55.981683Z", "completed_at": "2024-09-16T15:41:55.981691Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1231846809387207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__customers", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__customers_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    cast(null as TEXT) as \n    \n    companyname\n    \n , \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    cast(null as TEXT) as \n    \n    customer_extid\n    \n , \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    date_first_order\n    \n as \n    \n    date_first_order\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    zipcode\n    \n as \n    \n    zipcode\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        customer_id,\n        companyname as company_name,\n        customer_extid as customer_external_id,\n        city,\n        state,\n        zipcode,\n        country,\n        date_first_order as date_first_order_at,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your customers_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__customers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:54.899336Z", "completed_at": "2024-09-16T15:41:55.982150Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:55.982607Z", "completed_at": "2024-09-16T15:41:55.982611Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.2007200717926025, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__departments", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__departments_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        department_id,\n        name,\n        full_name,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your departments_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__departments\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:54.894952Z", "completed_at": "2024-09-16T15:41:55.998335Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:55.998799Z", "completed_at": "2024-09-16T15:41:55.998805Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2080042362213135, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__currencies", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__currencies_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    currency_extid\n    \n , \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as TEXT) as \n    \n    is_inactive\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as float) as \n    \n    precision_0\n    \n , \n    \n    \n    symbol\n    \n as \n    \n    symbol\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        currency_id,\n        name,\n        symbol,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__currencies\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:54.882068Z", "completed_at": "2024-09-16T15:41:55.999025Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:55.999834Z", "completed_at": "2024-09-16T15:41:55.999837Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2405130863189697, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__consolidated_exchange_rates", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__consolidated_exchange_rates_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    accounting_book_id\n    \n as \n    \n    accounting_book_id\n    \n, \n    \n    \n    accounting_period_id\n    \n as \n    \n    accounting_period_id\n    \n, \n    cast(null as float) as \n    \n    average_budget_rate\n    \n , \n    \n    \n    average_rate\n    \n as \n    \n    average_rate\n    \n, \n    \n    \n    consolidated_exchange_rate_id\n    \n as \n    \n    consolidated_exchange_rate_id\n    \n, \n    cast(null as float) as \n    \n    current_budget_rate\n    \n , \n    \n    \n    current_rate\n    \n as \n    \n    current_rate\n    \n, \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    \n    \n    from_subsidiary_id\n    \n as \n    \n    from_subsidiary_id\n    \n, \n    cast(null as float) as \n    \n    historical_budget_rate\n    \n , \n    \n    \n    historical_rate\n    \n as \n    \n    historical_rate\n    \n, \n    \n    \n    to_subsidiary_id\n    \n as \n    \n    to_subsidiary_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        consolidated_exchange_rate_id,\n        accounting_book_id,\n        accounting_period_id,\n        average_rate,\n        current_rate,\n        historical_rate,\n        from_subsidiary_id,\n        to_subsidiary_id,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your consolidated_exchange_rates_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__consolidated_exchange_rates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:56.103372Z", "completed_at": "2024-09-16T15:41:57.200288Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:57.213407Z", "completed_at": "2024-09-16T15:41:57.213437Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2047970294952393, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__expense_accounts", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__expense_accounts_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    cast(null as TEXT) as \n    \n    comments\n    \n , \n    cast(null as float) as \n    \n    current_balance\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as TEXT) as \n    \n    desription\n    \n , \n    cast(null as TEXT) as \n    \n    expense_account_extid\n    \n , \n    \n    \n    expense_account_id\n    \n as \n    \n    expense_account_id\n    \n, \n    cast(null as TEXT) as \n    \n    full_name\n    \n , \n    cast(null as TEXT) as \n    \n    is_including_child_subs\n    \n , \n    cast(null as TEXT) as \n    \n    is_summary\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as TEXT) as \n    \n    legal_name\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        expense_account_id,\n        name,\n        parent_id,\n        account_number,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__expense_accounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:56.124201Z", "completed_at": "2024-09-16T15:41:57.213732Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:57.215378Z", "completed_at": "2024-09-16T15:41:57.215383Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1956448554992676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__items", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__items_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    allow_drop_ship\n    \n , \n    cast(null as float) as \n    \n    alt_demand_source_item_id\n    \n , \n    cast(null as float) as \n    \n    asset_account_id\n    \n , \n    cast(null as float) as \n    \n    atp_lead_time\n    \n , \n    cast(null as TEXT) as \n    \n    atp_method\n    \n , \n    cast(null as TEXT) as \n    \n    available_to_partners\n    \n , \n    cast(null as TEXT) as \n    \n    avatax_taxcode\n    \n , \n    cast(null as float) as \n    \n    averagecost\n    \n , \n    cast(null as float) as \n    \n    backward_consumption_days\n    \n , \n    cast(null as TEXT) as \n    \n    build_sub_assemblies\n    \n , \n    cast(null as float) as \n    \n    class_id\n    \n , \n    cast(null as float) as \n    \n    code_of_supply_id\n    \n , \n    cast(null as TEXT) as \n    \n    commodity_code\n    \n , \n    cast(null as float) as \n    \n    consumption_unit_id\n    \n , \n    cast(null as float) as \n    \n    cost_0\n    \n , \n    cast(null as TEXT) as \n    \n    cost_category\n    \n , \n    cast(null as TEXT) as \n    \n    cost_estimate_type\n    \n , \n    cast(null as TEXT) as \n    \n    costing_method\n    \n , \n    cast(null as TEXT) as \n    \n    country_of_manufacture\n    \n , \n    cast(null as TEXT) as \n    \n    create_plan_on_event_type\n    \n , \n    cast(null as timestamp) as \n    \n    created\n    \n , \n    cast(null as float) as \n    \n    current_on_order_count\n    \n , \n    cast(null as float) as \n    \n    custreturn_variance_account_id\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as timestamp) as \n    \n    date_of_last_transaction\n    \n , \n    cast(null as float) as \n    \n    default_return_cost\n    \n , \n    cast(null as float) as \n    \n    deferred_expense_account_id\n    \n , \n    cast(null as float) as \n    \n    deferred_revenue_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    demand_source\n    \n , \n    cast(null as float) as \n    \n    demand_time_fence\n    \n , \n    cast(null as float) as \n    \n    department_id\n    \n , \n    cast(null as TEXT) as \n    \n    deposit\n    \n , \n    cast(null as TEXT) as \n    \n    displayname\n    \n , \n    cast(null as TEXT) as \n    \n    distribution_category\n    \n , \n    cast(null as TEXT) as \n    \n    distribution_network\n    \n , \n    cast(null as float) as \n    \n    dropship_expense_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    effective_bom_control_type\n    \n , \n    cast(null as float) as \n    \n    expense_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    featureddescription\n    \n , \n    cast(null as TEXT) as \n    \n    featureditem\n    \n , \n    cast(null as float) as \n    \n    fixed_lot_size\n    \n , \n    cast(null as float) as \n    \n    forward_consumption_days\n    \n , \n    cast(null as TEXT) as \n    \n    fraud_risk\n    \n , \n    cast(null as TEXT) as \n    \n    full_name\n    \n , \n    cast(null as float) as \n    \n    fx_adjustment_account_id\n    \n , \n    cast(null as float) as \n    \n    gain_loss_account_id\n    \n , \n    cast(null as float) as \n    \n    handling_cost\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat_hazard_class\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat_id\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat_item_units\n    \n , \n    cast(null as float) as \n    \n    hazmat_item_units_qty\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat_packing_group\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat_shipping_name\n    \n , \n    cast(null as TEXT) as \n    \n    include_child_subsidiaries\n    \n , \n    cast(null as float) as \n    \n    income_account_id\n    \n , \n    cast(null as float) as \n    \n    interco_expense_account_id\n    \n , \n    cast(null as float) as \n    \n    interco_income_account_id\n    \n , \n    cast(null as float) as \n    \n    invt_count_classification\n    \n , \n    cast(null as float) as \n    \n    invt_count_interval\n    \n , \n    cast(null as TEXT) as \n    \n    is_cont_rev_handling\n    \n , \n    cast(null as TEXT) as \n    \n    is_enforce_min_qty_internally\n    \n , \n    cast(null as TEXT) as \n    \n    is_hold_rev_rec\n    \n , \n    cast(null as TEXT) as \n    \n    is_moss\n    \n , \n    cast(null as TEXT) as \n    \n    is_phantom\n    \n , \n    cast(null as TEXT) as \n    \n    is_special_order_item\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as TEXT) as \n    \n    isonline\n    \n , \n    cast(null as TEXT) as \n    \n    istaxable\n    \n , \n    cast(null as float) as \n    \n    item_defined_cost\n    \n , \n    cast(null as TEXT) as \n    \n    item_extid\n    \n , \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    cast(null as float) as \n    \n    item_image\n    \n , \n    cast(null as TEXT) as \n    \n    item_revenue_category\n    \n , \n    cast(null as float) as \n    \n    item_term_id\n    \n , \n    cast(null as timestamp) as \n    \n    last_cogs_correction\n    \n , \n    cast(null as timestamp) as \n    \n    last_invt_count_date\n    \n , \n    cast(null as float) as \n    \n    last_purchase_price\n    \n , \n    cast(null as float) as \n    \n    location_id\n    \n , \n    cast(null as TEXT) as \n    \n    lot_numbered_item\n    \n , \n    cast(null as TEXT) as \n    \n    lot_sizing_method\n    \n , \n    cast(null as TEXT) as \n    \n    manufacturer\n    \n , \n    cast(null as TEXT) as \n    \n    manufacturing_charge_item\n    \n , \n    cast(null as TEXT) as \n    \n    match_bill_to_receipt\n    \n , \n    cast(null as TEXT) as \n    \n    matrix_type\n    \n , \n    cast(null as float) as \n    \n    maximum_quantity\n    \n , \n    cast(null as float) as \n    \n    minimum_quantity\n    \n , \n    cast(null as timestamp) as \n    \n    modified\n    \n , \n    cast(null as TEXT) as \n    \n    mpn\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as float) as \n    \n    nature_of_transaction_codes_id\n    \n , \n    cast(null as timestamp) as \n    \n    next_invt_count_date\n    \n , \n    cast(null as float) as \n    \n    ng_asset_type_id\n    \n , \n    cast(null as float) as \n    \n    ns_lead_time\n    \n , \n    cast(null as TEXT) as \n    \n    offersupport\n    \n , \n    cast(null as TEXT) as \n    \n    onspecial\n    \n , \n    cast(null as TEXT) as \n    \n    overhead_type\n    \n , \n    cast(null as float) as \n    \n    parent_id\n    \n , \n    cast(null as float) as \n    \n    payment_method_id\n    \n , \n    cast(null as float) as \n    \n    periodic_lot_size_days\n    \n , \n    cast(null as TEXT) as \n    \n    periodic_lot_size_type\n    \n , \n    cast(null as float) as \n    \n    pref_purchase_tax_id\n    \n , \n    cast(null as float) as \n    \n    pref_sale_tax_id\n    \n , \n    cast(null as float) as \n    \n    pref_stock_level\n    \n , \n    cast(null as TEXT) as \n    \n    prices_include_tax\n    \n , \n    cast(null as float) as \n    \n    pricing_group_id\n    \n , \n    cast(null as TEXT) as \n    \n    print_sub_items\n    \n , \n    cast(null as float) as \n    \n    prod_price_var_account_id\n    \n , \n    cast(null as float) as \n    \n    prod_qty_var_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    prompt_payment_discount_item\n    \n , \n    cast(null as float) as \n    \n    purchase_price_var_account_id\n    \n , \n    cast(null as float) as \n    \n    purchase_unit_id\n    \n , \n    cast(null as TEXT) as \n    \n    purchasedescription\n    \n , \n    cast(null as float) as \n    \n    purchaseorderamount\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantity\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantitydiff\n    \n , \n    cast(null as float) as \n    \n    quantityavailable\n    \n , \n    cast(null as float) as \n    \n    quantitybackordered\n    \n , \n    cast(null as float) as \n    \n    quantityonhand\n    \n , \n    cast(null as float) as \n    \n    receiptamount\n    \n , \n    cast(null as float) as \n    \n    receiptquantity\n    \n , \n    cast(null as float) as \n    \n    receiptquantitydiff\n    \n , \n    cast(null as float) as \n    \n    reorder_multiple\n    \n , \n    cast(null as float) as \n    \n    reorderpoint\n    \n , \n    cast(null as TEXT) as \n    \n    replenishment_method\n    \n , \n    cast(null as TEXT) as \n    \n    resalable\n    \n , \n    cast(null as float) as \n    \n    reschedule_in_days\n    \n , \n    cast(null as float) as \n    \n    reschedule_out_days\n    \n , \n    cast(null as float) as \n    \n    rev_rec_forecast_rule_id\n    \n , \n    cast(null as float) as \n    \n    rev_rec_rule_id\n    \n , \n    cast(null as TEXT) as \n    \n    revenue_allocation_group\n    \n , \n    cast(null as TEXT) as \n    \n    round_up_as_component\n    \n , \n    cast(null as float) as \n    \n    safety_stock_days\n    \n , \n    cast(null as float) as \n    \n    safety_stock_level\n    \n , \n    cast(null as float) as \n    \n    sale_unit_id\n    \n , \n    cast(null as TEXT) as \n    \n    salesdescription\n    \n , \n    cast(null as TEXT) as \n    \n    salesforce_id\n    \n , \n    cast(null as TEXT) as \n    \n    salesprice\n    \n , \n    cast(null as float) as \n    \n    scrap_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    serialized_item\n    \n , \n    cast(null as float) as \n    \n    shippingcost\n    \n , \n    cast(null as TEXT) as \n    \n    special_work_order_item\n    \n , \n    cast(null as TEXT) as \n    \n    specialsdescription\n    \n , \n    cast(null as float) as \n    \n    stock_unit_id\n    \n , \n    cast(null as TEXT) as \n    \n    storedescription\n    \n , \n    cast(null as TEXT) as \n    \n    storedetaileddescription\n    \n , \n    cast(null as TEXT) as \n    \n    storedisplayname\n    \n , \n    cast(null as TEXT) as \n    \n    subtype\n    \n , \n    cast(null as TEXT) as \n    \n    supplementary_unit__abberviat\n    \n , \n    cast(null as float) as \n    \n    supplementary_unit_id\n    \n , \n    cast(null as float) as \n    \n    supply_time_fence\n    \n , \n    cast(null as TEXT) as \n    \n    supply_type\n    \n , \n    cast(null as float) as \n    \n    tax_item_id\n    \n , \n    cast(null as float) as \n    \n    totalvalue\n    \n , \n    cast(null as float) as \n    \n    transferprice\n    \n , \n    \n    \n    type_name\n    \n as \n    \n    type_name\n    \n, \n    cast(null as float) as \n    \n    type_of_goods_id\n    \n , \n    cast(null as TEXT) as \n    \n    udf1\n    \n , \n    cast(null as TEXT) as \n    \n    udf2\n    \n , \n    cast(null as TEXT) as \n    \n    un_number\n    \n , \n    cast(null as float) as \n    \n    unbuild_variance_account_id\n    \n , \n    cast(null as float) as \n    \n    units_type_id\n    \n , \n    cast(null as TEXT) as \n    \n    upc_code\n    \n , \n    cast(null as TEXT) as \n    \n    use_component_yield\n    \n , \n    cast(null as float) as \n    \n    vendor_id\n    \n , \n    cast(null as TEXT) as \n    \n    vendorname\n    \n , \n    cast(null as float) as \n    \n    vendreturn_variance_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    vsoe_deferral\n    \n , \n    cast(null as TEXT) as \n    \n    vsoe_delivered\n    \n , \n    cast(null as TEXT) as \n    \n    vsoe_discount\n    \n , \n    cast(null as float) as \n    \n    vsoe_price\n    \n , \n    cast(null as float) as \n    \n    weight\n    \n , \n    cast(null as float) as \n    \n    weight_in_user_defined_unit\n    \n , \n    cast(null as float) as \n    \n    weight_unit_index\n    \n , \n    cast(null as float) as \n    \n    wip_account_id\n    \n , \n    cast(null as float) as \n    \n    wip_cost_variance_account_id\n    \n , \n    cast(null as float) as \n    \n    work_order_lead_time\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        item_id,\n        name,\n        type_name,\n        salesdescription as sales_description,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your items_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__items\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:56.113397Z", "completed_at": "2024-09-16T15:41:57.214880Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:57.216266Z", "completed_at": "2024-09-16T15:41:57.216269Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.224426031112671, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__income_accounts", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__income_accounts_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    cast(null as TEXT) as \n    \n    comments\n    \n , \n    cast(null as float) as \n    \n    current_balance\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as TEXT) as \n    \n    desription\n    \n , \n    cast(null as TEXT) as \n    \n    full_name\n    \n , \n    cast(null as TEXT) as \n    \n    income_account_extid\n    \n , \n    \n    \n    income_account_id\n    \n as \n    \n    income_account_id\n    \n, \n    cast(null as TEXT) as \n    \n    is_including_child_subs\n    \n , \n    cast(null as TEXT) as \n    \n    is_summary\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as TEXT) as \n    \n    legal_name\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        income_account_id,\n        name, \n        parent_id,\n        account_number,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__income_accounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:56.132458Z", "completed_at": "2024-09-16T15:41:57.214085Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:57.215833Z", "completed_at": "2024-09-16T15:41:57.215836Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1951940059661865, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__locations", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__locations_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        location_id,\n        name,\n        full_name,\n        city,\n        country,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your locations_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__locations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:57.333373Z", "completed_at": "2024-09-16T15:41:58.343347Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.343969Z", "completed_at": "2024-09-16T15:41:58.343978Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1853327751159668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__transactions", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__transactions_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    accounting_period_id\n    \n as \n    \n    accounting_period_id\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    is_advanced_intercompany\n    \n as \n    \n    is_advanced_intercompany\n    \n, \n    \n    \n    is_intercompany\n    \n as \n    \n    is_intercompany\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    cast(null as timestamp) as \n    \n    trandate\n    \n , \n    \n    \n    transaction_id\n    \n as \n    \n    transaction_id\n    \n, \n    \n    \n    transaction_type\n    \n as \n    \n    transaction_type\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        transaction_id,\n        status,\n        trandate as transaction_date,\n        currency_id,\n        accounting_period_id,\n        due_date as due_date_at,\n        transaction_type,\n        is_intercompany,\n        is_advanced_intercompany,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your transactions_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:57.328646Z", "completed_at": "2024-09-16T15:41:58.513925Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.516567Z", "completed_at": "2024-09-16T15:41:58.516574Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.352384090423584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__vendor_types", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__vendor_types_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as float) as \n    \n    parent_id\n    \n , \n    cast(null as TEXT) as \n    \n    vendor_type_extid\n    \n , \n    \n    \n    vendor_type_id\n    \n as \n    \n    vendor_type_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        vendor_type_id,\n        name,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__vendor_types\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:57.309182Z", "completed_at": "2024-09-16T15:41:58.514874Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.517321Z", "completed_at": "2024-09-16T15:41:58.517324Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.3748092651367188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__subsidiaries", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__subsidiaries_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    address\n    \n , \n    cast(null as TEXT) as \n    \n    address1\n    \n , \n    cast(null as TEXT) as \n    \n    address2\n    \n , \n    cast(null as float) as \n    \n    base_currency_id\n    \n , \n    cast(null as TEXT) as \n    \n    branch_id\n    \n , \n    cast(null as TEXT) as \n    \n    brn\n    \n , \n    cast(null as TEXT) as \n    \n    city\n    \n , \n    cast(null as TEXT) as \n    \n    country\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as TEXT) as \n    \n    edition\n    \n , \n    cast(null as TEXT) as \n    \n    federal_number\n    \n , \n    \n    \n    fiscal_calendar_id\n    \n as \n    \n    fiscal_calendar_id\n    \n, \n    cast(null as TEXT) as \n    \n    full_name\n    \n , \n    cast(null as TEXT) as \n    \n    is_elimination\n    \n , \n    cast(null as TEXT) as \n    \n    is_moss\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive_bool\n    \n , \n    cast(null as TEXT) as \n    \n    legal_name\n    \n , \n    cast(null as float) as \n    \n    moss_nexus_id\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    cast(null as float) as \n    \n    purchaseorderamount\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantity\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantitydiff\n    \n , \n    cast(null as float) as \n    \n    receiptamount\n    \n , \n    cast(null as float) as \n    \n    receiptquantity\n    \n , \n    cast(null as float) as \n    \n    receiptquantitydiff\n    \n , \n    cast(null as TEXT) as \n    \n    return_address\n    \n , \n    cast(null as TEXT) as \n    \n    return_address1\n    \n , \n    cast(null as TEXT) as \n    \n    return_address2\n    \n , \n    cast(null as TEXT) as \n    \n    return_city\n    \n , \n    cast(null as TEXT) as \n    \n    return_country\n    \n , \n    cast(null as TEXT) as \n    \n    return_state\n    \n , \n    cast(null as TEXT) as \n    \n    return_zipcode\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address1\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address2\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_city\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_country\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_state\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_zipcode\n    \n , \n    cast(null as TEXT) as \n    \n    state\n    \n , \n    cast(null as TEXT) as \n    \n    state_tax_number\n    \n , \n    cast(null as float) as \n    \n    subnav__searchable_subsidiary\n    \n , \n    cast(null as TEXT) as \n    \n    subsidiary_extid\n    \n , \n    \n    \n    subsidiary_id\n    \n as \n    \n    subsidiary_id\n    \n, \n    cast(null as float) as \n    \n    taxonomy_reference_id\n    \n , \n    cast(null as TEXT) as \n    \n    tran_num_prefix\n    \n , \n    cast(null as TEXT) as \n    \n    uen\n    \n , \n    cast(null as TEXT) as \n    \n    url\n    \n , \n    cast(null as TEXT) as \n    \n    zipcode\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        subsidiary_id,\n        fiscal_calendar_id,\n        full_name,\n        name,\n        parent_id,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your subsidiaries_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__subsidiaries\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:57.318643Z", "completed_at": "2024-09-16T15:41:58.514503Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.517060Z", "completed_at": "2024-09-16T15:41:58.517064Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.4344251155853271, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__transaction_lines", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__transaction_lines_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    company_id\n    \n as \n    \n    company_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    memo\n    \n as \n    \n    memo\n    \n, \n    \n    \n    non_posting_line\n    \n as \n    \n    non_posting_line\n    \n, \n    \n    \n    subsidiary_id\n    \n as \n    \n    subsidiary_id\n    \n, \n    \n    \n    transaction_id\n    \n as \n    \n    transaction_id\n    \n, \n    \n    \n    transaction_line_id\n    \n as \n    \n    transaction_line_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        transaction_id,\n        transaction_line_id,\n        subsidiary_id,\n        account_id,\n        company_id,\n        item_id,\n        amount,\n        non_posting_line,\n        class_id,\n        location_id,\n        department_id,\n        memo\n\n        --The below macro adds the fields defined within your transaction_lines_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__transaction_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.682866Z", "completed_at": "2024-09-16T15:41:58.770373Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.780719Z", "completed_at": "2024-09-16T15:41:58.780731Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10016798973083496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounting_books_accounting_book_id.1b7504d30e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect accounting_book_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_books\"\nwhere accounting_book_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.776926Z", "completed_at": "2024-09-16T15:41:58.783843Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.789267Z", "completed_at": "2024-09-16T15:41:58.789281Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021594762802124023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.76e6e71411", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect _fivetran_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_book_subsidiaries\"\nwhere _fivetran_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.770772Z", "completed_at": "2024-09-16T15:41:58.784227Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.789730Z", "completed_at": "2024-09-16T15:41:58.789735Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.024087905883789062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounting_books_accounting_book_id.70d96d1230", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    accounting_book_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_books\"\nwhere accounting_book_id is not null\ngroup by accounting_book_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.785465Z", "completed_at": "2024-09-16T15:41:58.792451Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.795625Z", "completed_at": "2024-09-16T15:41:58.795632Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014621973037719727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.27ddb08396", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    _fivetran_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_book_subsidiaries\"\nwhere _fivetran_id is not null\ngroup by _fivetran_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.802492Z", "completed_at": "2024-09-16T15:41:58.809863Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.811098Z", "completed_at": "2024-09-16T15:41:58.811105Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016956090927124023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.d2038de348", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    _fivetran_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_period_fiscal_cal\"\nwhere _fivetran_id is not null\ngroup by _fivetran_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.797622Z", "completed_at": "2024-09-16T15:41:58.810213Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.811361Z", "completed_at": "2024-09-16T15:41:58.811365Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018000125885009766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.ec8750b679", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect _fivetran_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_period_fiscal_cal\"\nwhere _fivetran_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.806789Z", "completed_at": "2024-09-16T15:41:58.811599Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.813991Z", "completed_at": "2024-09-16T15:41:58.813996Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00916290283203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__account_types_account_type_id.20889967ef", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_type_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__account_types\"\nwhere account_type_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.816128Z", "completed_at": "2024-09-16T15:41:58.829735Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.831527Z", "completed_at": "2024-09-16T15:41:58.831531Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01849532127380371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__account_types_account_type_id.aaea9bec0f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_type_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__account_types\"\nwhere account_type_id is not null\ngroup by account_type_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.823962Z", "completed_at": "2024-09-16T15:41:58.831780Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.834212Z", "completed_at": "2024-09-16T15:41:58.834218Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012667179107666016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounting_periods_accounting_period_id.f2db2c547c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect accounting_period_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_periods\"\nwhere accounting_period_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.835712Z", "completed_at": "2024-09-16T15:41:58.843276Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.847568Z", "completed_at": "2024-09-16T15:41:58.847577Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015047788619995117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounting_periods_accounting_period_id.a9d8f4c6e1", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    accounting_period_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_periods\"\nwhere accounting_period_id is not null\ngroup by accounting_period_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.839720Z", "completed_at": "2024-09-16T15:41:58.847226Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.848819Z", "completed_at": "2024-09-16T15:41:58.848826Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015106916427612305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__classes_class_id.799b01ffba", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect class_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__classes\"\nwhere class_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.844232Z", "completed_at": "2024-09-16T15:41:58.849097Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.851206Z", "completed_at": "2024-09-16T15:41:58.851212Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009603023529052734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__classes_class_id.d069e30c98", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    class_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__classes\"\nwhere class_id is not null\ngroup by class_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.852775Z", "completed_at": "2024-09-16T15:41:58.861493Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.866306Z", "completed_at": "2024-09-16T15:41:58.866314Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016836166381835938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.09703507c6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect consolidated_exchange_rate_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__consolidated_exchange_rates\"\nwhere consolidated_exchange_rate_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.856543Z", "completed_at": "2024-09-16T15:41:58.865820Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.867672Z", "completed_at": "2024-09-16T15:41:58.867677Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016916990280151367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.2d4725bb7a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    consolidated_exchange_rate_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__consolidated_exchange_rates\"\nwhere consolidated_exchange_rate_id is not null\ngroup by consolidated_exchange_rate_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.871572Z", "completed_at": "2024-09-16T15:41:58.880326Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.881023Z", "completed_at": "2024-09-16T15:41:58.881030Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012079954147338867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounts_account_id.5a542e47a2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounts\"\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.874925Z", "completed_at": "2024-09-16T15:41:58.882216Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.883700Z", "completed_at": "2024-09-16T15:41:58.883704Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017657041549682617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounts_account_id.23a63b3e17", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounts\"\nwhere account_id is not null\ngroup by account_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.877363Z", "completed_at": "2024-09-16T15:41:58.882447Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.883946Z", "completed_at": "2024-09-16T15:41:58.883949Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0178070068359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__customers_customer_id.65a5ae302a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__customers\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.884228Z", "completed_at": "2024-09-16T15:41:58.891467Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.895531Z", "completed_at": "2024-09-16T15:41:58.895793Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023534774780273438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__employees_employee_id.acce687f22", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect employee_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__employees\"\nwhere employee_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.897112Z", "completed_at": "2024-09-16T15:41:58.908214Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.915747Z", "completed_at": "2024-09-16T15:41:58.915756Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.024753808975219727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__customers_customer_id.05ca0360f2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.901395Z", "completed_at": "2024-09-16T15:41:58.910009Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.916290Z", "completed_at": "2024-09-16T15:41:58.916295Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02390599250793457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__employees_employee_id.3c6cf9e444", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    employee_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__employees\"\nwhere employee_id is not null\ngroup by employee_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.910698Z", "completed_at": "2024-09-16T15:41:58.917972Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.920199Z", "completed_at": "2024-09-16T15:41:58.920206Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013582944869995117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__currencies_currency_id.7eff9f9c1c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__currencies\"\nwhere currency_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.921763Z", "completed_at": "2024-09-16T15:41:58.931000Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.936162Z", "completed_at": "2024-09-16T15:41:58.936171Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01788496971130371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__currencies_currency_id.50d9c37c78", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    currency_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__currencies\"\nwhere currency_id is not null\ngroup by currency_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.925607Z", "completed_at": "2024-09-16T15:41:58.931336Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.936542Z", "completed_at": "2024-09-16T15:41:58.936546Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01815176010131836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__departments_department_id.7395bbfe71", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect department_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__departments\"\nwhere department_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.931627Z", "completed_at": "2024-09-16T15:41:58.937494Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.939691Z", "completed_at": "2024-09-16T15:41:58.939710Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010627031326293945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__departments_department_id.13e4897f0b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    department_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__departments\"\nwhere department_id is not null\ngroup by department_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.946170Z", "completed_at": "2024-09-16T15:41:58.954377Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.956404Z", "completed_at": "2024-09-16T15:41:58.956413Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017503976821899414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__entities_entity_id.f22c18cfa2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect entity_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__entities\"\nwhere entity_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.951487Z", "completed_at": "2024-09-16T15:41:58.956070Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.962023Z", "completed_at": "2024-09-16T15:41:58.962038Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013678789138793945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__entities_entity_id.f9acd04f50", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    entity_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__entities\"\nwhere entity_id is not null\ngroup by entity_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.958035Z", "completed_at": "2024-09-16T15:41:58.964518Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.968932Z", "completed_at": "2024-09-16T15:41:58.968942Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016698122024536133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__jobs_job_id.d7b5b06b33", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect job_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__jobs\"\nwhere job_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.965184Z", "completed_at": "2024-09-16T15:41:58.972818Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.974521Z", "completed_at": "2024-09-16T15:41:58.974527Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012187719345092773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__jobs_job_id.c294ea849c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    job_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__jobs\"\nwhere job_id is not null\ngroup by job_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.969277Z", "completed_at": "2024-09-16T15:41:58.974225Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.979021Z", "completed_at": "2024-09-16T15:41:58.979028Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015270233154296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__items_item_id.e216b5b06a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__items\"\nwhere item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.976021Z", "completed_at": "2024-09-16T15:41:58.980916Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.985902Z", "completed_at": "2024-09-16T15:41:58.985908Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01303410530090332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__items_item_id.3fcafd9eee", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    item_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__items\"\nwhere item_id is not null\ngroup by item_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.982412Z", "completed_at": "2024-09-16T15:41:58.990409Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.992283Z", "completed_at": "2024-09-16T15:41:58.992290Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01715683937072754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__locations_location_id.c335a5985e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__locations\"\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.987210Z", "completed_at": "2024-09-16T15:41:58.991447Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:58.998154Z", "completed_at": "2024-09-16T15:41:58.998159Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017007827758789062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__locations_location_id.f1469a5149", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    location_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__locations\"\nwhere location_id is not null\ngroup by location_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.001696Z", "completed_at": "2024-09-16T15:41:59.009756Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.017226Z", "completed_at": "2024-09-16T15:41:59.017233Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01886725425720215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__subsidiaries_subsidiary_id.0ab6516626", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subsidiary_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__subsidiaries\"\nwhere subsidiary_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.006034Z", "completed_at": "2024-09-16T15:41:59.016915Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.018823Z", "completed_at": "2024-09-16T15:41:59.018828Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018527984619140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__subsidiaries_subsidiary_id.8edc974229", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    subsidiary_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__subsidiaries\"\nwhere subsidiary_id is not null\ngroup by subsidiary_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.010145Z", "completed_at": "2024-09-16T15:41:59.018542Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.020640Z", "completed_at": "2024-09-16T15:41:59.020646Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01628899574279785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_accounting_lines_transaction_id__transaction_line_id__accounting_book_id.ac47a8ecc1", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, transaction_line_id, accounting_book_id\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transaction_accounting_lines\"\n    group by transaction_id, transaction_line_id, accounting_book_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.022808Z", "completed_at": "2024-09-16T15:41:59.032409Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.038049Z", "completed_at": "2024-09-16T15:41:59.038057Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018911123275756836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_id.f28afbfa25", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transaction_accounting_lines\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.028741Z", "completed_at": "2024-09-16T15:41:59.037650Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.039504Z", "completed_at": "2024-09-16T15:41:59.039508Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018414020538330078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_line_id.0f72869807", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transaction_accounting_lines\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.043607Z", "completed_at": "2024-09-16T15:41:59.053674Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.055210Z", "completed_at": "2024-09-16T15:41:59.055221Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014883041381835938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_lines_transaction_id__transaction_line_id.07b823514f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, transaction_line_id\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transaction_lines\"\n    group by transaction_id, transaction_line_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.047007Z", "completed_at": "2024-09-16T15:41:59.054055Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.055693Z", "completed_at": "2024-09-16T15:41:59.055695Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01475214958190918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_id.267b150890", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transaction_lines\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.049725Z", "completed_at": "2024-09-16T15:41:59.054588Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.056521Z", "completed_at": "2024-09-16T15:41:59.056524Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01481008529663086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_line_id.a82e70adc1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transaction_lines\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.060385Z", "completed_at": "2024-09-16T15:41:59.069959Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.070722Z", "completed_at": "2024-09-16T15:41:59.070730Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013096809387207031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__vendors_vendor_id.777b758daf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__vendors\"\nwhere vendor_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.063717Z", "completed_at": "2024-09-16T15:41:59.071006Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.072726Z", "completed_at": "2024-09-16T15:41:59.072731Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014539957046508789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__vendors_vendor_id.415829ac1d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    vendor_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__vendors\"\nwhere vendor_id is not null\ngroup by vendor_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.066920Z", "completed_at": "2024-09-16T15:41:59.072120Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.074128Z", "completed_at": "2024-09-16T15:41:59.074132Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015187978744506836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__vendor_categories_vendor_category_id.60acd9acb2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_category_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__vendor_categories\"\nwhere vendor_category_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.075460Z", "completed_at": "2024-09-16T15:41:59.082918Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.088167Z", "completed_at": "2024-09-16T15:41:59.088179Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015902996063232422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__vendor_categories_vendor_category_id.874da088c6", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    vendor_category_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__vendor_categories\"\nwhere vendor_category_id is not null\ngroup by vendor_category_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.080134Z", "completed_at": "2024-09-16T15:41:59.088528Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.090273Z", "completed_at": "2024-09-16T15:41:59.090278Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01329803466796875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transactions_transaction_id.b4f6c6a72b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transactions\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.083949Z", "completed_at": "2024-09-16T15:41:59.089985Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.092359Z", "completed_at": "2024-09-16T15:41:59.092363Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016137361526489258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__transactions_transaction_id.af3d15dce4", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transactions\"\nwhere transaction_id is not null\ngroup by transaction_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.092868Z", "completed_at": "2024-09-16T15:41:59.100724Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.104573Z", "completed_at": "2024-09-16T15:41:59.104580Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01499319076538086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__classes_class_id.462bfda765", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect class_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__classes\"\nwhere class_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.097738Z", "completed_at": "2024-09-16T15:41:59.104974Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.106726Z", "completed_at": "2024-09-16T15:41:59.106730Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011719942092895508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__classes_class_id.c63c54840b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    class_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__classes\"\nwhere class_id is not null\ngroup by class_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.101580Z", "completed_at": "2024-09-16T15:41:59.106124Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.108225Z", "completed_at": "2024-09-16T15:41:59.108232Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011986017227172852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__accounting_books_accounting_book_id.12972ee6fc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect accounting_book_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounting_books\"\nwhere accounting_book_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.109624Z", "completed_at": "2024-09-16T15:41:59.117797Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.121421Z", "completed_at": "2024-09-16T15:41:59.121428Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014886140823364258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__accounting_books_accounting_book_id.22e0106417", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    accounting_book_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounting_books\"\nwhere accounting_book_id is not null\ngroup by accounting_book_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.114107Z", "completed_at": "2024-09-16T15:41:59.121673Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.123359Z", "completed_at": "2024-09-16T15:41:59.123363Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011751890182495117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__accounts_account_id.f03cddbace", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounts\"\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.118664Z", "completed_at": "2024-09-16T15:41:59.123053Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.124801Z", "completed_at": "2024-09-16T15:41:59.124804Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015500068664550781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__accounts_account_id.e94563d281", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounts\"\nwhere account_id is not null\ngroup by account_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.125440Z", "completed_at": "2024-09-16T15:41:59.131211Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.137572Z", "completed_at": "2024-09-16T15:41:59.137581Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014601945877075195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__accounting_periods_accounting_period_id__fiscal_calendar_id.43005ecb69", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        accounting_period_id, fiscal_calendar_id\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounting_periods\"\n    group by accounting_period_id, fiscal_calendar_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.131492Z", "completed_at": "2024-09-16T15:41:59.138548Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.140459Z", "completed_at": "2024-09-16T15:41:59.140463Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01164865493774414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__accounting_periods_accounting_period_id.5c1c46821c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect accounting_period_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounting_periods\"\nwhere accounting_period_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.134887Z", "completed_at": "2024-09-16T15:41:59.139228Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.140938Z", "completed_at": "2024-09-16T15:41:59.140941Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014761924743652344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__accounting_periods_fiscal_calendar_id.8d75190563", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fiscal_calendar_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounting_periods\"\nwhere fiscal_calendar_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.141756Z", "completed_at": "2024-09-16T15:41:59.147571Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.154224Z", "completed_at": "2024-09-16T15:41:59.154231Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015047073364257812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__customers_customer_id.bbb9eed2dc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__customers\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.151445Z", "completed_at": "2024-09-16T15:41:59.156101Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.159921Z", "completed_at": "2024-09-16T15:41:59.159926Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013625144958496094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__departments_department_id.6d96b00002", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect department_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__departments\"\nwhere department_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.148444Z", "completed_at": "2024-09-16T15:41:59.156398Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.160224Z", "completed_at": "2024-09-16T15:41:59.160231Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014658927917480469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__customers_customer_id.7c9debe8d9", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.157274Z", "completed_at": "2024-09-16T15:41:59.161880Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.163708Z", "completed_at": "2024-09-16T15:41:59.163713Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011701822280883789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__departments_department_id.2df16a9aa1", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    department_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__departments\"\nwhere department_id is not null\ngroup by department_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.164166Z", "completed_at": "2024-09-16T15:41:59.172079Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.173501Z", "completed_at": "2024-09-16T15:41:59.173506Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014689922332763672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__currencies_currency_id.e8b331ffb3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__currencies\"\nwhere currency_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.167633Z", "completed_at": "2024-09-16T15:41:59.173055Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.177472Z", "completed_at": "2024-09-16T15:41:59.177477Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01524806022644043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__currencies_currency_id.09ab867f2c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    currency_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__currencies\"\nwhere currency_id is not null\ngroup by currency_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.173917Z", "completed_at": "2024-09-16T15:41:59.178935Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.183261Z", "completed_at": "2024-09-16T15:41:59.183270Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011792898178100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.83de8c8e97", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect consolidated_exchange_rate_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__consolidated_exchange_rates\"\nwhere consolidated_exchange_rate_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.180451Z", "completed_at": "2024-09-16T15:41:59.187742Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.188912Z", "completed_at": "2024-09-16T15:41:59.188917Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013813018798828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.2ca94ecb54", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    consolidated_exchange_rate_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__consolidated_exchange_rates\"\nwhere consolidated_exchange_rate_id is not null\ngroup by consolidated_exchange_rate_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.184510Z", "completed_at": "2024-09-16T15:41:59.189146Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.193407Z", "completed_at": "2024-09-16T15:41:59.193413Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014384031295776367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__expense_accounts_expense_account_id.4de138ed23", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect expense_account_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__expense_accounts\"\nwhere expense_account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.189377Z", "completed_at": "2024-09-16T15:41:59.194026Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.199186Z", "completed_at": "2024-09-16T15:41:59.199195Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01236104965209961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__expense_accounts_expense_account_id.5e813830ff", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    expense_account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__expense_accounts\"\nwhere expense_account_id is not null\ngroup by expense_account_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.195576Z", "completed_at": "2024-09-16T15:41:59.201374Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.205321Z", "completed_at": "2024-09-16T15:41:59.205329Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015145063400268555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__items_item_id.ba322d7da3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__items\"\nwhere item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.201623Z", "completed_at": "2024-09-16T15:41:59.208339Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.210130Z", "completed_at": "2024-09-16T15:41:59.210136Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01178121566772461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__items_item_id.760a674654", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    item_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__items\"\nwhere item_id is not null\ngroup by item_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.205657Z", "completed_at": "2024-09-16T15:41:59.209880Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.211838Z", "completed_at": "2024-09-16T15:41:59.211842Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011052131652832031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__income_accounts_income_account_id.a38311d5f9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect income_account_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__income_accounts\"\nwhere income_account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.212350Z", "completed_at": "2024-09-16T15:41:59.217304Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.224939Z", "completed_at": "2024-09-16T15:41:59.224964Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015511035919189453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__income_accounts_income_account_id.28b4166a07", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    income_account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__income_accounts\"\nwhere income_account_id is not null\ngroup by income_account_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.217601Z", "completed_at": "2024-09-16T15:41:59.225321Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.227419Z", "completed_at": "2024-09-16T15:41:59.227424Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012838125228881836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__locations_location_id.9f68ecaa6b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__locations\"\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.221102Z", "completed_at": "2024-09-16T15:41:59.226313Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.228184Z", "completed_at": "2024-09-16T15:41:59.228189Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012458086013793945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__locations_location_id.3857e2cac2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    location_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__locations\"\nwhere location_id is not null\ngroup by location_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.229902Z", "completed_at": "2024-09-16T15:41:59.234654Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.240512Z", "completed_at": "2024-09-16T15:41:59.240520Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01328587532043457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__transactions_transaction_id.9439fe1532", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__transactions\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.237615Z", "completed_at": "2024-09-16T15:41:59.241791Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.243508Z", "completed_at": "2024-09-16T15:41:59.243513Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013159751892089844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__vendor_types_vendor_type_id.faed6fe0e9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_type_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__vendor_types\"\nwhere vendor_type_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.234900Z", "completed_at": "2024-09-16T15:41:59.242056Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.243761Z", "completed_at": "2024-09-16T15:41:59.243765Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014185905456542969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__transactions_transaction_id.fd6bd3af79", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__transactions\"\nwhere transaction_id is not null\ngroup by transaction_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.244000Z", "completed_at": "2024-09-16T15:41:59.248584Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.254648Z", "completed_at": "2024-09-16T15:41:59.254654Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017361164093017578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__vendor_types_vendor_type_id.6ba4f59b69", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    vendor_type_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__vendor_types\"\nwhere vendor_type_id is not null\ngroup by vendor_type_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.262621Z", "completed_at": "2024-09-16T15:41:59.269306Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.273186Z", "completed_at": "2024-09-16T15:41:59.273191Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013224363327026367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__subsidiaries_subsidiary_id.9aa9c2d015", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subsidiary_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__subsidiaries\"\nwhere subsidiary_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.266697Z", "completed_at": "2024-09-16T15:41:59.273419Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.274999Z", "completed_at": "2024-09-16T15:41:59.275013Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010811805725097656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__subsidiaries_subsidiary_id.7d0dfe64f0", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    subsidiary_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__subsidiaries\"\nwhere subsidiary_id is not null\ngroup by subsidiary_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.277249Z", "completed_at": "2024-09-16T15:41:59.285050Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.288430Z", "completed_at": "2024-09-16T15:41:59.288435Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01385807991027832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__transaction_lines_transaction_id__transaction_line_id.651bc3120d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, transaction_line_id\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__transaction_lines\"\n    group by transaction_id, transaction_line_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.282374Z", "completed_at": "2024-09-16T15:41:59.288686Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.290318Z", "completed_at": "2024-09-16T15:41:59.290322Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010234832763671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_id.e8055d67bc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__transaction_lines\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.285373Z", "completed_at": "2024-09-16T15:41:59.289656Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.291753Z", "completed_at": "2024-09-16T15:41:59.291757Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011216878890991211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_line_id.420bd8637c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__transaction_lines\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.366199Z", "completed_at": "2024-09-16T15:41:59.408541Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.409589Z", "completed_at": "2024-09-16T15:41:59.409596Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07219409942626953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.netsuite__income_statement", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_netsuite__transaction_lines_w_accounting_period as (\n\n\nwith transactions as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__transactions\"\n), \n\ntransaction_lines as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__transaction_lines\"\n),\n\ntransaction_lines_w_accounting_period as ( -- transaction line totals, by accounts, accounting period and subsidiary\n  select\n    transaction_lines.transaction_id,\n    transaction_lines.transaction_line_id,\n    transaction_lines.subsidiary_id,\n    transaction_lines.account_id,\n    transactions.accounting_period_id as transaction_accounting_period_id,\n    coalesce(transaction_lines.amount, 0) as unconverted_amount\n  from transaction_lines\n\n  join transactions on transactions.transaction_id = transaction_lines.transaction_id\n\n  where lower(transactions.transaction_type) != 'revenue arrangement'\n    and lower(non_posting_line) != 'yes'\n)\n\nselect * \nfrom transaction_lines_w_accounting_period\n),  __dbt__cte__int_netsuite__accountxperiod_exchange_rate_map as (\n\n\nwith accounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounts\"\n), \n\naccounting_books as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounting_books\"\n), \n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__subsidiaries\"\n),\n\nconsolidated_exchange_rates as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__consolidated_exchange_rates\"\n),\n\nperiod_exchange_rate_map as ( -- exchange rates used, by accounting period, to convert to parent subsidiary\n  select\n    consolidated_exchange_rates.accounting_period_id,\n    consolidated_exchange_rates.average_rate,\n    consolidated_exchange_rates.current_rate,\n    consolidated_exchange_rates.historical_rate,\n    consolidated_exchange_rates.from_subsidiary_id,\n    consolidated_exchange_rates.to_subsidiary_id\n  from consolidated_exchange_rates\n\n  where consolidated_exchange_rates.to_subsidiary_id in (select subsidiary_id from subsidiaries where parent_id is null)  -- constrait - only the primary subsidiary has no parent\n    and consolidated_exchange_rates.accounting_book_id in (select accounting_book_id from accounting_books where lower(is_primary) = 'yes')\n), \n\naccountxperiod_exchange_rate_map as ( -- account table with exchange rate details by accounting period\n  select\n    period_exchange_rate_map.accounting_period_id,\n    period_exchange_rate_map.from_subsidiary_id,\n    period_exchange_rate_map.to_subsidiary_id,\n    accounts.account_id,\n    case \n      when lower(accounts.general_rate_type) = 'historical' then period_exchange_rate_map.historical_rate\n      when lower(accounts.general_rate_type) = 'current' then period_exchange_rate_map.current_rate\n      when lower(accounts.general_rate_type) = 'average' then period_exchange_rate_map.average_rate\n      else null\n        end as exchange_rate\n  from accounts\n  \n  cross join period_exchange_rate_map\n)\n\nselect * \nfrom accountxperiod_exchange_rate_map\n),  __dbt__cte__int_netsuite__transaction_and_reporting_periods as (\n\n\nwith accounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounting_periods\"\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__subsidiaries\"\n),\n\ntransaction_and_reporting_periods as ( \n  select\n    base.accounting_period_id as accounting_period_id,\n    multiplier.accounting_period_id as reporting_accounting_period_id\n  from accounting_periods as base\n\n  join accounting_periods as multiplier\n    on multiplier.starting_at >= base.starting_at\n      and multiplier.quarter = base.quarter\n      and multiplier.year_0 = base.year_0\n      and multiplier.fiscal_calendar_id = base.fiscal_calendar_id\n      and cast(multiplier.starting_at as timestamp) <= now() \n\n  where lower(base.quarter) = 'no'\n    and lower(base.year_0) = 'no'\n    and base.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null) -- fiscal calendar will align with parent subsidiary's default calendar\n)\n\nselect * \nfrom transaction_and_reporting_periods\n),  __dbt__cte__int_netsuite__transactions_with_converted_amounts as (\n\n\nwith transaction_lines_w_accounting_period as (\n    select * \n    from __dbt__cte__int_netsuite__transaction_lines_w_accounting_period\n), \n\naccountxperiod_exchange_rate_map as (\n    select * \n    from __dbt__cte__int_netsuite__accountxperiod_exchange_rate_map\n), \n\ntransaction_and_reporting_periods as (\n    select * \n    from __dbt__cte__int_netsuite__transaction_and_reporting_periods\n), \n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounts\"\n),\n\ntransactions_in_every_calculation_period_w_exchange_rates as (\n  select\n    transaction_lines_w_accounting_period.*,\n    reporting_accounting_period_id,\n    exchange_reporting_period.exchange_rate as exchange_rate_reporting_period,\n    exchange_transaction_period.exchange_rate as exchange_rate_transaction_period\n  from transaction_lines_w_accounting_period\n\n  join transaction_and_reporting_periods \n    on transaction_and_reporting_periods.accounting_period_id = transaction_lines_w_accounting_period.transaction_accounting_period_id \n\n  join accountxperiod_exchange_rate_map as exchange_reporting_period\n    on exchange_reporting_period.accounting_period_id = transaction_and_reporting_periods.reporting_accounting_period_id\n      and exchange_reporting_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_reporting_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n      \n  join accountxperiod_exchange_rate_map as exchange_transaction_period\n    on exchange_transaction_period.accounting_period_id = transaction_and_reporting_periods.accounting_period_id\n      and exchange_transaction_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_transaction_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n), \n\ntransactions_with_converted_amounts as (\n  select\n    transactions_in_every_calculation_period_w_exchange_rates.*,\n    unconverted_amount * exchange_rate_transaction_period as converted_amount_using_transaction_accounting_period,\n    unconverted_amount * exchange_rate_reporting_period as converted_amount_using_reporting_month,\n    case\n      when lower(accounts.type_name) in ('income','other income','expense','other expense','other income','cost of goods sold') then true\n      else false \n        end as is_income_statement,\n    case\n      when lower(accounts.type_name) in ('accounts receivable', 'bank', 'deferred expense', 'fixed asset', 'other asset', 'other current asset', 'unbilled receivable', 'prepaid expense') then 'Asset'\n      when lower(accounts.type_name) in ('cost of goods sold', 'expense', 'other expense') then 'Expense'\n      when lower(accounts.type_name) in ('income', 'other income') then 'Income'\n      when lower(accounts.type_name) in ('accounts payable', 'credit card', 'deferred revenue', 'long term liability', 'other current liability') then 'Liability'\n      when lower(accounts.type_name) in ('equity', 'retained earnings', 'net income') then 'Equity'\n      when lower(accounts.type_name) in ('non posting', 'statistical') then 'Other'\n      else null \n        end as account_category\n  from transactions_in_every_calculation_period_w_exchange_rates\n\n  left join accounts \n    on accounts.account_id = transactions_in_every_calculation_period_w_exchange_rates.account_id \n)\n\nselect * \nfrom transactions_with_converted_amounts\n), transactions_with_converted_amounts as (\n    select * \n    from __dbt__cte__int_netsuite__transactions_with_converted_amounts\n), \n\n--Below is only used if income statement transaction detail columns are specified dbt_project.yml file.\n\n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounts\"\n), \n\naccounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounting_periods\"\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__subsidiaries\"\n),\n\ntransaction_lines as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__transaction_lines\"\n),\n\nclasses as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__classes\"\n),\n\nlocations as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__locations\"\n),\n\ndepartments as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__departments\"\n),\n\nincome_statement as (\n    select\n        transactions_with_converted_amounts.transaction_id,\n        transactions_with_converted_amounts.transaction_line_id,\n        reporting_accounting_periods.accounting_period_id as accounting_period_id,\n        reporting_accounting_periods.ending_at as accounting_period_ending,\n        reporting_accounting_periods.full_name as accounting_period_full_name,\n        reporting_accounting_periods.name as accounting_period_name,\n        lower(reporting_accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n        lower(reporting_accounting_periods.is_closed) = 'yes' as is_accounting_period_closed,\n        accounts.name as account_name,\n        accounts.type_name as account_type_name,\n        accounts.account_id as account_id,\n        accounts.account_number,\n        subsidiaries.subsidiary_id,\n        subsidiaries.full_name as subsidiary_full_name,\n        subsidiaries.name as subsidiary_name\n\n        --The below script allows for accounts table pass through columns.\n        \n\n\n\n,\n\n        accounts.account_number || '-' || accounts.name as account_number_and_name,\n        classes.full_name as class_full_name\n\n        --The below script allows for classes table pass through columns.\n        \n\n\n\n,\n\n        locations.full_name as location_full_name,\n        departments.full_name as department_full_name\n\n        --The below script allows for departments table pass through columns.\n        \n\n\n\n,\n\n        -converted_amount_using_transaction_accounting_period as converted_amount,\n        transactions_with_converted_amounts.account_category as account_category,\n        case when lower(accounts.type_name) = 'income' then 1\n            when lower(accounts.type_name) = 'cost of goods sold' then 2\n            when lower(accounts.type_name) = 'expense' then 3\n            when lower(accounts.type_name) = 'other income' then 4\n            when lower(accounts.type_name) = 'other expense' then 5\n            else null\n            end as income_statement_sort_helper\n\n        --Below is only used if income statement transaction detail columns are specified dbt_project.yml file.\n        \n    \n        \n    from transactions_with_converted_amounts\n\n    join transaction_lines as transaction_lines\n        on transaction_lines.transaction_line_id = transactions_with_converted_amounts.transaction_line_id\n            and transaction_lines.transaction_id = transactions_with_converted_amounts.transaction_id\n\n    left join classes \n        on classes.class_id = transaction_lines.class_id\n\n    left join locations\n        on locations.location_id = transaction_lines.location_id\n\n    left join departments \n        on departments.department_id = transaction_lines.department_id\n    join accounts on accounts.account_id = transactions_with_converted_amounts.account_id\n\n    join accounting_periods as reporting_accounting_periods \n        on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n    \n    join subsidiaries\n        on transactions_with_converted_amounts.subsidiary_id = subsidiaries.subsidiary_id\n\n    --Below is only used if income statement transaction detail columns are specified dbt_project.yml file.\n    \n\n    where reporting_accounting_periods.fiscal_calendar_id  = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n        and transactions_with_converted_amounts.transaction_accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n        and transactions_with_converted_amounts.is_income_statement\n)\n\nselect *\nfrom income_statement", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite__income_statement\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.353562Z", "completed_at": "2024-09-16T15:41:59.408846Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.409839Z", "completed_at": "2024-09-16T15:41:59.409843Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.07300901412963867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.netsuite__balance_sheet", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_netsuite__transaction_lines_w_accounting_period as (\n\n\nwith transactions as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__transactions\"\n), \n\ntransaction_lines as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__transaction_lines\"\n),\n\ntransaction_lines_w_accounting_period as ( -- transaction line totals, by accounts, accounting period and subsidiary\n  select\n    transaction_lines.transaction_id,\n    transaction_lines.transaction_line_id,\n    transaction_lines.subsidiary_id,\n    transaction_lines.account_id,\n    transactions.accounting_period_id as transaction_accounting_period_id,\n    coalesce(transaction_lines.amount, 0) as unconverted_amount\n  from transaction_lines\n\n  join transactions on transactions.transaction_id = transaction_lines.transaction_id\n\n  where lower(transactions.transaction_type) != 'revenue arrangement'\n    and lower(non_posting_line) != 'yes'\n)\n\nselect * \nfrom transaction_lines_w_accounting_period\n),  __dbt__cte__int_netsuite__accountxperiod_exchange_rate_map as (\n\n\nwith accounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounts\"\n), \n\naccounting_books as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounting_books\"\n), \n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__subsidiaries\"\n),\n\nconsolidated_exchange_rates as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__consolidated_exchange_rates\"\n),\n\nperiod_exchange_rate_map as ( -- exchange rates used, by accounting period, to convert to parent subsidiary\n  select\n    consolidated_exchange_rates.accounting_period_id,\n    consolidated_exchange_rates.average_rate,\n    consolidated_exchange_rates.current_rate,\n    consolidated_exchange_rates.historical_rate,\n    consolidated_exchange_rates.from_subsidiary_id,\n    consolidated_exchange_rates.to_subsidiary_id\n  from consolidated_exchange_rates\n\n  where consolidated_exchange_rates.to_subsidiary_id in (select subsidiary_id from subsidiaries where parent_id is null)  -- constrait - only the primary subsidiary has no parent\n    and consolidated_exchange_rates.accounting_book_id in (select accounting_book_id from accounting_books where lower(is_primary) = 'yes')\n), \n\naccountxperiod_exchange_rate_map as ( -- account table with exchange rate details by accounting period\n  select\n    period_exchange_rate_map.accounting_period_id,\n    period_exchange_rate_map.from_subsidiary_id,\n    period_exchange_rate_map.to_subsidiary_id,\n    accounts.account_id,\n    case \n      when lower(accounts.general_rate_type) = 'historical' then period_exchange_rate_map.historical_rate\n      when lower(accounts.general_rate_type) = 'current' then period_exchange_rate_map.current_rate\n      when lower(accounts.general_rate_type) = 'average' then period_exchange_rate_map.average_rate\n      else null\n        end as exchange_rate\n  from accounts\n  \n  cross join period_exchange_rate_map\n)\n\nselect * \nfrom accountxperiod_exchange_rate_map\n),  __dbt__cte__int_netsuite__transaction_and_reporting_periods as (\n\n\nwith accounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounting_periods\"\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__subsidiaries\"\n),\n\ntransaction_and_reporting_periods as ( \n  select\n    base.accounting_period_id as accounting_period_id,\n    multiplier.accounting_period_id as reporting_accounting_period_id\n  from accounting_periods as base\n\n  join accounting_periods as multiplier\n    on multiplier.starting_at >= base.starting_at\n      and multiplier.quarter = base.quarter\n      and multiplier.year_0 = base.year_0\n      and multiplier.fiscal_calendar_id = base.fiscal_calendar_id\n      and cast(multiplier.starting_at as timestamp) <= now() \n\n  where lower(base.quarter) = 'no'\n    and lower(base.year_0) = 'no'\n    and base.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null) -- fiscal calendar will align with parent subsidiary's default calendar\n)\n\nselect * \nfrom transaction_and_reporting_periods\n),  __dbt__cte__int_netsuite__transactions_with_converted_amounts as (\n\n\nwith transaction_lines_w_accounting_period as (\n    select * \n    from __dbt__cte__int_netsuite__transaction_lines_w_accounting_period\n), \n\naccountxperiod_exchange_rate_map as (\n    select * \n    from __dbt__cte__int_netsuite__accountxperiod_exchange_rate_map\n), \n\ntransaction_and_reporting_periods as (\n    select * \n    from __dbt__cte__int_netsuite__transaction_and_reporting_periods\n), \n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounts\"\n),\n\ntransactions_in_every_calculation_period_w_exchange_rates as (\n  select\n    transaction_lines_w_accounting_period.*,\n    reporting_accounting_period_id,\n    exchange_reporting_period.exchange_rate as exchange_rate_reporting_period,\n    exchange_transaction_period.exchange_rate as exchange_rate_transaction_period\n  from transaction_lines_w_accounting_period\n\n  join transaction_and_reporting_periods \n    on transaction_and_reporting_periods.accounting_period_id = transaction_lines_w_accounting_period.transaction_accounting_period_id \n\n  join accountxperiod_exchange_rate_map as exchange_reporting_period\n    on exchange_reporting_period.accounting_period_id = transaction_and_reporting_periods.reporting_accounting_period_id\n      and exchange_reporting_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_reporting_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n      \n  join accountxperiod_exchange_rate_map as exchange_transaction_period\n    on exchange_transaction_period.accounting_period_id = transaction_and_reporting_periods.accounting_period_id\n      and exchange_transaction_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_transaction_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n), \n\ntransactions_with_converted_amounts as (\n  select\n    transactions_in_every_calculation_period_w_exchange_rates.*,\n    unconverted_amount * exchange_rate_transaction_period as converted_amount_using_transaction_accounting_period,\n    unconverted_amount * exchange_rate_reporting_period as converted_amount_using_reporting_month,\n    case\n      when lower(accounts.type_name) in ('income','other income','expense','other expense','other income','cost of goods sold') then true\n      else false \n        end as is_income_statement,\n    case\n      when lower(accounts.type_name) in ('accounts receivable', 'bank', 'deferred expense', 'fixed asset', 'other asset', 'other current asset', 'unbilled receivable', 'prepaid expense') then 'Asset'\n      when lower(accounts.type_name) in ('cost of goods sold', 'expense', 'other expense') then 'Expense'\n      when lower(accounts.type_name) in ('income', 'other income') then 'Income'\n      when lower(accounts.type_name) in ('accounts payable', 'credit card', 'deferred revenue', 'long term liability', 'other current liability') then 'Liability'\n      when lower(accounts.type_name) in ('equity', 'retained earnings', 'net income') then 'Equity'\n      when lower(accounts.type_name) in ('non posting', 'statistical') then 'Other'\n      else null \n        end as account_category\n  from transactions_in_every_calculation_period_w_exchange_rates\n\n  left join accounts \n    on accounts.account_id = transactions_in_every_calculation_period_w_exchange_rates.account_id \n)\n\nselect * \nfrom transactions_with_converted_amounts\n), transactions_with_converted_amounts as (\n    select * \n    from __dbt__cte__int_netsuite__transactions_with_converted_amounts\n), \n\n--Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n\n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounts\"\n), \n\naccounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounting_periods\"\n), \n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__subsidiaries\"\n),\n\nbalance_sheet as ( \n  select\n    transactions_with_converted_amounts.transaction_id,\n    transactions_with_converted_amounts.transaction_line_id,\n    reporting_accounting_periods.accounting_period_id as accounting_period_id,\n    reporting_accounting_periods.ending_at as accounting_period_ending,\n    reporting_accounting_periods.full_name as accounting_period_full_name,\n    reporting_accounting_periods.name as accounting_period_name,\n    lower(reporting_accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n    lower(reporting_accounting_periods.is_closed) = 'yes' as is_accounting_period_closed,\n    transactions_with_converted_amounts.account_category as account_category,\n    case\n      when (lower(accounts.is_balancesheet) = 'f' and reporting_accounting_periods.year_id = transaction_accounting_periods.year_id) then 'Net Income'\n      when lower(accounts.is_balancesheet) = 'f' then 'Retained Earnings'\n      else accounts.name\n        end as account_name,\n    case\n      when (lower(accounts.is_balancesheet) = 'f' and reporting_accounting_periods.year_id = transaction_accounting_periods.year_id) then 'Net Income'\n      when lower(accounts.is_balancesheet) = 'f' then 'Retained Earnings'\n      else accounts.type_name\n        end as account_type_name,\n    case\n      when lower(accounts.is_balancesheet) = 'f' then null\n      else accounts.account_id\n        end as account_id,\n    case\n      when lower(accounts.is_balancesheet) = 'f' then null\n      else accounts.account_number\n        end as account_number\n    \n    --The below script allows for accounts table pass through columns.\n    \n\n\n\n,\n\n    case\n      when lower(accounts.is_balancesheet) = 'f' and lower(accounts.general_rate_type) in ('historical', 'average') then -converted_amount_using_transaction_accounting_period\n      when lower(accounts.is_balancesheet) = 'f' then -converted_amount_using_reporting_month\n      when lower(accounts.is_balancesheet) = 't' and lower(accounts.is_leftside) = 'f' and lower(accounts.general_rate_type) in ('historical', 'average') then -converted_amount_using_transaction_accounting_period\n      when lower(accounts.is_balancesheet) = 't' and lower(accounts.is_leftside) = 't' and lower(accounts.general_rate_type) in ('historical', 'average') then converted_amount_using_transaction_accounting_period\n      when lower(accounts.is_balancesheet) = 't' and lower(accounts.is_leftside) = 'f' then -converted_amount_using_reporting_month\n      when lower(accounts.is_balancesheet) = 't' and lower(accounts.is_leftside) = 't' then converted_amount_using_reporting_month\n      else 0\n        end as converted_amount,\n        \n    case\n      when lower(accounts.type_name) = 'bank' then 1\n      when lower(accounts.type_name) = 'accounts receivable' then 2\n      when lower(accounts.type_name) = 'unbilled receivable' then 3\n      when lower(accounts.type_name) = 'other current asset' then 4\n      when lower(accounts.type_name) = 'fixed asset' then 5\n      when lower(accounts.type_name) = 'other asset' then 6\n      when lower(accounts.type_name) = 'deferred expense' then 7\n      when lower(accounts.type_name) = 'accounts payable' then 8\n      when lower(accounts.type_name) = 'credit card' then 9\n      when lower(accounts.type_name) = 'other current liability' then 10\n      when lower(accounts.type_name) = 'long term liability' then 11\n      when lower(accounts.type_name) = 'deferred revenue' then 12\n      when lower(accounts.type_name) = 'equity' then 13\n      when (lower(accounts.is_balancesheet) = 'f' and reporting_accounting_periods.year_id = transaction_accounting_periods.year_id) then 15\n      when lower(accounts.is_balancesheet) = 'f' then 14\n      else null\n        end as balance_sheet_sort_helper\n    \n    --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n    \n\n  from transactions_with_converted_amounts\n  \n  --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n  \n\n\n  left join accounts \n    on accounts.account_id = transactions_with_converted_amounts.account_id\n\n  left join accounting_periods as reporting_accounting_periods \n    on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n\n  left join accounting_periods as transaction_accounting_periods \n    on transaction_accounting_periods.accounting_period_id = transactions_with_converted_amounts.transaction_accounting_period_id\n\n  where reporting_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n    and transaction_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n    and (lower(accounts.is_balancesheet) = 't'\n      or transactions_with_converted_amounts.is_income_statement)\n\n  union all\n\n  select\n    transactions_with_converted_amounts.transaction_id,\n    transactions_with_converted_amounts.transaction_line_id,\n    reporting_accounting_periods.accounting_period_id as accounting_period_id,\n    reporting_accounting_periods.ending_at as accounting_period_ending,\n    reporting_accounting_periods.full_name as accounting_period_full_name,\n    reporting_accounting_periods.name as accounting_period_name,\n    lower(reporting_accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n    lower(reporting_accounting_periods.is_closed) = 'yes' as is_accounting_period_closed,\n    'Equity' as account_category,\n    'Cumulative Translation Adjustment' as account_name,\n    'Cumulative Translation Adjustment' as account_type_name,\n    null as account_id,\n    null as account_number,\n\n    \n\n    case\n      when lower(account_category) = 'equity' or is_income_statement then converted_amount_using_transaction_accounting_period\n      else converted_amount_using_reporting_month\n        end as converted_amount,\n    16 as balance_sheet_sort_helper\n\n    --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n    \n\n  from transactions_with_converted_amounts\n\n  --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n  \n\n  left join accounts\n    on accounts.account_id = transactions_with_converted_amounts.account_id\n\n  left join accounting_periods as reporting_accounting_periods \n    on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n    \n  where reporting_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n    and (lower(accounts.is_balancesheet) = 't'\n      or transactions_with_converted_amounts.is_income_statement)\n)\n\nselect *\nfrom balance_sheet", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite__balance_sheet\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.413117Z", "completed_at": "2024-09-16T15:41:59.420100Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.421051Z", "completed_at": "2024-09-16T15:41:59.421059Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009902000427246094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.dbt_utils_unique_combination_of_columns_netsuite__balance_sheet_transaction_line_id__transaction_id__accounting_period_id__account_name.7d7c0ea1da", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_line_id, transaction_id, accounting_period_id, account_name\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite__balance_sheet\"\n    group by transaction_line_id, transaction_id, accounting_period_id, account_name\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.417291Z", "completed_at": "2024-09-16T15:41:59.420352Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.421299Z", "completed_at": "2024-09-16T15:41:59.421303Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009970903396606445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.dbt_utils_unique_combination_of_columns_netsuite__income_statement_transaction_line_id__transaction_id__accounting_period_id__account_name.8ee630c641", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_line_id, transaction_id, accounting_period_id, account_name\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite__income_statement\"\n    group by transaction_line_id, transaction_id, accounting_period_id, account_name\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.424180Z", "completed_at": "2024-09-16T15:41:59.429172Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.430059Z", "completed_at": "2024-09-16T15:41:59.430064Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0076029300689697266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite__balance_sheet_transaction_id.bb54ae3b9e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite__balance_sheet\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.426681Z", "completed_at": "2024-09-16T15:41:59.429406Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.430295Z", "completed_at": "2024-09-16T15:41:59.430298Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007685184478759766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite__balance_sheet_transaction_line_id.2467dc5a32", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite__balance_sheet\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.433112Z", "completed_at": "2024-09-16T15:41:59.476709Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.477172Z", "completed_at": "2024-09-16T15:41:59.477178Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04566216468811035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite__income_statement_transaction_id.12be020c7d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite__income_statement\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.435453Z", "completed_at": "2024-09-16T15:41:59.477940Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.478371Z", "completed_at": "2024-09-16T15:41:59.478375Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04651522636413574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite__income_statement_transaction_line_id.00136bcf80", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite__income_statement\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:58.517797Z", "completed_at": "2024-09-16T15:41:59.630028Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.630565Z", "completed_at": "2024-09-16T15:41:59.630575Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2297117710113525, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__vendors", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__vendors_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    account_owner\n    \n , \n    cast(null as TEXT) as \n    \n    accountnumber\n    \n , \n    cast(null as TEXT) as \n    \n    accounts_email\n    \n , \n    cast(null as float) as \n    \n    annual_revenue\n    \n , \n    cast(null as TEXT) as \n    \n    auto_renewals\n    \n , \n    cast(null as TEXT) as \n    \n    auto_send_statements\n    \n , \n    cast(null as TEXT) as \n    \n    billaddress\n    \n , \n    cast(null as float) as \n    \n    billing_class_id\n    \n , \n    cast(null as TEXT) as \n    \n    city\n    \n , \n    cast(null as TEXT) as \n    \n    comments\n    \n , \n    cast(null as TEXT) as \n    \n    companyname\n    \n , \n    cast(null as TEXT) as \n    \n    country\n    \n , \n    \n    \n    create_date\n    \n as \n    \n    create_date\n    \n, \n    cast(null as float) as \n    \n    creditlimit\n    \n , \n    cast(null as float) as \n    \n    currency_id\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as TEXT) as \n    \n    dic\n    \n , \n    cast(null as TEXT) as \n    \n    email\n    \n , \n    cast(null as TEXT) as \n    \n    email_bill_payment_vouchers\n    \n , \n    cast(null as TEXT) as \n    \n    email_cash_sales\n    \n , \n    cast(null as TEXT) as \n    \n    email_credit_notes\n    \n , \n    cast(null as TEXT) as \n    \n    email_invoices\n    \n , \n    cast(null as TEXT) as \n    \n    email_item_fulfilments\n    \n , \n    cast(null as TEXT) as \n    \n    email_purchase_orders\n    \n , \n    cast(null as TEXT) as \n    \n    email_quotes\n    \n , \n    cast(null as TEXT) as \n    \n    email_sales_orders\n    \n , \n    cast(null as TEXT) as \n    \n    email_statements\n    \n , \n    cast(null as TEXT) as \n    \n    employee_number\n    \n , \n    cast(null as TEXT) as \n    \n    exemption_certificate_no\n    \n , \n    cast(null as float) as \n    \n    expense_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    fax\n    \n , \n    cast(null as TEXT) as \n    \n    full_name\n    \n , \n    cast(null as TEXT) as \n    \n    home_phone\n    \n , \n    cast(null as TEXT) as \n    \n    hris_id\n    \n , \n    cast(null as TEXT) as \n    \n    ico\n    \n , \n    cast(null as TEXT) as \n    \n    id_number_in_the_country_of_r\n    \n , \n    cast(null as float) as \n    \n    id_type_in_the_country_of_r_id\n    \n , \n    cast(null as float) as \n    \n    in_transit_balance\n    \n , \n    cast(null as TEXT) as \n    \n    incoterm\n    \n , \n    cast(null as float) as \n    \n    industry_id\n    \n , \n    cast(null as TEXT) as \n    \n    invoice_via_procurement_syste\n    \n , \n    cast(null as TEXT) as \n    \n    invoicing_details\n    \n , \n    cast(null as TEXT) as \n    \n    is1099eligible\n    \n , \n    cast(null as TEXT) as \n    \n    is_partner\n    \n , \n    cast(null as TEXT) as \n    \n    is_person\n    \n , \n    cast(null as TEXT) as \n    \n    isemailhtml\n    \n , \n    cast(null as TEXT) as \n    \n    isemailpdf\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as float) as \n    \n    labor_cost\n    \n , \n    cast(null as timestamp) as \n    \n    last_modified_date\n    \n , \n    cast(null as timestamp) as \n    \n    last_sales_activity\n    \n , \n    cast(null as TEXT) as \n    \n    line1\n    \n , \n    cast(null as TEXT) as \n    \n    line2\n    \n , \n    cast(null as TEXT) as \n    \n    line3\n    \n , \n    cast(null as TEXT) as \n    \n    loginaccess\n    \n , \n    cast(null as TEXT) as \n    \n    lsa_link\n    \n , \n    cast(null as TEXT) as \n    \n    lsa_link_name\n    \n , \n    cast(null as TEXT) as \n    \n    mobile_phone\n    \n , \n    cast(null as timestamp) as \n    \n    msa_effective_date\n    \n , \n    cast(null as TEXT) as \n    \n    name\n    \n , \n    cast(null as float) as \n    \n    no__of_employees\n    \n , \n    cast(null as float) as \n    \n    openbalance\n    \n , \n    cast(null as float) as \n    \n    openbalance_foreign\n    \n , \n    cast(null as float) as \n    \n    payables_account_id\n    \n , \n    cast(null as float) as \n    \n    payment_terms_id\n    \n , \n    cast(null as TEXT) as \n    \n    phone\n    \n , \n    cast(null as float) as \n    \n    prepayment_balance\n    \n , \n    cast(null as TEXT) as \n    \n    printoncheckas\n    \n , \n    cast(null as float) as \n    \n    purchaseorderamount\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantity\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantitydiff\n    \n , \n    cast(null as TEXT) as \n    \n    purchases_email\n    \n , \n    cast(null as float) as \n    \n    receiptamount\n    \n , \n    cast(null as float) as \n    \n    receiptquantity\n    \n , \n    cast(null as float) as \n    \n    receiptquantitydiff\n    \n , \n    cast(null as float) as \n    \n    represents_subsidiary_id\n    \n , \n    cast(null as TEXT) as \n    \n    restrict_access_to_expensify\n    \n , \n    cast(null as TEXT) as \n    \n    salesforce_id\n    \n , \n    cast(null as TEXT) as \n    \n    shipaddress\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_email\n    \n , \n    cast(null as TEXT) as \n    \n    state\n    \n , \n    cast(null as float) as \n    \n    subsidiary\n    \n , \n    cast(null as TEXT) as \n    \n    tax_contact_first_name\n    \n , \n    cast(null as float) as \n    \n    tax_contact_id\n    \n , \n    cast(null as TEXT) as \n    \n    tax_contact_last_name\n    \n , \n    cast(null as TEXT) as \n    \n    tax_contact_middle_name\n    \n , \n    cast(null as TEXT) as \n    \n    tax_number\n    \n , \n    cast(null as TEXT) as \n    \n    taxidnum\n    \n , \n    cast(null as float) as \n    \n    time_approver_id\n    \n , \n    cast(null as TEXT) as \n    \n    transactions_need_approval\n    \n , \n    cast(null as TEXT) as \n    \n    uen\n    \n , \n    cast(null as float) as \n    \n    unbilled_orders\n    \n , \n    cast(null as float) as \n    \n    unbilled_orders_foreign\n    \n , \n    cast(null as TEXT) as \n    \n    url\n    \n , \n    cast(null as TEXT) as \n    \n    vat_registration_no\n    \n , \n    cast(null as TEXT) as \n    \n    vendor_extid\n    \n , \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n, \n    \n    \n    vendor_type_id\n    \n as \n    \n    vendor_type_id\n    \n, \n    cast(null as TEXT) as \n    \n    zipcode\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        vendor_id,\n        companyname as company_name,\n        create_date as create_date_at,\n        vendor_type_id,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your vendors_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__vendors\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.748471Z", "completed_at": "2024-09-16T15:41:59.797454Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.799701Z", "completed_at": "2024-09-16T15:41:59.799710Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05427908897399902, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__vendors_vendor_id.15978cc531", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__vendors\"\nwhere vendor_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.751950Z", "completed_at": "2024-09-16T15:41:59.798679Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.800358Z", "completed_at": "2024-09-16T15:41:59.800363Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.054724931716918945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__vendors_vendor_id.a981580d39", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    vendor_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__vendors\"\nwhere vendor_id is not null\ngroup by vendor_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.755939Z", "completed_at": "2024-09-16T15:41:59.800064Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.802308Z", "completed_at": "2024-09-16T15:41:59.802313Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05532121658325195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.netsuite__transaction_details", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_netsuite__transaction_lines_w_accounting_period as (\n\n\nwith transactions as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__transactions\"\n), \n\ntransaction_lines as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__transaction_lines\"\n),\n\ntransaction_lines_w_accounting_period as ( -- transaction line totals, by accounts, accounting period and subsidiary\n  select\n    transaction_lines.transaction_id,\n    transaction_lines.transaction_line_id,\n    transaction_lines.subsidiary_id,\n    transaction_lines.account_id,\n    transactions.accounting_period_id as transaction_accounting_period_id,\n    coalesce(transaction_lines.amount, 0) as unconverted_amount\n  from transaction_lines\n\n  join transactions on transactions.transaction_id = transaction_lines.transaction_id\n\n  where lower(transactions.transaction_type) != 'revenue arrangement'\n    and lower(non_posting_line) != 'yes'\n)\n\nselect * \nfrom transaction_lines_w_accounting_period\n),  __dbt__cte__int_netsuite__accountxperiod_exchange_rate_map as (\n\n\nwith accounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounts\"\n), \n\naccounting_books as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounting_books\"\n), \n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__subsidiaries\"\n),\n\nconsolidated_exchange_rates as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__consolidated_exchange_rates\"\n),\n\nperiod_exchange_rate_map as ( -- exchange rates used, by accounting period, to convert to parent subsidiary\n  select\n    consolidated_exchange_rates.accounting_period_id,\n    consolidated_exchange_rates.average_rate,\n    consolidated_exchange_rates.current_rate,\n    consolidated_exchange_rates.historical_rate,\n    consolidated_exchange_rates.from_subsidiary_id,\n    consolidated_exchange_rates.to_subsidiary_id\n  from consolidated_exchange_rates\n\n  where consolidated_exchange_rates.to_subsidiary_id in (select subsidiary_id from subsidiaries where parent_id is null)  -- constrait - only the primary subsidiary has no parent\n    and consolidated_exchange_rates.accounting_book_id in (select accounting_book_id from accounting_books where lower(is_primary) = 'yes')\n), \n\naccountxperiod_exchange_rate_map as ( -- account table with exchange rate details by accounting period\n  select\n    period_exchange_rate_map.accounting_period_id,\n    period_exchange_rate_map.from_subsidiary_id,\n    period_exchange_rate_map.to_subsidiary_id,\n    accounts.account_id,\n    case \n      when lower(accounts.general_rate_type) = 'historical' then period_exchange_rate_map.historical_rate\n      when lower(accounts.general_rate_type) = 'current' then period_exchange_rate_map.current_rate\n      when lower(accounts.general_rate_type) = 'average' then period_exchange_rate_map.average_rate\n      else null\n        end as exchange_rate\n  from accounts\n  \n  cross join period_exchange_rate_map\n)\n\nselect * \nfrom accountxperiod_exchange_rate_map\n),  __dbt__cte__int_netsuite__transaction_and_reporting_periods as (\n\n\nwith accounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounting_periods\"\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__subsidiaries\"\n),\n\ntransaction_and_reporting_periods as ( \n  select\n    base.accounting_period_id as accounting_period_id,\n    multiplier.accounting_period_id as reporting_accounting_period_id\n  from accounting_periods as base\n\n  join accounting_periods as multiplier\n    on multiplier.starting_at >= base.starting_at\n      and multiplier.quarter = base.quarter\n      and multiplier.year_0 = base.year_0\n      and multiplier.fiscal_calendar_id = base.fiscal_calendar_id\n      and cast(multiplier.starting_at as timestamp) <= now() \n\n  where lower(base.quarter) = 'no'\n    and lower(base.year_0) = 'no'\n    and base.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null) -- fiscal calendar will align with parent subsidiary's default calendar\n)\n\nselect * \nfrom transaction_and_reporting_periods\n),  __dbt__cte__int_netsuite__transactions_with_converted_amounts as (\n\n\nwith transaction_lines_w_accounting_period as (\n    select * \n    from __dbt__cte__int_netsuite__transaction_lines_w_accounting_period\n), \n\naccountxperiod_exchange_rate_map as (\n    select * \n    from __dbt__cte__int_netsuite__accountxperiod_exchange_rate_map\n), \n\ntransaction_and_reporting_periods as (\n    select * \n    from __dbt__cte__int_netsuite__transaction_and_reporting_periods\n), \n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounts\"\n),\n\ntransactions_in_every_calculation_period_w_exchange_rates as (\n  select\n    transaction_lines_w_accounting_period.*,\n    reporting_accounting_period_id,\n    exchange_reporting_period.exchange_rate as exchange_rate_reporting_period,\n    exchange_transaction_period.exchange_rate as exchange_rate_transaction_period\n  from transaction_lines_w_accounting_period\n\n  join transaction_and_reporting_periods \n    on transaction_and_reporting_periods.accounting_period_id = transaction_lines_w_accounting_period.transaction_accounting_period_id \n\n  join accountxperiod_exchange_rate_map as exchange_reporting_period\n    on exchange_reporting_period.accounting_period_id = transaction_and_reporting_periods.reporting_accounting_period_id\n      and exchange_reporting_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_reporting_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n      \n  join accountxperiod_exchange_rate_map as exchange_transaction_period\n    on exchange_transaction_period.accounting_period_id = transaction_and_reporting_periods.accounting_period_id\n      and exchange_transaction_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_transaction_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n), \n\ntransactions_with_converted_amounts as (\n  select\n    transactions_in_every_calculation_period_w_exchange_rates.*,\n    unconverted_amount * exchange_rate_transaction_period as converted_amount_using_transaction_accounting_period,\n    unconverted_amount * exchange_rate_reporting_period as converted_amount_using_reporting_month,\n    case\n      when lower(accounts.type_name) in ('income','other income','expense','other expense','other income','cost of goods sold') then true\n      else false \n        end as is_income_statement,\n    case\n      when lower(accounts.type_name) in ('accounts receivable', 'bank', 'deferred expense', 'fixed asset', 'other asset', 'other current asset', 'unbilled receivable', 'prepaid expense') then 'Asset'\n      when lower(accounts.type_name) in ('cost of goods sold', 'expense', 'other expense') then 'Expense'\n      when lower(accounts.type_name) in ('income', 'other income') then 'Income'\n      when lower(accounts.type_name) in ('accounts payable', 'credit card', 'deferred revenue', 'long term liability', 'other current liability') then 'Liability'\n      when lower(accounts.type_name) in ('equity', 'retained earnings', 'net income') then 'Equity'\n      when lower(accounts.type_name) in ('non posting', 'statistical') then 'Other'\n      else null \n        end as account_category\n  from transactions_in_every_calculation_period_w_exchange_rates\n\n  left join accounts \n    on accounts.account_id = transactions_in_every_calculation_period_w_exchange_rates.account_id \n)\n\nselect * \nfrom transactions_with_converted_amounts\n), transactions_with_converted_amounts as (\n    select * \n    from __dbt__cte__int_netsuite__transactions_with_converted_amounts\n),\n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounts\"\n),\n\naccounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__accounting_periods\"\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__subsidiaries\"\n),\n\ntransaction_lines as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__transaction_lines\"\n),\n\ntransactions as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__transactions\"\n),\n\nincome_accounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__income_accounts\"\n),\n\nexpense_accounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__expense_accounts\"\n),\n\ncustomers as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__customers\"\n),\n\nitems as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__items\"\n),\n\nlocations as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__locations\"\n),\n\nvendors as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__vendors\"\n),\n\nvendor_types as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__vendor_types\"\n),\n\ndepartments as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__departments\"\n),\n\ncurrencies as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__currencies\"\n),\n\nclasses as (\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite__classes\"\n),\n\ntransaction_details as (\n  select\n    transaction_lines.transaction_line_id,\n    transaction_lines.memo as transaction_memo,\n    lower(transaction_lines.non_posting_line) = 'yes' as is_transaction_non_posting,\n    transactions.transaction_id,\n    transactions.status as transaction_status,\n    transactions.transaction_date,\n    transactions.due_date_at as transaction_due_date,\n    transactions.transaction_type as transaction_type,\n    (lower(transactions.is_advanced_intercompany) = 'yes' or lower(transactions.is_intercompany) = 'yes') as is_transaction_intercompany\n\n    --The below script allows for transactions table pass through columns.\n    \n\n\n\n    \n\n    --The below script allows for transaction lines table pass through columns.\n    \n\n\n\n,\n\n    accounting_periods.ending_at as accounting_period_ending,\n    accounting_periods.full_name as accounting_period_full_name,\n    accounting_periods.name as accounting_period_name,\n    lower(accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n    lower(accounting_periods.is_closed) = 'yes' as is_accounting_period_closed,\n    accounts.name as account_name,\n    accounts.type_name as account_type_name,\n    accounts.account_id as account_id,\n    accounts.account_number\n\n    --The below script allows for accounts table pass through columns.\n    \n\n\n\n,\n\n    lower(accounts.is_leftside) = 't' as is_account_leftside,\n    lower(accounts.type_name) like 'accounts payable%' as is_accounts_payable,\n    lower(accounts.type_name) like 'accounts receivable%' as is_accounts_receivable,\n    lower(accounts.name) like '%intercompany%' as is_account_intercompany,\n    coalesce(parent_account.name, accounts.name) as parent_account_name,\n    income_accounts.income_account_id is not null as is_income_account,\n    expense_accounts.expense_account_id is not null as is_expense_account,\n    customers.company_name,\n    customers.city as customer_city,\n    customers.state as customer_state,\n    customers.zipcode as customer_zipcode,\n    customers.country as customer_country,\n    customers.date_first_order_at as customer_date_first_order,\n    customers.customer_external_id,\n    classes.full_name as class_full_name,\n    items.name as item_name,\n    items.type_name as item_type_name,\n    items.sales_description,\n    locations.name as location_name,\n    locations.city as location_city,\n    locations.country as location_country,\n    vendor_types.name as vendor_type_name,\n    vendors.company_name as vendor_name,\n    vendors.create_date_at as vendor_create_date,\n    currencies.name as currency_name,\n    currencies.symbol as currency_symbol,\n    departments.name as department_name\n\n    --The below script allows for departments table pass through columns.\n    \n\n\n\n,\n\n    subsidiaries.name as subsidiary_name,\n    case\n      when lower(accounts.type_name) = 'income' or lower(accounts.type_name) = 'other income' then -converted_amount_using_transaction_accounting_period\n      else converted_amount_using_transaction_accounting_period\n        end as converted_amount,\n    case\n      when lower(accounts.type_name) = 'income' or lower(accounts.type_name) = 'other income' then -transaction_lines.amount\n      else transaction_lines.amount\n        end as transaction_amount\n  from transaction_lines\n\n  join transactions\n    on transactions.transaction_id = transaction_lines.transaction_id\n\n  left join transactions_with_converted_amounts as transactions_with_converted_amounts\n    on transactions_with_converted_amounts.transaction_line_id = transaction_lines.transaction_line_id\n      and transactions_with_converted_amounts.transaction_id = transaction_lines.transaction_id\n      and transactions_with_converted_amounts.transaction_accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n\n  left join accounts \n    on accounts.account_id = transaction_lines.account_id\n\n  left join accounts as parent_account \n    on parent_account.account_id = accounts.parent_id\n\n  left join accounting_periods \n    on accounting_periods.accounting_period_id = transactions.accounting_period_id\n  left join income_accounts \n    on income_accounts.income_account_id = accounts.account_id\n\n  left join expense_accounts \n    on expense_accounts.expense_account_id = accounts.account_id\n\n  left join customers \n    on customers.customer_id = transaction_lines.company_id\n  \n  left join classes\n    on classes.class_id = transaction_lines.class_id\n\n  left join items \n    on items.item_id = transaction_lines.item_id\n\n  left join locations \n    on locations.location_id = transaction_lines.location_id\n\n  left join vendors \n    on vendors.vendor_id = transaction_lines.company_id\n\n  left join vendor_types \n    on vendor_types.vendor_type_id = vendors.vendor_type_id\n\n  left join currencies \n    on currencies.currency_id = transactions.currency_id\n\n  left join departments \n    on departments.department_id = transaction_lines.department_id\n\n  join subsidiaries \n    on subsidiaries.subsidiary_id = transaction_lines.subsidiary_id\n    \n  where (accounting_periods.fiscal_calendar_id is null\n    or accounting_periods.fiscal_calendar_id  = (select fiscal_calendar_id from subsidiaries where parent_id is null))\n)\n\nselect *\nfrom transaction_details", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite__transaction_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.805976Z", "completed_at": "2024-09-16T15:41:59.822770Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.823906Z", "completed_at": "2024-09-16T15:41:59.823914Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02089524269104004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.accepted_values_netsuite__transaction_details_account_type_name__Accounts_Receivable__Bank__Deferred_Expense__Fixed_Asset__Other_Asset__Other_Current_Asset__Unbilled_Receivable__Prepaid_Expense__Cost_of_Goods_Sold__Expense__Other_Expense__Income__Other_Income__Accounts_Payable__Credit_Card__Deferred_Revenue__Long_Term_Liability__Other_Current_Liability__Equity__Retained_Earnings__Net_Income__Non_Posting__Statistical.fd03652096", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        account_type_name as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite__transaction_details\"\n    group by account_type_name\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Accounts Receivable','Bank','Deferred Expense','Fixed Asset','Other Asset','Other Current Asset','Unbilled Receivable','Prepaid Expense','Cost of Goods Sold','Expense','Other Expense','Income','Other Income','Accounts Payable','Credit Card','Deferred Revenue','Long Term Liability','Other Current Liability','Equity','Retained Earnings','Net Income','Non Posting','Statistical'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.817561Z", "completed_at": "2024-09-16T15:41:59.823559Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.825653Z", "completed_at": "2024-09-16T15:41:59.825657Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02208995819091797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.dbt_utils_unique_combination_of_columns_netsuite__transaction_details_transaction_line_id__transaction_id.5613fa3400", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_line_id, transaction_id\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite__transaction_details\"\n    group by transaction_line_id, transaction_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.820135Z", "completed_at": "2024-09-16T15:41:59.824226Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.826201Z", "completed_at": "2024-09-16T15:41:59.826205Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.022588253021240234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite__transaction_details_transaction_id.a65a8e2f58", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite__transaction_details\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.828130Z", "completed_at": "2024-09-16T15:41:59.831106Z"}, {"name": "execute", "started_at": "2024-09-16T15:41:59.831550Z", "completed_at": "2024-09-16T15:41:59.831556Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00499415397644043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite__transaction_details_transaction_line_id.1662f317e3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite__transaction_details\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:41:59.339024Z", "completed_at": "2024-09-16T15:42:00.294613Z"}, {"name": "execute", "started_at": "2024-09-16T15:42:00.295081Z", "completed_at": "2024-09-16T15:42:00.295088Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.9583780765533447, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.int_netsuite2__tran_with_converted_amounts", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_netsuite2__transaction_lines as (\n\n\nwith transaction_lines as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transaction_lines\"\n),\n\ntransaction_accounting_lines as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transaction_accounting_lines\"\n),\n\n\naccounting_books as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_books\"\n), \n\n\njoined as (\n\n    select \n        transaction_lines.*,\n        transaction_accounting_lines.account_id,\n\n        \n        transaction_accounting_lines.accounting_book_id,\n        accounting_books.accounting_book_name,\n        \n        \n        transaction_accounting_lines.amount,\n        transaction_accounting_lines.credit_amount,\n        transaction_accounting_lines.debit_amount,\n        transaction_accounting_lines.paid_amount,\n        transaction_accounting_lines.unpaid_amount,\n        transaction_accounting_lines.is_posting\n\n    from transaction_lines\n    left join transaction_accounting_lines\n        on transaction_lines.transaction_line_id = transaction_accounting_lines.transaction_line_id\n        and transaction_lines.transaction_id = transaction_accounting_lines.transaction_id\n        \n    \n    left join accounting_books\n        on accounting_books.accounting_book_id = transaction_accounting_lines.accounting_book_id\n\n    union all\n\n    select\n        transaction_lines.*,\n        transaction_accounting_lines.account_id,\n        accounting_books.accounting_book_id,\n        accounting_books.accounting_book_name,\n        transaction_accounting_lines.amount,\n        transaction_accounting_lines.credit_amount,\n        transaction_accounting_lines.debit_amount,\n        transaction_accounting_lines.paid_amount,\n        transaction_accounting_lines.unpaid_amount,\n        transaction_accounting_lines.is_posting\n\n    from transaction_lines\n    left join transaction_accounting_lines\n        on transaction_lines.transaction_line_id = transaction_accounting_lines.transaction_line_id\n        and transaction_lines.transaction_id = transaction_accounting_lines.transaction_id\n    left join accounting_books\n        on accounting_books.base_book_id = transaction_accounting_lines.accounting_book_id\n    where accounting_books.base_book_id is not null\n    \n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__tran_lines_w_accounting_period as (\n\n\nwith transactions as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transactions\"\n), \n\ntransaction_lines as (\n    select * \n    from __dbt__cte__int_netsuite2__transaction_lines\n),\n\ntransaction_lines_w_accounting_period as ( -- transaction line totals, by accounts, accounting period and subsidiary\n  select\n    transaction_lines.transaction_id,\n    transaction_lines.transaction_line_id,\n    transaction_lines.subsidiary_id,\n    transaction_lines.account_id,\n\n    \n    transaction_lines.accounting_book_id,\n    transaction_lines.accounting_book_name,\n    \n    \n    transactions.accounting_period_id as transaction_accounting_period_id,\n    coalesce(transaction_lines.amount, 0) as unconverted_amount,\n    transactions._fivetran_synced_date\n  from transaction_lines\n\n  join transactions on transactions.transaction_id = transaction_lines.transaction_id\n\n  where lower(transactions.transaction_type) != 'revenue arrangement'\n    and transaction_lines.is_posting\n)\n\nselect * \nfrom transaction_lines_w_accounting_period\n),  __dbt__cte__int_netsuite2__accounts as (\n\n\nwith accounts as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounts\"\n),\n\naccount_types as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__account_types\"\n),\n\njoined as (\n\n    select \n        accounts.*,\n        account_types.type_name,\n        account_types.is_balancesheet,\n        account_types.is_leftside\n\n    from accounts\n    left join account_types\n        on accounts.account_type_id = account_types.account_type_id\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__acctxperiod_exchange_rate_map as (\n\n\nwith accounts as (\n    select * \n    from __dbt__cte__int_netsuite2__accounts\n), \n\n\naccounting_books as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_books\"\n),\n\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__subsidiaries\"\n),\n\nconsolidated_exchange_rates as (\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__consolidated_exchange_rates\"\n),\n\ncurrencies as (\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__currencies\"\n),\n\nperiod_exchange_rate_map as ( -- exchange rates used, by accounting period, to convert to parent subsidiary\n  select\n    consolidated_exchange_rates.accounting_period_id,\n\n    \n    consolidated_exchange_rates.accounting_book_id,\n    \n\n    consolidated_exchange_rates.average_rate,\n    consolidated_exchange_rates.current_rate,\n    consolidated_exchange_rates.historical_rate,\n    consolidated_exchange_rates.from_subsidiary_id,\n    consolidated_exchange_rates.to_subsidiary_id,\n    to_subsidiaries.name as to_subsidiary_name,\n    currencies.symbol as to_subsidiary_currency_symbol\n  from consolidated_exchange_rates\n  \n  left join subsidiaries as to_subsidiaries\n    on consolidated_exchange_rates.to_subsidiary_id = to_subsidiaries.subsidiary_id\n\n  left join currencies\n    on currencies.currency_id = to_subsidiaries.currency_id\n\n  \n), \n\naccountxperiod_exchange_rate_map as ( -- account table with exchange rate details by accounting period\n  select\n    period_exchange_rate_map.accounting_period_id,\n\n    \n    period_exchange_rate_map.accounting_book_id,\n    \n    \n    period_exchange_rate_map.from_subsidiary_id,\n    period_exchange_rate_map.to_subsidiary_id,\n    period_exchange_rate_map.to_subsidiary_name,\n    period_exchange_rate_map.to_subsidiary_currency_symbol,\n    accounts.account_id,\n    case \n      when lower(accounts.general_rate_type) = 'historical' then period_exchange_rate_map.historical_rate\n      when lower(accounts.general_rate_type) = 'current' then period_exchange_rate_map.current_rate\n      when lower(accounts.general_rate_type) = 'average' then period_exchange_rate_map.average_rate\n      else null\n        end as exchange_rate\n  from accounts\n  \n  cross join period_exchange_rate_map\n)\n\nselect *\nfrom accountxperiod_exchange_rate_map\n),  __dbt__cte__int_netsuite2__accounting_periods as (\n\n\nwith accounting_periods as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_periods\"\n),\n\naccounting_period_fiscal_calendars as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_period_fiscal_cal\"\n),\n\njoined as (\n\n    select \n        accounting_periods.*,\n        accounting_period_fiscal_calendars.fiscal_calendar_id\n\n    from accounting_periods\n    left join accounting_period_fiscal_calendars\n        on accounting_periods.accounting_period_id = accounting_period_fiscal_calendars.accounting_period_id\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__tran_and_reporting_periods as (\n\n\nwith accounting_periods as (\n    select * \n    from __dbt__cte__int_netsuite2__accounting_periods\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__subsidiaries\"\n),\n\ntransaction_and_reporting_periods as ( \n  select\n    base.accounting_period_id as accounting_period_id,\n    multiplier.accounting_period_id as reporting_accounting_period_id\n  from accounting_periods as base\n\n  join accounting_periods as multiplier\n    on multiplier.starting_at >= base.starting_at\n      and multiplier.is_quarter = base.is_quarter\n      and multiplier.is_year = base.is_year -- this was year_0 in netsuite1\n      and multiplier.fiscal_calendar_id = base.fiscal_calendar_id\n      and cast(multiplier.starting_at as timestamp) <= now() \n\n  where not base.is_quarter\n    and not base.is_year\n    and base.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null) -- fiscal calendar will align with parent subsidiary's default calendar\n)\n\nselect * \nfrom transaction_and_reporting_periods\n), transaction_lines_w_accounting_period as (\n  select * \n  from __dbt__cte__int_netsuite2__tran_lines_w_accounting_period\n\n  \n  where _fivetran_synced_date >= \n\n\n\n    \n\n    \n\n    cast('2010-01-01' as date) + ((interval '1 day') * (-3))\n\n\n\n\n  \n), \n\n\naccountxperiod_exchange_rate_map as (\n  select * \n  from __dbt__cte__int_netsuite2__acctxperiod_exchange_rate_map\n), \n\n\ntransaction_and_reporting_periods as (\n  select * \n  from __dbt__cte__int_netsuite2__tran_and_reporting_periods\n), \n\naccounts as (\n  select * \n  from __dbt__cte__int_netsuite2__accounts\n),\n\ntransactions_in_every_calculation_period_w_exchange_rates as (\n  select\n    transaction_lines_w_accounting_period.*,\n    reporting_accounting_period_id\n    \n    \n    , exchange_reporting_period.exchange_rate as exchange_rate_reporting_period\n    , exchange_transaction_period.exchange_rate as exchange_rate_transaction_period\n    \n\n    \n    , exchange_reporting_period.to_subsidiary_id\n    , exchange_reporting_period.to_subsidiary_name\n    , exchange_reporting_period.to_subsidiary_currency_symbol\n    \n\n  from transaction_lines_w_accounting_period\n\n  left join transaction_and_reporting_periods \n    on transaction_and_reporting_periods.accounting_period_id = transaction_lines_w_accounting_period.transaction_accounting_period_id \n\n  \n  left join accountxperiod_exchange_rate_map as exchange_reporting_period\n    on exchange_reporting_period.accounting_period_id = transaction_and_reporting_periods.reporting_accounting_period_id\n      and exchange_reporting_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_reporting_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n\n      \n      and exchange_reporting_period.accounting_book_id = transaction_lines_w_accounting_period.accounting_book_id\n      \n      \n  left join accountxperiod_exchange_rate_map as exchange_transaction_period\n    on exchange_transaction_period.accounting_period_id = transaction_and_reporting_periods.accounting_period_id\n      and exchange_transaction_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_transaction_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n      \n      \n      and exchange_transaction_period.accounting_book_id = transaction_lines_w_accounting_period.accounting_book_id\n      \n\n      \n      and exchange_transaction_period.to_subsidiary_id = exchange_reporting_period.to_subsidiary_id\n      \n  \n), \n\ntransactions_with_converted_amounts as (\n  select\n    transactions_in_every_calculation_period_w_exchange_rates.*,\n    \n    unconverted_amount * exchange_rate_transaction_period as converted_amount_using_transaction_accounting_period,\n    unconverted_amount * exchange_rate_reporting_period as converted_amount_using_reporting_month,\n    \n    case\n      when lower(accounts.account_type_id) in ('income','othincome','expense','othexpense','cogs') then true\n      else false \n        end as is_income_statement,\n    case\n      when lower(accounts.account_type_id) in ('acctrec', 'bank', 'deferexpense', 'fixedasset', 'othasset', 'othcurrasset', 'unbilledrec') then 'Asset'\n      when lower(accounts.account_type_id) in ('cogs', 'expense', 'othexpense') then 'Expense'\n      when lower(accounts.account_type_id) in ('income', 'othincome') then 'Income'\n      when lower(accounts.account_type_id) in ('acctpay', 'credcard', 'deferrevenue', 'longtermliab', 'othcurrliab') then 'Liability'\n      when lower(accounts.account_type_id) in ('equity', 'retained_earnings', 'net_income') then 'Equity'\n      when lower(accounts.account_type_id) in ('nonposting', 'stat') then 'Other'\n      else null \n        end as account_category\n  from transactions_in_every_calculation_period_w_exchange_rates\n\n  left join accounts\n    on accounts.account_id = transactions_in_every_calculation_period_w_exchange_rates.account_id \n),\n\nsurrogate_key as ( \n   -- add 'source_relation' when combining with union schema\n  \n  \n\n  select \n    *,\n    md5(cast(coalesce(cast(transaction_line_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transaction_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(reporting_accounting_period_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(to_subsidiary_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(accounting_book_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as tran_with_converted_amounts_id\n\n  from transactions_with_converted_amounts\n)\n\nselect * \nfrom surrogate_key", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"int_netsuite2__tran_with_converted_amounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:42:00.312043Z", "completed_at": "2024-09-16T15:42:01.374178Z"}, {"name": "execute", "started_at": "2024-09-16T15:42:01.374764Z", "completed_at": "2024-09-16T15:42:01.374771Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0780549049377441, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.netsuite2__income_statement", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_netsuite2__accounts as (\n\n\nwith accounts as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounts\"\n),\n\naccount_types as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__account_types\"\n),\n\njoined as (\n\n    select \n        accounts.*,\n        account_types.type_name,\n        account_types.is_balancesheet,\n        account_types.is_leftside\n\n    from accounts\n    left join account_types\n        on accounts.account_type_id = account_types.account_type_id\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__accounting_periods as (\n\n\nwith accounting_periods as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_periods\"\n),\n\naccounting_period_fiscal_calendars as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_period_fiscal_cal\"\n),\n\njoined as (\n\n    select \n        accounting_periods.*,\n        accounting_period_fiscal_calendars.fiscal_calendar_id\n\n    from accounting_periods\n    left join accounting_period_fiscal_calendars\n        on accounting_periods.accounting_period_id = accounting_period_fiscal_calendars.accounting_period_id\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__transaction_lines as (\n\n\nwith transaction_lines as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transaction_lines\"\n),\n\ntransaction_accounting_lines as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transaction_accounting_lines\"\n),\n\n\naccounting_books as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_books\"\n), \n\n\njoined as (\n\n    select \n        transaction_lines.*,\n        transaction_accounting_lines.account_id,\n\n        \n        transaction_accounting_lines.accounting_book_id,\n        accounting_books.accounting_book_name,\n        \n        \n        transaction_accounting_lines.amount,\n        transaction_accounting_lines.credit_amount,\n        transaction_accounting_lines.debit_amount,\n        transaction_accounting_lines.paid_amount,\n        transaction_accounting_lines.unpaid_amount,\n        transaction_accounting_lines.is_posting\n\n    from transaction_lines\n    left join transaction_accounting_lines\n        on transaction_lines.transaction_line_id = transaction_accounting_lines.transaction_line_id\n        and transaction_lines.transaction_id = transaction_accounting_lines.transaction_id\n        \n    \n    left join accounting_books\n        on accounting_books.accounting_book_id = transaction_accounting_lines.accounting_book_id\n\n    union all\n\n    select\n        transaction_lines.*,\n        transaction_accounting_lines.account_id,\n        accounting_books.accounting_book_id,\n        accounting_books.accounting_book_name,\n        transaction_accounting_lines.amount,\n        transaction_accounting_lines.credit_amount,\n        transaction_accounting_lines.debit_amount,\n        transaction_accounting_lines.paid_amount,\n        transaction_accounting_lines.unpaid_amount,\n        transaction_accounting_lines.is_posting\n\n    from transaction_lines\n    left join transaction_accounting_lines\n        on transaction_lines.transaction_line_id = transaction_accounting_lines.transaction_line_id\n        and transaction_lines.transaction_id = transaction_accounting_lines.transaction_id\n    left join accounting_books\n        on accounting_books.base_book_id = transaction_accounting_lines.accounting_book_id\n    where accounting_books.base_book_id is not null\n    \n\n)\n\nselect *\nfrom joined\n), transactions_with_converted_amounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"int_netsuite2__tran_with_converted_amounts\"\n\n    \n    where _fivetran_synced_date >= \n\n\n\n    \n\n    \n\n    cast('2010-01-01' as date) + ((interval '1 day') * (-3))\n\n\n\n\n    \n), \n\n--Below is only used if income statement transaction detail columns are specified dbt_project.yml file.\n\n\naccounts as (\n    select * \n    from __dbt__cte__int_netsuite2__accounts\n), \n\naccounting_periods as (\n    select * \n    from __dbt__cte__int_netsuite2__accounting_periods\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__subsidiaries\"\n),\n\ntransaction_lines as (\n    select * \n    from __dbt__cte__int_netsuite2__transaction_lines\n),\n\nclasses as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__classes\"\n),\n\nlocations as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__locations\"\n),\n\ndepartments as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__departments\"\n),\n\nincome_statement as (\n    select\n        transactions_with_converted_amounts.transaction_id,\n        transactions_with_converted_amounts.transaction_line_id,\n        transactions_with_converted_amounts._fivetran_synced_date,\n\n        \n        transactions_with_converted_amounts.accounting_book_id,\n        transactions_with_converted_amounts.accounting_book_name,\n        \n\n        \n        transactions_with_converted_amounts.to_subsidiary_id,\n        transactions_with_converted_amounts.to_subsidiary_name,\n        transactions_with_converted_amounts.to_subsidiary_currency_symbol,\n        \n\n        reporting_accounting_periods.accounting_period_id as accounting_period_id,\n        reporting_accounting_periods.ending_at as accounting_period_ending,\n        reporting_accounting_periods.name as accounting_period_name,\n        reporting_accounting_periods.is_adjustment as is_accounting_period_adjustment,\n        reporting_accounting_periods.is_closed as is_accounting_period_closed,\n        accounts.name as account_name,\n        accounts.type_name as account_type_name,\n        accounts.account_type_id,\n        accounts.account_id as account_id,\n        accounts.account_number,\n        subsidiaries.subsidiary_id,\n        subsidiaries.full_name as subsidiary_full_name,\n        subsidiaries.name as subsidiary_name\n\n        --The below script allows for accounts table pass through columns.\n        \n\n\n\n,\n\n        accounts.account_number || '-' || accounts.name as account_number_and_name,\n        classes.full_name as class_full_name\n\n        --The below script allows for accounts table pass through columns.\n        \n\n\n\n,\n\n        locations.full_name as location_full_name,\n        departments.full_name as department_full_name\n\n        --The below script allows for departments table pass through columns.\n        \n\n\n\n,\n\n        transactions_with_converted_amounts.account_category as account_category,\n        case when lower(accounts.account_type_id) = 'income' then 1\n            when lower(accounts.account_type_id) = 'cogs' then 2\n            when lower(accounts.account_type_id) = 'expense' then 3\n            when lower(accounts.account_type_id) = 'othincome' then 4\n            when lower(accounts.account_type_id) = 'othexpense' then 5\n            else null\n            end as income_statement_sort_helper\n\n        --Below is only used if income statement transaction detail columns are specified dbt_project.yml file.\n        \n\n        , -converted_amount_using_transaction_accounting_period as converted_amount\n        \n    from transactions_with_converted_amounts\n\n    join transaction_lines as transaction_lines\n        on transaction_lines.transaction_line_id = transactions_with_converted_amounts.transaction_line_id\n            and transaction_lines.transaction_id = transactions_with_converted_amounts.transaction_id\n\n            \n            and transaction_lines.accounting_book_id = transactions_with_converted_amounts.accounting_book_id\n            \n\n    left join departments \n        on departments.department_id = transaction_lines.department_id\n    \n    left join accounts \n        on accounts.account_id = transactions_with_converted_amounts.account_id\n\n    left join locations\n        on locations.location_id = transaction_lines.location_id\n\n    left join classes \n        on classes.class_id = transaction_lines.class_id\n\n    left join accounting_periods as reporting_accounting_periods \n        on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n    \n    left join subsidiaries\n        on transactions_with_converted_amounts.subsidiary_id = subsidiaries.subsidiary_id\n\n    --Below is only used if income statement transaction detail columns are specified dbt_project.yml file.\n    \n\n    where reporting_accounting_periods.fiscal_calendar_id  = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n        and transactions_with_converted_amounts.transaction_accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n        and transactions_with_converted_amounts.is_income_statement\n),\n\nsurrogate_key as ( \n    \n    \n    \n\n    select \n        *,\n        md5(cast(coalesce(cast(transaction_line_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transaction_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(accounting_period_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(account_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(to_subsidiary_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(accounting_book_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as income_statement_id\n\n    from income_statement\n)\n\nselect *\nfrom surrogate_key", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite2__income_statement\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:42:00.325056Z", "completed_at": "2024-09-16T15:42:01.375930Z"}, {"name": "execute", "started_at": "2024-09-16T15:42:01.377476Z", "completed_at": "2024-09-16T15:42:01.377480Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0847511291503906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.netsuite2__transaction_details", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_netsuite2__accounts as (\n\n\nwith accounts as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounts\"\n),\n\naccount_types as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__account_types\"\n),\n\njoined as (\n\n    select \n        accounts.*,\n        account_types.type_name,\n        account_types.is_balancesheet,\n        account_types.is_leftside\n\n    from accounts\n    left join account_types\n        on accounts.account_type_id = account_types.account_type_id\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__accounting_periods as (\n\n\nwith accounting_periods as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_periods\"\n),\n\naccounting_period_fiscal_calendars as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_period_fiscal_cal\"\n),\n\njoined as (\n\n    select \n        accounting_periods.*,\n        accounting_period_fiscal_calendars.fiscal_calendar_id\n\n    from accounting_periods\n    left join accounting_period_fiscal_calendars\n        on accounting_periods.accounting_period_id = accounting_period_fiscal_calendars.accounting_period_id\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__transaction_lines as (\n\n\nwith transaction_lines as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transaction_lines\"\n),\n\ntransaction_accounting_lines as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transaction_accounting_lines\"\n),\n\n\naccounting_books as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_books\"\n), \n\n\njoined as (\n\n    select \n        transaction_lines.*,\n        transaction_accounting_lines.account_id,\n\n        \n        transaction_accounting_lines.accounting_book_id,\n        accounting_books.accounting_book_name,\n        \n        \n        transaction_accounting_lines.amount,\n        transaction_accounting_lines.credit_amount,\n        transaction_accounting_lines.debit_amount,\n        transaction_accounting_lines.paid_amount,\n        transaction_accounting_lines.unpaid_amount,\n        transaction_accounting_lines.is_posting\n\n    from transaction_lines\n    left join transaction_accounting_lines\n        on transaction_lines.transaction_line_id = transaction_accounting_lines.transaction_line_id\n        and transaction_lines.transaction_id = transaction_accounting_lines.transaction_id\n        \n    \n    left join accounting_books\n        on accounting_books.accounting_book_id = transaction_accounting_lines.accounting_book_id\n\n    union all\n\n    select\n        transaction_lines.*,\n        transaction_accounting_lines.account_id,\n        accounting_books.accounting_book_id,\n        accounting_books.accounting_book_name,\n        transaction_accounting_lines.amount,\n        transaction_accounting_lines.credit_amount,\n        transaction_accounting_lines.debit_amount,\n        transaction_accounting_lines.paid_amount,\n        transaction_accounting_lines.unpaid_amount,\n        transaction_accounting_lines.is_posting\n\n    from transaction_lines\n    left join transaction_accounting_lines\n        on transaction_lines.transaction_line_id = transaction_accounting_lines.transaction_line_id\n        and transaction_lines.transaction_id = transaction_accounting_lines.transaction_id\n    left join accounting_books\n        on accounting_books.base_book_id = transaction_accounting_lines.accounting_book_id\n    where accounting_books.base_book_id is not null\n    \n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__customers as (\n\n\nwith customers as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__customers\"\n),\n\nentity_address as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__entity_address\"\n),\n\njoined as (\n\n    select \n        customers.*,\n        entity_address.city,\n        entity_address.state,\n        entity_address.zipcode,\n        entity_address.country\n\n    from customers\n    left join entity_address\n        on coalesce(customers.default_billing_address_id, customers.default_shipping_address_id) = entity_address.nkey\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__locations as (\n\n\nwith locations as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__locations\"\n),\n\nlocation_main_address as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__location_main_address\"\n),\n\njoined as (\n\n    select \n        locations.*,\n        location_main_address.city,\n        location_main_address.state,\n        location_main_address.zipcode,\n        location_main_address.country\n\n    from locations\n    left join location_main_address\n        on locations.main_address_id = location_main_address.nkey\n)\n\nselect *\nfrom joined\n), transactions_with_converted_amounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"int_netsuite2__tran_with_converted_amounts\"\n\n    \n    where _fivetran_synced_date >= \n\n\n\n    \n\n    \n\n    cast('2010-01-01' as date) + ((interval '1 day') * (-3))\n\n\n\n\n    \n),\n\naccounts as (\n    select * \n    from __dbt__cte__int_netsuite2__accounts\n),\n\naccounting_periods as (\n    select * \n    from __dbt__cte__int_netsuite2__accounting_periods\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__subsidiaries\"\n),\n\ntransaction_lines as (\n    select * \n    from __dbt__cte__int_netsuite2__transaction_lines\n),\n\ntransactions as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__transactions\"\n\n    \n    where _fivetran_synced_date >= \n\n\n\n    \n\n    \n\n    cast('2010-01-01' as date) + ((interval '1 day') * (-3))\n\n\n\n\n    \n),\n\ncustomers as (\n    select * \n    from __dbt__cte__int_netsuite2__customers\n),\n\nitems as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__items\"\n),\n\nlocations as (\n    select * \n    from __dbt__cte__int_netsuite2__locations\n),\n\nvendors as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__vendors\"\n),\n\n\nvendor_categories as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__vendor_categories\"\n),\n\n\ndepartments as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__departments\"\n),\n\ncurrencies as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__currencies\"\n),\n\nclasses as (\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__classes\"\n),\n\ntransaction_details as (\n  select\n\n    \n    transaction_lines.accounting_book_id,\n    transaction_lines.accounting_book_name,\n    \n\n    \n    transactions_with_converted_amounts.to_subsidiary_id,\n    transactions_with_converted_amounts.to_subsidiary_name,\n    transactions_with_converted_amounts.to_subsidiary_currency_symbol,\n    \n    \n    transaction_lines.transaction_line_id,\n    transaction_lines.memo as transaction_memo,\n    not transaction_lines.is_posting as is_transaction_non_posting,\n    transaction_lines.is_main_line,\n    transaction_lines.is_tax_line,\n    transaction_lines.is_closed,\n    transactions.transaction_id,\n    transactions.status as transaction_status,\n    transactions.transaction_date,\n    transactions.due_date_at as transaction_due_date,\n    transactions.transaction_type as transaction_type,\n    transactions._fivetran_synced_date,\n    transactions.transaction_number,\n    coalesce(transaction_lines.entity_id, transactions.entity_id) as entity_id,\n    transactions.is_intercompany_adjustment as is_transaction_intercompany_adjustment\n\n    --The below script allows for transactions table pass through columns.\n    \n\n\n\n\n\n    --The below script allows for transaction lines table pass through columns.\n    \n\n\n\n,\n\n    accounting_periods.ending_at as accounting_period_ending,\n    accounting_periods.name as accounting_period_name,\n    accounting_periods.accounting_period_id as accounting_period_id,\n    accounting_periods.is_adjustment as is_accounting_period_adjustment,\n    accounting_periods.is_closed as is_accounting_period_closed,\n    accounts.name as account_name,\n    accounts.type_name as account_type_name,\n    accounts.account_type_id,\n    accounts.account_id as account_id,\n    accounts.account_number\n\n    --The below script allows for accounts table pass through columns.\n    \n\n\n\n,\n\n    accounts.is_leftside as is_account_leftside,\n    lower(accounts.account_type_id) = 'acctpay' as is_accounts_payable,\n    lower(accounts.account_type_id) = 'acctrec' as is_accounts_receivable,\n    accounts.is_eliminate as is_account_intercompany,\n    coalesce(parent_account.name, accounts.name) as parent_account_name,\n    lower(accounts.account_type_id) in ('expense', 'othexpense', 'deferexpense') as is_expense_account,\n    lower(accounts.account_type_id) in ('income', 'othincome') as is_income_account,\n    case \n      when lower(transactions.transaction_type) in ('custinvc', 'custcred') then customers__transactions.alt_name\n      else customers__transaction_lines.alt_name\n        end as customer_alt_name,\n    case \n      when lower(transactions.transaction_type) in ('custinvc', 'custcred') then customers__transactions.company_name\n      else customers__transaction_lines.company_name\n        end as company_name,\n    case \n      when lower(transactions.transaction_type) in ('custinvc', 'custcred') then customers__transactions.city\n      else customers__transaction_lines.city\n        end as customer_city,\n    case \n      when lower(transactions.transaction_type) in ('custinvc', 'custcred') then customers__transactions.state\n      else customers__transaction_lines.state\n        end as customer_state,\n    case \n      when lower(transactions.transaction_type) in ('custinvc', 'custcred') then customers__transactions.zipcode\n      else customers__transaction_lines.zipcode\n        end as customer_zipcode,\n    case \n      when lower(transactions.transaction_type) in ('custinvc', 'custcred') then customers__transactions.country\n      else customers__transaction_lines.country\n        end as customer_country,\n    case \n      when lower(transactions.transaction_type) in ('custinvc', 'custcred') then customers__transactions.date_first_order_at\n      else customers__transaction_lines.date_first_order_at\n        end as customer_date_first_order,\n    case \n      when lower(transactions.transaction_type) in ('custinvc', 'custcred') then customers__transactions.customer_external_id\n      else customers__transaction_lines.customer_external_id\n        end as customer_external_id,\n    classes.full_name as class_full_name,\n    transaction_lines.item_id,\n    items.name as item_name,\n    items.type_name as item_type_name,\n    items.sales_description,\n    locations.name as location_name,\n    locations.city as location_city,\n    locations.country as location_country,\n    \n    case \n      when lower(transactions.transaction_type) in ('vendbill', 'vendcred') then vendor_categories__transactions.name\n      else vendor_categories__transaction_lines.name\n        end as vendor_category_name,\n    \n    case \n      when lower(transactions.transaction_type) in ('vendbill', 'vendcred') then vendors__transactions.alt_name\n      else vendors__transaction_lines.alt_name\n        end as vendor_alt_name,\n    case \n      when lower(transactions.transaction_type) in ('vendbill', 'vendcred') then vendors__transactions.company_name\n      else vendors__transaction_lines.company_name\n        end as vendor_name,\n    case \n      when lower(transactions.transaction_type) in ('vendbill', 'vendcred') then vendors__transactions.create_date_at\n      else vendors__transaction_lines.create_date_at\n        end as vendor_create_date,\n    currencies.name as currency_name,\n    currencies.symbol as currency_symbol,\n    transaction_lines.department_id,\n    departments.name as department_name\n\n    --The below script allows for departments table pass through columns.\n    \n\n\n\n,\n\n    subsidiaries.subsidiary_id,\n    subsidiaries.name as subsidiary_name,\n    \n    case\n      when lower(accounts.account_type_id) in ('income', 'othincome') then -transactions_with_converted_amounts.converted_amount_using_transaction_accounting_period\n      else transactions_with_converted_amounts.converted_amount_using_transaction_accounting_period\n        end as converted_amount,\n    case\n      when lower(accounts.account_type_id) in ('income', 'othincome') then -transaction_lines.amount\n      else transaction_lines.amount\n        end as transaction_amount\n  from transaction_lines\n\n  join transactions\n    on transactions.transaction_id = transaction_lines.transaction_id\n\n  left join transactions_with_converted_amounts\n    on transactions_with_converted_amounts.transaction_line_id = transaction_lines.transaction_line_id\n      and transactions_with_converted_amounts.transaction_id = transaction_lines.transaction_id\n      and transactions_with_converted_amounts.transaction_accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n      \n      \n      and transactions_with_converted_amounts.accounting_book_id = transaction_lines.accounting_book_id\n      \n\n  left join accounts \n    on accounts.account_id = transaction_lines.account_id\n\n  left join accounts as parent_account \n    on parent_account.account_id = accounts.parent_id\n\n  left join accounting_periods \n    on accounting_periods.accounting_period_id = transactions.accounting_period_id\n\n  left join customers customers__transactions\n    on customers__transactions.customer_id = transactions.entity_id\n\n  left join customers customers__transaction_lines\n    on customers__transaction_lines.customer_id = transaction_lines.entity_id\n  \n  left join classes\n    on classes.class_id = transaction_lines.class_id\n\n  left join items \n    on items.item_id = transaction_lines.item_id\n\n  left join locations \n    on locations.location_id = transaction_lines.location_id\n\n  left join vendors vendors__transactions\n    on vendors__transactions.vendor_id = transactions.entity_id\n\n  left join vendors vendors__transaction_lines\n    on vendors__transaction_lines.vendor_id = transaction_lines.entity_id\n\n  \n  left join vendor_categories vendor_categories__transactions\n    on vendor_categories__transactions.vendor_category_id = vendors__transactions.vendor_category_id\n\n  left join vendor_categories vendor_categories__transaction_lines\n    on vendor_categories__transaction_lines.vendor_category_id = vendors__transaction_lines.vendor_category_id\n  \n\n  left join currencies \n    on currencies.currency_id = transactions.currency_id\n\n  left join departments \n    on departments.department_id = transaction_lines.department_id\n\n  join subsidiaries \n    on subsidiaries.subsidiary_id = transaction_lines.subsidiary_id\n    \n  where (accounting_periods.fiscal_calendar_id is null\n    or accounting_periods.fiscal_calendar_id  = (select fiscal_calendar_id from subsidiaries where parent_id is null))\n),\n\nsurrogate_key as ( \n    \n    \n    \n\n    select \n        *,\n        md5(cast(coalesce(cast(transaction_line_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transaction_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(to_subsidiary_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(accounting_book_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as transaction_details_id\n\n    from transaction_details\n)\n\nselect *\nfrom surrogate_key", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite2__transaction_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:42:00.298794Z", "completed_at": "2024-09-16T15:42:01.376208Z"}, {"name": "execute", "started_at": "2024-09-16T15:42:01.378437Z", "completed_at": "2024-09-16T15:42:01.378441Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.0893211364746094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.netsuite2__balance_sheet", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_netsuite2__accounts as (\n\n\nwith accounts as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounts\"\n),\n\naccount_types as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__account_types\"\n),\n\njoined as (\n\n    select \n        accounts.*,\n        account_types.type_name,\n        account_types.is_balancesheet,\n        account_types.is_leftside\n\n    from accounts\n    left join account_types\n        on accounts.account_type_id = account_types.account_type_id\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__accounting_periods as (\n\n\nwith accounting_periods as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_periods\"\n),\n\naccounting_period_fiscal_calendars as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__accounting_period_fiscal_cal\"\n),\n\njoined as (\n\n    select \n        accounting_periods.*,\n        accounting_period_fiscal_calendars.fiscal_calendar_id\n\n    from accounting_periods\n    left join accounting_period_fiscal_calendars\n        on accounting_periods.accounting_period_id = accounting_period_fiscal_calendars.accounting_period_id\n)\n\nselect *\nfrom joined\n), transactions_with_converted_amounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"int_netsuite2__tran_with_converted_amounts\"\n\n    \n    where _fivetran_synced_date >= \n\n\n\n    \n\n    \n\n    cast('2010-01-01' as date) + ((interval '1 day') * (-3))\n\n\n\n\n    \n), \n\n--Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n\n\naccounts as (\n    select * \n    from __dbt__cte__int_netsuite2__accounts\n), \n\naccounting_periods as (\n    select * \n    from __dbt__cte__int_netsuite2__accounting_periods\n), \n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"stg_netsuite2__subsidiaries\"\n),\n\nbalance_sheet as ( \n    select\n        transactions_with_converted_amounts.transaction_id,\n        transactions_with_converted_amounts.transaction_line_id,\n        transactions_with_converted_amounts.subsidiary_id,\n        transactions_with_converted_amounts._fivetran_synced_date,\n        subsidiaries.name as subsidiary_name,\n\n        \n        transactions_with_converted_amounts.accounting_book_id,\n        transactions_with_converted_amounts.accounting_book_name,\n        \n        \n        \n        transactions_with_converted_amounts.to_subsidiary_id,\n        transactions_with_converted_amounts.to_subsidiary_name,\n        transactions_with_converted_amounts.to_subsidiary_currency_symbol,\n        \n\n        reporting_accounting_periods.accounting_period_id as accounting_period_id,\n        reporting_accounting_periods.ending_at as accounting_period_ending,\n        reporting_accounting_periods.name as accounting_period_name,\n        reporting_accounting_periods.is_adjustment as is_accounting_period_adjustment,\n        reporting_accounting_periods.is_closed as is_accounting_period_closed,\n        transactions_with_converted_amounts.account_category as account_category,\n        case\n        when (not accounts.is_balancesheet \n                and date_trunc('year', reporting_accounting_periods.starting_at) = date_trunc('year', transaction_accounting_periods.starting_at) \n                and reporting_accounting_periods.fiscal_calendar_id = transaction_accounting_periods.fiscal_calendar_id) then 'Net Income'\n        when not accounts.is_balancesheet then 'Retained Earnings'\n        else accounts.name\n            end as account_name,\n        case\n        when (not accounts.is_balancesheet \n                and date_trunc('year', reporting_accounting_periods.starting_at) = date_trunc('year', transaction_accounting_periods.starting_at) \n                and reporting_accounting_periods.fiscal_calendar_id = transaction_accounting_periods.fiscal_calendar_id) then 'Net Income'\n        when not accounts.is_balancesheet then 'Retained Earnings'\n        when lower(accounts.special_account_type_id) = 'retearnings' then 'Retained Earnings'\n        when lower(accounts.special_account_type_id) in ('cta-e', 'cumultransadj') then 'Cumulative Translation Adjustment'\n        else accounts.type_name\n            end as account_type_name,\n        case\n        when (not accounts.is_balancesheet \n                and date_trunc('year', reporting_accounting_periods.starting_at) = date_trunc('year', transaction_accounting_periods.starting_at) \n                and reporting_accounting_periods.fiscal_calendar_id = transaction_accounting_periods.fiscal_calendar_id) then 'net_income'\n        when not accounts.is_balancesheet then 'retained_earnings'\n        when lower(accounts.special_account_type_id) = 'retearnings' then 'retained_earnings'\n        when lower(accounts.special_account_type_id) in ('cta-e', 'cumultransadj') then 'cumulative_translation_adjustment'\n        else accounts.account_type_id\n            end as account_type_id,\n        case\n        when not accounts.is_balancesheet then null\n        else accounts.account_id\n            end as account_id,\n        case\n        when not accounts.is_balancesheet then null\n        else accounts.account_number\n            end as account_number\n        \n        --The below script allows for accounts table pass through columns.\n        \n\n\n\n,\n\n        case\n        when not accounts.is_balancesheet and lower(accounts.general_rate_type) in ('historical', 'average') then -converted_amount_using_transaction_accounting_period\n        when not accounts.is_balancesheet then -converted_amount_using_reporting_month\n        when accounts.is_balancesheet and not accounts.is_leftside and lower(accounts.general_rate_type) in ('historical', 'average') then -converted_amount_using_transaction_accounting_period\n        when accounts.is_balancesheet and accounts.is_leftside and lower(accounts.general_rate_type) in ('historical', 'average') then converted_amount_using_transaction_accounting_period\n        when accounts.is_balancesheet and not accounts.is_leftside then -converted_amount_using_reporting_month\n        when accounts.is_balancesheet and accounts.is_leftside then converted_amount_using_reporting_month\n        else 0\n            end as converted_amount,\n\n        case\n        when lower(accounts.account_type_id) = 'bank' then 1\n        when lower(accounts.account_type_id) = 'acctrec' then 2\n        when lower(accounts.account_type_id) = 'unbilledrec' then 3\n        when lower(accounts.account_type_id) = 'othcurrasset' then 4\n        when lower(accounts.account_type_id) = 'fixedasset' then 5\n        when lower(accounts.account_type_id) = 'othasset' then 6\n        when lower(accounts.account_type_id) = 'deferexpense' then 7\n        when lower(accounts.account_type_id) = 'acctpay' then 8\n        when lower(accounts.account_type_id) = 'credcard' then 9\n        when lower(accounts.account_type_id) = 'othcurrliab' then 10\n        when lower(accounts.account_type_id) = 'longtermliab' then 11\n        when lower(accounts.account_type_id) = 'deferrevenue' then 12\n        when lower(accounts.special_account_type_id) = 'retearnings' then 14\n        when lower(accounts.special_account_type_id) in ('cta-e', 'cumultransadj') then 16\n        when lower(accounts.account_type_id) = 'equity' then 13\n        when (not accounts.is_balancesheet \n                and date_trunc('year', reporting_accounting_periods.starting_at) = date_trunc('year', transaction_accounting_periods.starting_at) \n                and reporting_accounting_periods.fiscal_calendar_id = transaction_accounting_periods.fiscal_calendar_id) then 15\n        when not accounts.is_balancesheet then 14\n        else null\n            end as balance_sheet_sort_helper\n\n    --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n    \n\n    from transactions_with_converted_amounts\n    \n    --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n    \n\n\n    left join accounts \n        on accounts.account_id = transactions_with_converted_amounts.account_id\n\n    left join accounting_periods as reporting_accounting_periods \n        on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n\n    left join accounting_periods as transaction_accounting_periods \n        on transaction_accounting_periods.accounting_period_id = transactions_with_converted_amounts.transaction_accounting_period_id\n\n    left join subsidiaries\n        on subsidiaries.subsidiary_id = transactions_with_converted_amounts.subsidiary_id\n\n    where reporting_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n        and transaction_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n        and (accounts.is_balancesheet\n        or transactions_with_converted_amounts.is_income_statement)\n\n    union all\n\n    select\n        transactions_with_converted_amounts.transaction_id,\n        transactions_with_converted_amounts.transaction_line_id,\n        transactions_with_converted_amounts.subsidiary_id,\n        transactions_with_converted_amounts._fivetran_synced_date,\n        subsidiaries.name as subsidiary_name,\n\n        \n        transactions_with_converted_amounts.accounting_book_id,\n        transactions_with_converted_amounts.accounting_book_name,\n        \n\n        \n        transactions_with_converted_amounts.to_subsidiary_id,\n        transactions_with_converted_amounts.to_subsidiary_name,\n        transactions_with_converted_amounts.to_subsidiary_currency_symbol,\n        \n        \n        reporting_accounting_periods.accounting_period_id as accounting_period_id,\n        reporting_accounting_periods.ending_at as accounting_period_ending,\n        reporting_accounting_periods.name as accounting_period_name,\n        reporting_accounting_periods.is_adjustment as is_accounting_period_adjustment,\n        reporting_accounting_periods.is_closed as is_accounting_period_closed,\n        'Equity' as account_category,\n        'Cumulative Translation Adjustment' as account_name,\n        'Cumulative Translation Adjustment' as account_type_name,\n        'cumulative_translation_adjustment' as account_type_id,\n        null as account_id,\n        null as account_number,\n\n        \n\n        case\n        when lower(accounts.general_rate_type) in ('historical', 'average') then converted_amount_using_transaction_accounting_period\n        else converted_amount_using_reporting_month\n            end as converted_amount,\n        16 as balance_sheet_sort_helper\n\n        --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n        \n\n    from transactions_with_converted_amounts\n\n    --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n    \n\n    left join accounts\n        on accounts.account_id = transactions_with_converted_amounts.account_id\n\n    left join accounting_periods as reporting_accounting_periods \n        on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n\n    left join subsidiaries\n        on subsidiaries.subsidiary_id = transactions_with_converted_amounts.subsidiary_id\n\n    where reporting_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n        and (accounts.is_balancesheet\n        or transactions_with_converted_amounts.is_income_statement)\n    ),\n\n    surrogate_key as ( \n    \n    \n    \n\n    select \n        *,\n        md5(cast(coalesce(cast(transaction_line_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transaction_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(accounting_period_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(account_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(to_subsidiary_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(accounting_book_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as balance_sheet_id\n\n    from balance_sheet\n)\n\nselect *\nfrom surrogate_key", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite2__balance_sheet\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:42:01.379515Z", "completed_at": "2024-09-16T15:42:01.387268Z"}, {"name": "execute", "started_at": "2024-09-16T15:42:01.389467Z", "completed_at": "2024-09-16T15:42:01.389471Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015214920043945312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__income_statement_income_statement_id.4c1a7c959e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect income_statement_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite2__income_statement\"\nwhere income_statement_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:42:01.382949Z", "completed_at": "2024-09-16T15:42:01.387545Z"}, {"name": "execute", "started_at": "2024-09-16T15:42:01.389704Z", "completed_at": "2024-09-16T15:42:01.389707Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015313148498535156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__income_statement_transaction_id.0ecd59a9ef", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite2__income_statement\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:42:01.390130Z", "completed_at": "2024-09-16T15:42:01.396808Z"}, {"name": "execute", "started_at": "2024-09-16T15:42:01.398587Z", "completed_at": "2024-09-16T15:42:01.398591Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015974998474121094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__income_statement_transaction_line_id.8fdd5b1706", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite2__income_statement\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:42:01.393725Z", "completed_at": "2024-09-16T15:42:01.397960Z"}, {"name": "execute", "started_at": "2024-09-16T15:42:01.404389Z", "completed_at": "2024-09-16T15:42:01.404392Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01631927490234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.unique_netsuite2__income_statement_income_statement_id.20a530fc68", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    income_statement_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite2__income_statement\"\nwhere income_statement_id is not null\ngroup by income_statement_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:42:01.399013Z", "completed_at": "2024-09-16T15:42:01.405869Z"}, {"name": "execute", "started_at": "2024-09-16T15:42:01.410803Z", "completed_at": "2024-09-16T15:42:01.410808Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014751911163330078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__transaction_details_transaction_details_id.a24a6eb6c0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_details_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite2__transaction_details\"\nwhere transaction_details_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:42:01.401499Z", "completed_at": "2024-09-16T15:42:01.406323Z"}, {"name": "execute", "started_at": "2024-09-16T15:42:01.411276Z", "completed_at": "2024-09-16T15:42:01.411280Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017641067504882812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__transaction_details_transaction_id.e9ee05db79", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite2__transaction_details\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:42:01.407508Z", "completed_at": "2024-09-16T15:42:01.415381Z"}, {"name": "execute", "started_at": "2024-09-16T15:42:01.417318Z", "completed_at": "2024-09-16T15:42:01.417323Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012752056121826172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__transaction_details_transaction_line_id.12a67b5f36", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite2__transaction_details\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:42:01.412190Z", "completed_at": "2024-09-16T15:42:01.416731Z"}, {"name": "execute", "started_at": "2024-09-16T15:42:01.421140Z", "completed_at": "2024-09-16T15:42:01.421144Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017249107360839844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.unique_netsuite2__transaction_details_transaction_details_id.cb70f22d04", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_details_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite2__transaction_details\"\nwhere transaction_details_id is not null\ngroup by transaction_details_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:42:01.418598Z", "completed_at": "2024-09-16T15:42:01.424992Z"}, {"name": "execute", "started_at": "2024-09-16T15:42:01.429331Z", "completed_at": "2024-09-16T15:42:01.429336Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013841867446899414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__balance_sheet_balance_sheet_id.0e299c6c01", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect balance_sheet_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite2__balance_sheet\"\nwhere balance_sheet_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:42:01.421383Z", "completed_at": "2024-09-16T15:42:01.425486Z"}, {"name": "execute", "started_at": "2024-09-16T15:42:01.429781Z", "completed_at": "2024-09-16T15:42:01.429784Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01687788963317871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__balance_sheet_transaction_id.4e0a408da1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite2__balance_sheet\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:42:01.426745Z", "completed_at": "2024-09-16T15:42:01.434169Z"}, {"name": "execute", "started_at": "2024-09-16T15:42:01.434833Z", "completed_at": "2024-09-16T15:42:01.434837Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010853052139282227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__balance_sheet_transaction_line_id.dd5f702ec9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite2__balance_sheet\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-16T15:42:01.430525Z", "completed_at": "2024-09-16T15:42:01.435077Z"}, {"name": "execute", "started_at": "2024-09-16T15:42:01.436016Z", "completed_at": "2024-09-16T15:42:01.436019Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010237932205200195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.unique_netsuite2__balance_sheet_balance_sheet_id.8bb14ebf4a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    balance_sheet_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_dev\".\"netsuite2__balance_sheet\"\nwhere balance_sheet_id is not null\ngroup by balance_sheet_id\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 19.179051160812378, "args": {"partial_parse": true, "print": true, "log_level_file": "debug", "use_colors": true, "quiet": false, "use_colors_file": true, "warn_error_options": {"include": [], "exclude": []}, "favor_state": false, "defer": false, "macro_debugging": false, "introspect": true, "indirect_selection": "eager", "vars": {}, "profiles_dir": "/Users/avinash.kunnath/.dbt", "project_dir": "/Users/avinash.kunnath/Documents/dbt_packages/netsuite/dbt_netsuite/integration_tests", "exclude": [], "static_parser": true, "invocation_command": "dbt docs generate -t postgres", "select": [], "compile": true, "which": "generate", "populate_cache": true, "enable_legacy_logger": false, "cache_selected_only": false, "log_format_file": "debug", "static": false, "empty_catalog": false, "printer_width": 80, "target": "postgres", "log_level": "info", "version_check": true, "show_resource_report": false, "log_format": "default", "send_anonymous_usage_stats": true, "partial_parse_file_diff": true, "log_path": "/Users/avinash.kunnath/Documents/dbt_packages/netsuite/dbt_netsuite/integration_tests/logs", "write_json": true, "log_file_max_bytes": 10485760, "strict_mode": false}}