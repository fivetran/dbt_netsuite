{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.9", "generated_at": "2024-03-19T16:06:07.893656Z", "invocation_id": "c9603260-1458-4795-8cdf-6cab9681c531", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:02.946756Z", "completed_at": "2024-03-19T16:06:02.954343Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:02.976429Z", "completed_at": "2024-03-19T16:06:02.976452Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.033213138580322266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__account_types_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_account_type_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__account_types_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:02.956798Z", "completed_at": "2024-03-19T16:06:02.977271Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:02.981541Z", "completed_at": "2024-03-19T16:06:02.981547Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.030757904052734375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_accounting_book_sub_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounting_book_subsidiaries_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:02.965700Z", "completed_at": "2024-03-19T16:06:02.979546Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:02.983987Z", "completed_at": "2024-03-19T16:06:02.983993Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03312206268310547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_books_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_accounting_book_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounting_books_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:02.972135Z", "completed_at": "2024-03-19T16:06:02.981062Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:02.984715Z", "completed_at": "2024-03-19T16:06:02.984721Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.038012027740478516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_accounting_period_fiscal_cal_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounting_period_fiscal_cal_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:02.986855Z", "completed_at": "2024-03-19T16:06:02.994399Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.002474Z", "completed_at": "2024-03-19T16:06:03.002483Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.024420738220214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_periods_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_accounting_period_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounting_periods_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:02.995093Z", "completed_at": "2024-03-19T16:06:03.006033Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.008445Z", "completed_at": "2024-03-19T16:06:03.008450Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017449140548706055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounts_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_account_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounts_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:02.999534Z", "completed_at": "2024-03-19T16:06:03.007473Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.010086Z", "completed_at": "2024-03-19T16:06:03.010091Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017279863357543945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__classes_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_classification_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__classes_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.002775Z", "completed_at": "2024-03-19T16:06:03.008012Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.010558Z", "completed_at": "2024-03-19T16:06:03.010561Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.020056724548339844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_consolidated_exchange_rate_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__consolidated_exchange_rates_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.011585Z", "completed_at": "2024-03-19T16:06:03.016751Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.025600Z", "completed_at": "2024-03-19T16:06:03.025610Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020792007446289062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__currencies_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_currency_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__currencies_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.017359Z", "completed_at": "2024-03-19T16:06:03.025906Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.031252Z", "completed_at": "2024-03-19T16:06:03.031258Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017902135848999023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__customers_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_customer_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__customers_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.022508Z", "completed_at": "2024-03-19T16:06:03.030487Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.033377Z", "completed_at": "2024-03-19T16:06:03.033381Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018357038497924805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__departments_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_department_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__departments_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.026291Z", "completed_at": "2024-03-19T16:06:03.032042Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.035165Z", "completed_at": "2024-03-19T16:06:03.035172Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.023042678833007812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__entities_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_entities_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__entities_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.035492Z", "completed_at": "2024-03-19T16:06:03.041527Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.050806Z", "completed_at": "2024-03-19T16:06:03.050813Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021637678146362305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__entity_address_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_entity_address_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__entity_address_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.041849Z", "completed_at": "2024-03-19T16:06:03.051057Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.055568Z", "completed_at": "2024-03-19T16:06:03.055572Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0180361270904541, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__items_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_item_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__items_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.046556Z", "completed_at": "2024-03-19T16:06:03.054623Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.057208Z", "completed_at": "2024-03-19T16:06:03.057212Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017444849014282227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__jobs_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_job_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__jobs_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.051373Z", "completed_at": "2024-03-19T16:06:03.056040Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.058559Z", "completed_at": "2024-03-19T16:06:03.058562Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016643047332763672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__location_main_address_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_location_main_address_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__location_main_address_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.058791Z", "completed_at": "2024-03-19T16:06:03.063743Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.070389Z", "completed_at": "2024-03-19T16:06:03.070395Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01761603355407715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__locations_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_location_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__locations_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.064157Z", "completed_at": "2024-03-19T16:06:03.070706Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.075708Z", "completed_at": "2024-03-19T16:06:03.075712Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015458106994628906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__subsidiaries_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_subsidiary_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__subsidiaries_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.067723Z", "completed_at": "2024-03-19T16:06:03.074317Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.076329Z", "completed_at": "2024-03-19T16:06:03.076332Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014707088470458984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__transaction_accounting_lines_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_tran_acct_line_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__transaction_accounting_lines_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.070971Z", "completed_at": "2024-03-19T16:06:03.075466Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.077951Z", "completed_at": "2024-03-19T16:06:03.077954Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015624046325683594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__transaction_lines_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_transaction_line_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__transaction_lines_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.078502Z", "completed_at": "2024-03-19T16:06:03.084093Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.091318Z", "completed_at": "2024-03-19T16:06:03.091327Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018576860427856445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__transactions_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_transaction_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__transactions_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.085480Z", "completed_at": "2024-03-19T16:06:03.095022Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.097121Z", "completed_at": "2024-03-19T16:06:03.097126Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015156984329223633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__vendor_categories_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_vendor_category_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__vendor_categories_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.088417Z", "completed_at": "2024-03-19T16:06:03.095301Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.097371Z", "completed_at": "2024-03-19T16:06:03.097375Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015169143676757812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__vendors_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_vendor_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__vendors_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.091702Z", "completed_at": "2024-03-19T16:06:03.096480Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.098859Z", "completed_at": "2024-03-19T16:06:03.098862Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01824188232421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__accounting_books_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_accounting_books_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounting_books_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.099093Z", "completed_at": "2024-03-19T16:06:03.104582Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.112385Z", "completed_at": "2024-03-19T16:06:03.112392Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01915597915649414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__accounting_periods_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_accounting_periods_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounting_periods_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.105956Z", "completed_at": "2024-03-19T16:06:03.116685Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.118819Z", "completed_at": "2024-03-19T16:06:03.118823Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01925826072692871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__accounts_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_accounts_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounts_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.109654Z", "completed_at": "2024-03-19T16:06:03.116937Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.119057Z", "completed_at": "2024-03-19T16:06:03.119060Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01934814453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__classes_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_classes_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__classes_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.112758Z", "completed_at": "2024-03-19T16:06:03.117722Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.122176Z", "completed_at": "2024-03-19T16:06:03.122187Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01845574378967285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__consolidated_exchange_rates_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_consolidated_exchange_rates_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__consolidated_exchange_rates_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.119300Z", "completed_at": "2024-03-19T16:06:03.124695Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.127439Z", "completed_at": "2024-03-19T16:06:03.127446Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01719498634338379, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__currencies_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_currencies_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__currencies_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.127970Z", "completed_at": "2024-03-19T16:06:03.138434Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.142924Z", "completed_at": "2024-03-19T16:06:03.142932Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03803730010986328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__customers_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_customers_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__customers_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.130878Z", "completed_at": "2024-03-19T16:06:03.138947Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.153966Z", "completed_at": "2024-03-19T16:06:03.154203Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03838086128234863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__departments_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_departments_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__departments_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.134880Z", "completed_at": "2024-03-19T16:06:03.139235Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.162195Z", "completed_at": "2024-03-19T16:06:03.162205Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.038803815841674805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__expense_accounts_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_expense_accounts_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__expense_accounts_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.139745Z", "completed_at": "2024-03-19T16:06:03.162734Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.167058Z", "completed_at": "2024-03-19T16:06:03.167069Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.031205177307128906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__income_accounts_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_income_accounts_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__income_accounts_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.170639Z", "completed_at": "2024-03-19T16:06:03.182914Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.184109Z", "completed_at": "2024-03-19T16:06:03.184117Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017653942108154297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__items_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_items_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__items_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.176173Z", "completed_at": "2024-03-19T16:06:03.183585Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.185685Z", "completed_at": "2024-03-19T16:06:03.185689Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01829695701599121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__subsidiaries_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_subsidiaries_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__subsidiaries_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.173665Z", "completed_at": "2024-03-19T16:06:03.183844Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.185930Z", "completed_at": "2024-03-19T16:06:03.185933Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01936793327331543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__locations_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_locations_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__locations_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.179319Z", "completed_at": "2024-03-19T16:06:03.184333Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.186473Z", "completed_at": "2024-03-19T16:06:03.186476Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009934663772583008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__transaction_lines_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_transaction_lines_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__transaction_lines_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.190582Z", "completed_at": "2024-03-19T16:06:03.199182Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.201770Z", "completed_at": "2024-03-19T16:06:03.201777Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015096902847290039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__transactions_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_transactions_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__transactions_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.199423Z", "completed_at": "2024-03-19T16:06:03.200392Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.202019Z", "completed_at": "2024-03-19T16:06:03.202022Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010001182556152344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_account_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.194357Z", "completed_at": "2024-03-19T16:06:03.201250Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.203599Z", "completed_at": "2024-03-19T16:06:03.203603Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014889001846313477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__vendor_types_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_vendor_types_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__vendor_types_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.196782Z", "completed_at": "2024-03-19T16:06:03.201515Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.203834Z", "completed_at": "2024-03-19T16:06:03.203837Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014958858489990234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__vendors_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_vendors_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__vendors_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.208179Z", "completed_at": "2024-03-19T16:06:03.210418Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.215722Z", "completed_at": "2024-03-19T16:06:03.215728Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011266946792602539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_account_type_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.210778Z", "completed_at": "2024-03-19T16:06:03.211721Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.215954Z", "completed_at": "2024-03-19T16:06:03.215957Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011336803436279297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_accounting_book_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.212913Z", "completed_at": "2024-03-19T16:06:03.213874Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.217456Z", "completed_at": "2024-03-19T16:06:03.217458Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01125192642211914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_accounting_book_sub_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.214293Z", "completed_at": "2024-03-19T16:06:03.215376Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.217671Z", "completed_at": "2024-03-19T16:06:03.217673Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011192083358764648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_accounting_period_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.221282Z", "completed_at": "2024-03-19T16:06:03.222284Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.228130Z", "completed_at": "2024-03-19T16:06:03.228134Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009964704513549805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_accounting_period_fiscal_cal_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.222528Z", "completed_at": "2024-03-19T16:06:03.224174Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.228373Z", "completed_at": "2024-03-19T16:06:03.228376Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010072946548461914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_classification_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.225471Z", "completed_at": "2024-03-19T16:06:03.226509Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.229867Z", "completed_at": "2024-03-19T16:06:03.229870Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01063394546508789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_consolidated_exchange_rate_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.226829Z", "completed_at": "2024-03-19T16:06:03.227832Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.230091Z", "completed_at": "2024-03-19T16:06:03.230093Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010788917541503906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_currency_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.234526Z", "completed_at": "2024-03-19T16:06:03.235784Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.241993Z", "completed_at": "2024-03-19T16:06:03.242003Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01102900505065918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_customer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.236053Z", "completed_at": "2024-03-19T16:06:03.236985Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.242233Z", "completed_at": "2024-03-19T16:06:03.242236Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01121377944946289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_department_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.238356Z", "completed_at": "2024-03-19T16:06:03.239460Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.243923Z", "completed_at": "2024-03-19T16:06:03.243927Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011546850204467773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_entities_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.239776Z", "completed_at": "2024-03-19T16:06:03.241695Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.244190Z", "completed_at": "2024-03-19T16:06:03.244193Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011775016784667969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_entity_address_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.249131Z", "completed_at": "2024-03-19T16:06:03.250295Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.255459Z", "completed_at": "2024-03-19T16:06:03.255468Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010341882705688477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.250593Z", "completed_at": "2024-03-19T16:06:03.251468Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.255735Z", "completed_at": "2024-03-19T16:06:03.255738Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010416984558105469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_job_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.252550Z", "completed_at": "2024-03-19T16:06:03.253645Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.257416Z", "completed_at": "2024-03-19T16:06:03.257420Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010319232940673828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_location_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.254010Z", "completed_at": "2024-03-19T16:06:03.255040Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.257650Z", "completed_at": "2024-03-19T16:06:03.257653Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010471820831298828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_location_main_address_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.262153Z", "completed_at": "2024-03-19T16:06:03.263295Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.270245Z", "completed_at": "2024-03-19T16:06:03.270251Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0117340087890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_subsidiary_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.263674Z", "completed_at": "2024-03-19T16:06:03.265837Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.270486Z", "completed_at": "2024-03-19T16:06:03.270489Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011919975280761719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_tran_acct_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.267239Z", "completed_at": "2024-03-19T16:06:03.268507Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.272422Z", "completed_at": "2024-03-19T16:06:03.272436Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012660026550292969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_transaction_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.268919Z", "completed_at": "2024-03-19T16:06:03.269908Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.272897Z", "completed_at": "2024-03-19T16:06:03.272901Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012957096099853516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_transaction_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.277935Z", "completed_at": "2024-03-19T16:06:03.279163Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.324527Z", "completed_at": "2024-03-19T16:06:03.324535Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05058932304382324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_vendor_category_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.279522Z", "completed_at": "2024-03-19T16:06:03.280648Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.324790Z", "completed_at": "2024-03-19T16:06:03.324793Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05066871643066406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_vendor_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.281921Z", "completed_at": "2024-03-19T16:06:03.284263Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.326500Z", "completed_at": "2024-03-19T16:06:03.326505Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.050597190856933594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_accounting_books_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.284718Z", "completed_at": "2024-03-19T16:06:03.324051Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.326799Z", "completed_at": "2024-03-19T16:06:03.326802Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.05057883262634277, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_accounting_periods_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.330996Z", "completed_at": "2024-03-19T16:06:03.332149Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.336924Z", "completed_at": "2024-03-19T16:06:03.336930Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010999917984008789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_accounts_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.332456Z", "completed_at": "2024-03-19T16:06:03.333316Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.337172Z", "completed_at": "2024-03-19T16:06:03.337175Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011262178421020508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_classes_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.334372Z", "completed_at": "2024-03-19T16:06:03.335324Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.340435Z", "completed_at": "2024-03-19T16:06:03.340440Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011713981628417969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_consolidated_exchange_rates_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.335616Z", "completed_at": "2024-03-19T16:06:03.336590Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.340706Z", "completed_at": "2024-03-19T16:06:03.340709Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011771917343139648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_currencies_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.345482Z", "completed_at": "2024-03-19T16:06:03.347826Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.353546Z", "completed_at": "2024-03-19T16:06:03.353554Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012258052825927734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_customers_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.348288Z", "completed_at": "2024-03-19T16:06:03.349353Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.353798Z", "completed_at": "2024-03-19T16:06:03.353801Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012392997741699219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_departments_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.350672Z", "completed_at": "2024-03-19T16:06:03.351721Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.355775Z", "completed_at": "2024-03-19T16:06:03.355779Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012230873107910156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_expense_accounts_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.352143Z", "completed_at": "2024-03-19T16:06:03.353167Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.356018Z", "completed_at": "2024-03-19T16:06:03.356021Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012237071990966797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_income_accounts_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.360447Z", "completed_at": "2024-03-19T16:06:03.361631Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.367462Z", "completed_at": "2024-03-19T16:06:03.367470Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011116981506347656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_items_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.361940Z", "completed_at": "2024-03-19T16:06:03.362807Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.367776Z", "completed_at": "2024-03-19T16:06:03.367780Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011303901672363281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_locations_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.364820Z", "completed_at": "2024-03-19T16:06:03.365815Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.369579Z", "completed_at": "2024-03-19T16:06:03.369583Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011253118515014648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_subsidiaries_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.366150Z", "completed_at": "2024-03-19T16:06:03.367071Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.369825Z", "completed_at": "2024-03-19T16:06:03.369828Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011369943618774414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_transaction_lines_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.374641Z", "completed_at": "2024-03-19T16:06:03.375826Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.387788Z", "completed_at": "2024-03-19T16:06:03.387799Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017519235610961914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_transactions_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.376126Z", "completed_at": "2024-03-19T16:06:03.377038Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.388104Z", "completed_at": "2024-03-19T16:06:03.388108Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017505645751953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_vendor_types_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.378130Z", "completed_at": "2024-03-19T16:06:03.379137Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.390175Z", "completed_at": "2024-03-19T16:06:03.390180Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017720699310302734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_vendors_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.398496Z", "completed_at": "2024-03-19T16:06:03.645399Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.646128Z", "completed_at": "2024-03-19T16:06:03.646135Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.27550411224365234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_books", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounting_books_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    basebook\n    \n as \n    \n    basebook\n    \n, \n    cast(null as TEXT) as \n    \n    contingentrevenuehandling\n    \n , \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    effectiveperiod\n    \n as \n    \n    effectiveperiod\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isadjustmentonly\n    \n as \n    \n    isadjustmentonly\n    \n, \n    \n    \n    isconsolidated\n    \n as \n    \n    isconsolidated\n    \n, \n    \n    \n    isprimary\n    \n as \n    \n    isprimary\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    subsidiariesstring\n    \n as \n    \n    subsidiariesstring\n    \n, \n    cast(null as TEXT) as \n    \n    twosteprevenueallocation\n    \n , \n    cast(null as TEXT) as \n    \n    unbilledreceivablegrouping\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as accounting_book_id,\n        name as accounting_book_name,\n        basebook as base_book_id,\n        effectiveperiod as effective_period_id,\n        isadjustmentonly = 'T' as is_adjustment_only,\n        isconsolidated = 'T' as is_consolidated,\n        contingentrevenuehandling as is_contingent_revenue_handling,\n        isprimary = 'T' as is_primary,\n        twosteprevenueallocation as is_two_step_revenue_allocation\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounting_books\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.404130Z", "completed_at": "2024-03-19T16:06:03.664493Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.665081Z", "completed_at": "2024-03-19T16:06:03.665087Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2952570915222168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounting_period_fiscal_cal_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accountingperiod\n    \n as \n    \n    accountingperiod\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    fiscalcalendar\n    \n as \n    \n    fiscalcalendar\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        _fivetran_synced,\n        accountingperiod as accounting_period_id,\n        fiscalcalendar as fiscal_calendar_id,\n        parent as parent_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounting_period_fiscal_cal\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.394262Z", "completed_at": "2024-03-19T16:06:03.705328Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.705883Z", "completed_at": "2024-03-19T16:06:03.705892Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3380870819091797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounting_book_subsidiaries_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accountingbook\n    \n as \n    \n    accountingbook\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        _fivetran_synced,\n        accountingbook as accounting_book_id,\n        status,\n        subsidiary as subsidiary_id\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounting_book_subsidiaries\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.669380Z", "completed_at": "2024-03-19T16:06:03.905585Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.906079Z", "completed_at": "2024-03-19T16:06:03.906086Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.26145195960998535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_periods", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounting_periods_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    alllocked\n    \n as \n    \n    alllocked\n    \n, \n    \n    \n    allownonglchanges\n    \n as \n    \n    allownonglchanges\n    \n, \n    \n    \n    aplocked\n    \n as \n    \n    aplocked\n    \n, \n    \n    \n    arlocked\n    \n as \n    \n    arlocked\n    \n, \n    \n    \n    closed\n    \n as \n    \n    closed\n    \n, \n    \n    \n    closedondate\n    \n as \n    \n    closedondate\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    enddate\n    \n as \n    \n    enddate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isadjust\n    \n as \n    \n    isadjust\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    isposting\n    \n as \n    \n    isposting\n    \n, \n    \n    \n    isquarter\n    \n as \n    \n    isquarter\n    \n, \n    \n    \n    isyear\n    \n as \n    \n    isyear\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    periodname\n    \n as \n    \n    periodname\n    \n, \n    \n    \n    startdate\n    \n as \n    \n    startdate\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as accounting_period_id,\n        parent as parent_id, \n        periodname as name,\n        startdate as starting_at,\n        enddate as ending_at,\n        closedondate as closed_at,\n        isquarter = 'T' as is_quarter,\n        isyear = 'T' as is_year,\n        isadjust = 'T' as is_adjustment,\n        isposting = 'T' as is_posting,\n        closed = 'T' as is_closed,\n        alllocked = 'T' as is_all_locked,\n        arlocked = 'T' as is_ar_locked,\n        aplocked = 'T' as is_ap_locked\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounting_periods\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.690775Z", "completed_at": "2024-03-19T16:06:03.930641Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:03.931943Z", "completed_at": "2024-03-19T16:06:03.931952Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2662088871002197, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounts", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounts_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    acctnumber\n    \n as \n    \n    acctnumber\n    \n, \n    \n    \n    accttype\n    \n as \n    \n    accttype\n    \n, \n    \n    \n    sspecacct\n    \n as \n    \n    sspecacct\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    accountsearchdisplaynamecopy\n    \n as \n    \n    accountsearchdisplaynamecopy\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    deferralacct\n    \n as \n    \n    deferralacct\n    \n, \n    \n    \n    cashflowrate\n    \n as \n    \n    cashflowrate\n    \n, \n    \n    \n    generalrate\n    \n as \n    \n    generalrate\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    class\n    \n as \n    \n    class\n    \n, \n    \n    \n    department\n    \n as \n    \n    department\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    includechildren\n    \n as \n    \n    includechildren\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    issummary\n    \n as \n    \n    issummary\n    \n, \n    \n    \n    eliminate\n    \n as \n    \n    eliminate\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as account_id, \n        externalid as account_external_id,\n        parent as parent_id,\n        acctnumber as account_number,\n        accttype as account_type_id,\n        sspecacct as special_account_type_id,\n        fullname as name,\n        accountsearchdisplaynamecopy as display_name,\n        description as account_description,\n        deferralacct as deferral_account_id,\n        cashflowrate as cash_flow_rate_type,\n        generalrate as general_rate_type,\n        currency as currency_id,\n        class as class_id,\n        department as department_id,\n        location as location_id,\n        includechildren = 'T' as is_including_child_subs,\n        isinactive = 'T' as is_inactive,\n        issummary = 'T' as is_summary,\n        eliminate = 'T' as is_eliminate,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your accounts_pass_through_columns variable into the staging model\n        \n\n\n\n\n        \n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.379516Z", "completed_at": "2024-03-19T16:06:04.035523Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:04.036123Z", "completed_at": "2024-03-19T16:06:04.036131Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.6899299621582031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__account_types", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__account_types_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    balancesheet\n    \n as \n    \n    balancesheet\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    defaultcashflowratetype\n    \n as \n    \n    defaultcashflowratetype\n    \n, \n    \n    \n    defaultgeneralratetype\n    \n as \n    \n    defaultgeneralratetype\n    \n, \n    \n    \n    eliminationalgo\n    \n as \n    \n    eliminationalgo\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    includeinrevaldefault\n    \n as \n    \n    includeinrevaldefault\n    \n, \n    \n    \n    internalid\n    \n as \n    \n    internalid\n    \n, \n    \n    \n        \n            \n            \"left\"\n            \n        \n    \n as \n    \n        \n            \n            \"left\"\n            \n        \n    \n, \n    \n    \n    longname\n    \n as \n    \n    longname\n    \n, \n    \n    \n    seqnum\n    \n as \n    \n    seqnum\n    \n, \n    \n    \n    usercanchangerevaloption\n    \n as \n    \n    usercanchangerevaloption\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted,\n        _fivetran_synced,\n        id as account_type_id,\n        balancesheet = 'T' as is_balancesheet,\"left\"= 'T' as is_leftside,\n        longname as type_name\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__account_types\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.732102Z", "completed_at": "2024-03-19T16:06:04.125337Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:04.126074Z", "completed_at": "2024-03-19T16:06:04.126083Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.41649818420410156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__classes", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__classes_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as class_id,\n        externalid as class_external_id,\n        name,\n        fullname as full_name,\n        isinactive = 'T' as is_inactive,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your classes_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__classes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.957742Z", "completed_at": "2024-03-19T16:06:04.260458Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:04.260974Z", "completed_at": "2024-03-19T16:06:04.260980Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3269839286804199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__currencies", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__currencies_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    currencyprecision\n    \n as \n    \n    currencyprecision\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    displaysymbol\n    \n as \n    \n    displaysymbol\n    \n, \n    \n    \n    exchangerate\n    \n as \n    \n    exchangerate\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    fxrateupdatetimezone\n    \n as \n    \n    fxrateupdatetimezone\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    includeinfxrateupdates\n    \n as \n    \n    includeinfxrateupdates\n    \n, \n    \n    \n    isbasecurrency\n    \n as \n    \n    isbasecurrency\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    overridecurrencyformat\n    \n as \n    \n    overridecurrencyformat\n    \n, \n    \n    \n    symbol\n    \n as \n    \n    symbol\n    \n, \n    \n    \n    symbolplacement\n    \n as \n    \n    symbolplacement\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as currency_id,\n        name,\n        symbol\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__currencies\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:04.065910Z", "completed_at": "2024-03-19T16:06:04.481518Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:04.482096Z", "completed_at": "2024-03-19T16:06:04.482105Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.4407479763031006, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__customers", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__customers_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    entityid\n    \n as \n    \n    entityid\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    isperson\n    \n as \n    \n    isperson\n    \n, \n    \n    \n    companyname\n    \n as \n    \n    companyname\n    \n, \n    \n    \n    firstname\n    \n as \n    \n    firstname\n    \n, \n    \n    \n    lastname\n    \n as \n    \n    lastname\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    defaultbillingaddress\n    \n as \n    \n    defaultbillingaddress\n    \n, \n    \n    \n    defaultshippingaddress\n    \n as \n    \n    defaultshippingaddress\n    \n, \n    \n    \n    receivablesaccount\n    \n as \n    \n    receivablesaccount\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    firstorderdate\n    \n as \n    \n    firstorderdate\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as customer_id,\n        entityid as entity_id,\n        externalid as customer_external_id,\n        parent as parent_id,\n        isperson = 'T' as is_person,\n        companyname as company_name,\n        firstname as first_name,\n        lastname as last_name,\n        email as email_address,\n        phone as phone_number,\n        defaultbillingaddress as default_billing_address_id,\n        defaultshippingaddress as default_shipping_address_id,\n        receivablesaccount as receivables_account_id,\n        currency as currency_id,\n        firstorderdate as date_first_order_at\n\n        --The below macro adds the fields defined within your customers_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__customers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:04.149308Z", "completed_at": "2024-03-19T16:06:04.549202Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:04.554172Z", "completed_at": "2024-03-19T16:06:04.554183Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.43044114112854004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__departments", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__departments_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as department_id,\n        parent as parent_id,\n        name,\n        fullname as full_name,\n        subsidiary as subsidiary_id,\n        isinactive = 'T' as is_inactive,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your departments_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__departments\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:03.932722Z", "completed_at": "2024-03-19T16:06:04.595698Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:04.596234Z", "completed_at": "2024-03-19T16:06:04.596241Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.6885881423950195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__consolidated_exchange_rates_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    averagerate\n    \n as \n    \n    averagerate\n    \n, \n    \n    \n    currentrate\n    \n as \n    \n    currentrate\n    \n, \n    \n    \n    fromcurrency\n    \n as \n    \n    fromcurrency\n    \n, \n    \n    \n    fromsubsidiary\n    \n as \n    \n    fromsubsidiary\n    \n, \n    \n    \n    historicalrate\n    \n as \n    \n    historicalrate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    accountingbook\n    \n as \n    \n    accountingbook\n    \n, \n    \n    \n    postingperiod\n    \n as \n    \n    postingperiod\n    \n, \n    \n    \n    tocurrency\n    \n as \n    \n    tocurrency\n    \n, \n    \n    \n    tosubsidiary\n    \n as \n    \n    tosubsidiary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as consolidated_exchange_rate_id,\n        postingperiod as accounting_period_id,\n        fromcurrency as from_currency_id,\n        fromsubsidiary as from_subsidiary_id,\n        tocurrency as to_currency_id,\n        tosubsidiary as to_subsidiary_id,\n        accountingbook as accounting_book_id,\n        currentrate as current_rate, \n        averagerate as average_rate,\n        historicalrate as historical_rate\n\n        --The below macro adds the fields defined within your consolidated_exchange_rates_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__consolidated_exchange_rates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:04.285779Z", "completed_at": "2024-03-19T16:06:04.684527Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:04.685058Z", "completed_at": "2024-03-19T16:06:04.685065Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4274461269378662, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__entities", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__entities_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    altemail\n    \n as \n    \n    altemail\n    \n, \n    \n    \n    altname\n    \n as \n    \n    altname\n    \n, \n    \n    \n    altphone\n    \n as \n    \n    altphone\n    \n, \n    \n    \n    comments\n    \n as \n    \n    comments\n    \n, \n    \n    \n    contact\n    \n as \n    \n    contact\n    \n, \n    \n    \n    customer\n    \n as \n    \n    customer\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    datecreated\n    \n as \n    \n    datecreated\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    employee\n    \n as \n    \n    employee\n    \n, \n    \n    \n    entityid\n    \n as \n    \n    entityid\n    \n, \n    \n    \n    entitynumber\n    \n as \n    \n    entitynumber\n    \n, \n    \n    \n    entitytitle\n    \n as \n    \n    entitytitle\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    fax\n    \n as \n    \n    fax\n    \n, \n    \n    \n    firstname\n    \n as \n    \n    firstname\n    \n, \n    \n    \n    genericresource\n    \n as \n    \n    genericresource\n    \n, \n    \n    \n    homephone\n    \n as \n    \n    homephone\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    isperson\n    \n as \n    \n    isperson\n    \n, \n    \n    \n    laborcost\n    \n as \n    \n    laborcost\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    lastname\n    \n as \n    \n    lastname\n    \n, \n    \n    \n    middlename\n    \n as \n    \n    middlename\n    \n, \n    \n    \n    mobilephone\n    \n as \n    \n    mobilephone\n    \n, \n    \n    \n    othername\n    \n as \n    \n    othername\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    partner\n    \n as \n    \n    partner\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    project\n    \n as \n    \n    project\n    \n, \n    \n    \n    projecttemplate\n    \n as \n    \n    projecttemplate\n    \n, \n    \n    \n    salutation\n    \n as \n    \n    salutation\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    toplevelparent\n    \n as \n    \n    toplevelparent\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    vendor\n    \n as \n    \n    vendor\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as entity_id,\n        parent as parent_id,\n        entitytitle as entity_name,\n        type as entity_type,\n        isperson = 'T' as is_person,\n        contact as contact_id,\n        customer as customer_id,\n        employee as employee_id,\n        project as job_id,\n        vendor as vendor_id\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__entities\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:04.507924Z", "completed_at": "2024-03-19T16:06:04.772400Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:04.773140Z", "completed_at": "2024-03-19T16:06:04.773152Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2855672836303711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__entity_address", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__entity_address_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    addr1\n    \n as \n    \n    addr1\n    \n, \n    \n    \n    addr2\n    \n as \n    \n    addr2\n    \n, \n    \n    \n    addr3\n    \n as \n    \n    addr3\n    \n, \n    \n    \n    addressee\n    \n as \n    \n    addressee\n    \n, \n    \n    \n    addrphone\n    \n as \n    \n    addrphone\n    \n, \n    \n    \n    addrtext\n    \n as \n    \n    addrtext\n    \n, \n    \n    \n    attention\n    \n as \n    \n    attention\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    dropdownstate\n    \n as \n    \n    dropdownstate\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    nkey\n    \n as \n    \n    nkey\n    \n, \n    \n    \n    override\n    \n as \n    \n    override\n    \n, \n    \n    \n    recordowner\n    \n as \n    \n    recordowner\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        addr1,\n        addr2,\n        addr3,\n        addressee,\n        addrtext as full_address,\n        city,\n        country,\n        coalesce(state, dropdownstate) as state,\n        nkey,\n        zip as zipcode\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__entity_address\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:04.581108Z", "completed_at": "2024-03-19T16:06:04.927625Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:04.928718Z", "completed_at": "2024-03-19T16:06:04.928725Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.38806796073913574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__items", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__items_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as integer) as \n    \n    alternatedemandsourceitem\n    \n , \n    cast(null as integer) as \n    \n    amortizationperiod\n    \n , \n    cast(null as integer) as \n    \n    amortizationtemplate\n    \n , \n    \n    \n    assetaccount\n    \n as \n    \n    assetaccount\n    \n, \n    cast(null as TEXT) as \n    \n    atpmethod\n    \n , \n    cast(null as TEXT) as \n    \n    autoexpandkitforrevenuemgmt\n    \n , \n    cast(null as float) as \n    \n    averagecost\n    \n , \n    cast(null as integer) as \n    \n    backwardconsumptiondays\n    \n , \n    cast(null as integer) as \n    \n    billexchratevarianceacct\n    \n , \n    cast(null as integer) as \n    \n    billingschedule\n    \n , \n    cast(null as integer) as \n    \n    billpricevarianceacct\n    \n , \n    cast(null as integer) as \n    \n    billqtyvarianceacct\n    \n , \n    cast(null as TEXT) as \n    \n    buildentireassembly\n    \n , \n    cast(null as float) as \n    \n    buildtime\n    \n , \n    \n    \n    class\n    \n as \n    \n    class\n    \n, \n    cast(null as integer) as \n    \n    consumptionunit\n    \n , \n    cast(null as TEXT) as \n    \n    copydescription\n    \n , \n    cast(null as float) as \n    \n    cost\n    \n , \n    cast(null as float) as \n    \n    costestimate\n    \n , \n    cast(null as TEXT) as \n    \n    costestimatetype\n    \n , \n    cast(null as TEXT) as \n    \n    costingmethod\n    \n , \n    cast(null as TEXT) as \n    \n    costingmethoddisplay\n    \n , \n    cast(null as TEXT) as \n    \n    countryofmanufacture\n    \n , \n    cast(null as timestamp) as \n    \n    createddate\n    \n , \n    cast(null as integer) as \n    \n    createexpenseplanson\n    \n , \n    cast(null as TEXT) as \n    \n    createjob\n    \n , \n    cast(null as integer) as \n    \n    createrevenueplanson\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    \n    \n    deferralaccount\n    \n as \n    \n    deferralaccount\n    \n, \n    cast(null as integer) as \n    \n    deferredrevenueaccount\n    \n , \n    cast(null as TEXT) as \n    \n    deferrevrec\n    \n , \n    cast(null as float) as \n    \n    demandmodifier\n    \n , \n    cast(null as TEXT) as \n    \n    demandsource\n    \n , \n    cast(null as integer) as \n    \n    demandtimefence\n    \n , \n    \n    \n    department\n    \n as \n    \n    department\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    cast(null as TEXT) as \n    \n    directrevenueposting\n    \n , \n    cast(null as TEXT) as \n    \n    displayname\n    \n , \n    cast(null as integer) as \n    \n    dropshipexpenseaccount\n    \n , \n    cast(null as TEXT) as \n    \n    enforceminqtyinternally\n    \n , \n    cast(null as TEXT) as \n    \n    excludefromsitemap\n    \n , \n    \n    \n    expenseaccount\n    \n as \n    \n    expenseaccount\n    \n, \n    cast(null as integer) as \n    \n    expenseamortizationrule\n    \n , \n    cast(null as TEXT) as \n    \n    externalid\n    \n , \n    cast(null as float) as \n    \n    fixedlotsize\n    \n , \n    cast(null as integer) as \n    \n    forwardconsumptiondays\n    \n , \n    cast(null as TEXT) as \n    \n    froogleproductfeed\n    \n , \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    cast(null as float) as \n    \n    fxcost\n    \n , \n    \n    \n    gainlossaccount\n    \n as \n    \n    gainlossaccount\n    \n, \n    cast(null as TEXT) as \n    \n    generateaccruals\n    \n , \n    cast(null as float) as \n    \n    handlingcost\n    \n , \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as TEXT) as \n    \n    includechildren\n    \n , \n    \n    \n    incomeaccount\n    \n as \n    \n    incomeaccount\n    \n, \n    cast(null as integer) as \n    \n    intercodefrevaccount\n    \n , \n    cast(null as integer) as \n    \n    intercoexpenseaccount\n    \n , \n    cast(null as integer) as \n    \n    intercoincomeaccount\n    \n , \n    cast(null as TEXT) as \n    \n    isdropshipitem\n    \n , \n    cast(null as TEXT) as \n    \n    isfulfillable\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as TEXT) as \n    \n    islotitem\n    \n , \n    cast(null as TEXT) as \n    \n    isonline\n    \n , \n    cast(null as TEXT) as \n    \n    isphantom\n    \n , \n    cast(null as TEXT) as \n    \n    isserialitem\n    \n , \n    cast(null as TEXT) as \n    \n    isspecialorderitem\n    \n , \n    cast(null as TEXT) as \n    \n    isspecialworkorderitem\n    \n , \n    cast(null as TEXT) as \n    \n    itemid\n    \n , \n    cast(null as integer) as \n    \n    itemrevenuecategory\n    \n , \n    \n    \n    itemtype\n    \n as \n    \n    itemtype\n    \n, \n    cast(null as timestamp) as \n    \n    lastmodifieddate\n    \n , \n    cast(null as float) as \n    \n    lastpurchaseprice\n    \n , \n    cast(null as integer) as \n    \n    leadtime\n    \n , \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    cast(null as TEXT) as \n    \n    manufacturer\n    \n , \n    cast(null as TEXT) as \n    \n    matchbilltoreceipt\n    \n , \n    cast(null as TEXT) as \n    \n    matrixitemnametemplate\n    \n , \n    cast(null as TEXT) as \n    \n    matrixtype\n    \n , \n    cast(null as integer) as \n    \n    maximumquantity\n    \n , \n    cast(null as integer) as \n    \n    minimumquantity\n    \n , \n    cast(null as TEXT) as \n    \n    mpn\n    \n , \n    cast(null as TEXT) as \n    \n    nextagcategory\n    \n , \n    cast(null as TEXT) as \n    \n    nextagproductfeed\n    \n , \n    cast(null as TEXT) as \n    \n    overallquantitypricingtype\n    \n , \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    cast(null as integer) as \n    \n    periodiclotsizedays\n    \n , \n    cast(null as TEXT) as \n    \n    periodiclotsizetype\n    \n , \n    cast(null as integer) as \n    \n    preferredlocation\n    \n , \n    cast(null as integer) as \n    \n    pricinggroup\n    \n , \n    cast(null as TEXT) as \n    \n    printitems\n    \n , \n    cast(null as integer) as \n    \n    prodpricevarianceacct\n    \n , \n    cast(null as integer) as \n    \n    prodqtyvarianceacct\n    \n , \n    cast(null as integer) as \n    \n    projectexpensetype\n    \n , \n    cast(null as integer) as \n    \n    projecttemplate\n    \n , \n    cast(null as TEXT) as \n    \n    purchasedescription\n    \n , \n    cast(null as float) as \n    \n    purchaseorderamount\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantity\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantitydiff\n    \n , \n    cast(null as integer) as \n    \n    purchasepricevarianceacct\n    \n , \n    cast(null as integer) as \n    \n    purchaseunit\n    \n , \n    cast(null as integer) as \n    \n    quantitypricingschedule\n    \n , \n    cast(null as float) as \n    \n    receiptamount\n    \n , \n    cast(null as float) as \n    \n    receiptquantity\n    \n , \n    cast(null as float) as \n    \n    receiptquantitydiff\n    \n , \n    cast(null as TEXT) as \n    \n    relateditemsdescription\n    \n , \n    cast(null as integer) as \n    \n    rescheduleindays\n    \n , \n    cast(null as integer) as \n    \n    rescheduleoutdays\n    \n , \n    cast(null as float) as \n    \n    residual\n    \n , \n    cast(null as integer) as \n    \n    revenueallocationgroup\n    \n , \n    cast(null as integer) as \n    \n    revenuerecognitionrule\n    \n , \n    cast(null as integer) as \n    \n    revrecforecastrule\n    \n , \n    cast(null as integer) as \n    \n    revreclassfxaccount\n    \n , \n    cast(null as TEXT) as \n    \n    roundupascomponent\n    \n , \n    cast(null as float) as \n    \n    safetystocklevel\n    \n , \n    cast(null as integer) as \n    \n    saleunit\n    \n , \n    cast(null as integer) as \n    \n    scrapacct\n    \n , \n    cast(null as TEXT) as \n    \n    searchkeywords\n    \n , \n    cast(null as TEXT) as \n    \n    seasonaldemand\n    \n , \n    cast(null as TEXT) as \n    \n    shipindividually\n    \n , \n    cast(null as integer) as \n    \n    shippackage\n    \n , \n    cast(null as float) as \n    \n    shippingcost\n    \n , \n    cast(null as TEXT) as \n    \n    shoppingdotcomcategory\n    \n , \n    cast(null as TEXT) as \n    \n    shoppingproductfeed\n    \n , \n    cast(null as integer) as \n    \n    shopzillacategoryid\n    \n , \n    cast(null as TEXT) as \n    \n    shopzillaproductfeed\n    \n , \n    cast(null as TEXT) as \n    \n    sitemappriority\n    \n , \n    cast(null as TEXT) as \n    \n    stockdescription\n    \n , \n    cast(null as integer) as \n    \n    stockunit\n    \n , \n    cast(null as TEXT) as \n    \n    storedescription\n    \n , \n    cast(null as integer) as \n    \n    storedisplayimage\n    \n , \n    cast(null as TEXT) as \n    \n    storedisplayname\n    \n , \n    cast(null as integer) as \n    \n    storedisplaythumbnail\n    \n , \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n, \n    cast(null as TEXT) as \n    \n    subtype\n    \n , \n    cast(null as TEXT) as \n    \n    supplylotsizingmethod\n    \n , \n    cast(null as TEXT) as \n    \n    supplyreplenishmentmethod\n    \n , \n    cast(null as integer) as \n    \n    supplytimefence\n    \n , \n    cast(null as TEXT) as \n    \n    supplytype\n    \n , \n    cast(null as float) as \n    \n    totalquantityonhand\n    \n , \n    cast(null as float) as \n    \n    totalvalue\n    \n , \n    cast(null as float) as \n    \n    transferprice\n    \n , \n    cast(null as integer) as \n    \n    unbuildvarianceaccount\n    \n , \n    cast(null as integer) as \n    \n    unitstype\n    \n , \n    cast(null as TEXT) as \n    \n    upccode\n    \n , \n    cast(null as TEXT) as \n    \n    usebins\n    \n , \n    cast(null as TEXT) as \n    \n    usemarginalrates\n    \n , \n    cast(null as TEXT) as \n    \n    vendorname\n    \n , \n    cast(null as integer) as \n    \n    vendreturnvarianceaccount\n    \n , \n    cast(null as TEXT) as \n    \n    vsoedelivered\n    \n , \n    cast(null as TEXT) as \n    \n    vsoepermitdiscount\n    \n , \n    cast(null as TEXT) as \n    \n    vsoesopgroup\n    \n , \n    cast(null as float) as \n    \n    weight\n    \n , \n    cast(null as integer) as \n    \n    weightunit\n    \n , \n    cast(null as TEXT) as \n    \n    weightunits\n    \n , \n    cast(null as integer) as \n    \n    wipacct\n    \n , \n    cast(null as integer) as \n    \n    wipvarianceacct\n    \n , \n    cast(null as TEXT) as \n    \n    yahooproductfeed\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as item_id,\n        fullname as name,\n        itemtype as type_name,\n        description as sales_description,\n        department as department_id,\n        class as class_id,\n        location as location_id,\n        subsidiary as subsidiary_id,\n        assetaccount as asset_account_id,\n        expenseaccount as expense_account_id,\n        gainlossaccount as gain_loss_account_id,\n        incomeaccount as income_account_id,\n        intercoexpenseaccount as interco_expense_account_id,\n        intercoincomeaccount as interco_income_account_id,\n        deferralaccount as deferred_expense_account_id,\n        deferredrevenueaccount as deferred_revenue_account_id,\n        parent as parent_item_id\n\n        --The below macro adds the fields defined within your items_pass_through_columns variable into the staging model\n        \n\n\n\n\n        \n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__items\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:04.621689Z", "completed_at": "2024-03-19T16:06:04.927287Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:04.928394Z", "completed_at": "2024-03-19T16:06:04.928412Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.35462498664855957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__jobs", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__jobs_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accountnumber\n    \n as \n    \n    accountnumber\n    \n, \n    \n    \n    actualtime\n    \n as \n    \n    actualtime\n    \n, \n    \n    \n    allowallresourcesfortasks\n    \n as \n    \n    allowallresourcesfortasks\n    \n, \n    \n    \n    allowexpenses\n    \n as \n    \n    allowexpenses\n    \n, \n    \n    \n    allowtime\n    \n as \n    \n    allowtime\n    \n, \n    \n    \n    alternatecontact\n    \n as \n    \n    alternatecontact\n    \n, \n    \n    \n    altname\n    \n as \n    \n    altname\n    \n, \n    \n    \n    billingschedule\n    \n as \n    \n    billingschedule\n    \n, \n    \n    \n    calculatedenddate\n    \n as \n    \n    calculatedenddate\n    \n, \n    \n    \n    calculatedenddatebaseline\n    \n as \n    \n    calculatedenddatebaseline\n    \n, \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    comments\n    \n as \n    \n    comments\n    \n, \n    \n    \n    companyname\n    \n as \n    \n    companyname\n    \n, \n    \n    \n    contact\n    \n as \n    \n    contact\n    \n, \n    \n    \n    contactlist\n    \n as \n    \n    contactlist\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    currencyprecision\n    \n as \n    \n    currencyprecision\n    \n, \n    \n    \n    custentity1\n    \n as \n    \n    custentity1\n    \n, \n    \n    \n    custentity4\n    \n as \n    \n    custentity4\n    \n, \n    \n    \n    custentity5\n    \n as \n    \n    custentity5\n    \n, \n    \n    \n    customer\n    \n as \n    \n    customer\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    datecreated\n    \n as \n    \n    datecreated\n    \n, \n    \n    \n    defaultbillingaddress\n    \n as \n    \n    defaultbillingaddress\n    \n, \n    \n    \n    defaultshippingaddress\n    \n as \n    \n    defaultshippingaddress\n    \n, \n    \n    \n    enddate\n    \n as \n    \n    enddate\n    \n, \n    \n    \n    entityid\n    \n as \n    \n    entityid\n    \n, \n    \n    \n    entitynumber\n    \n as \n    \n    entitynumber\n    \n, \n    \n    \n    entitystatus\n    \n as \n    \n    entitystatus\n    \n, \n    \n    \n    entitytitle\n    \n as \n    \n    entitytitle\n    \n, \n    \n    \n    estimatedcost\n    \n as \n    \n    estimatedcost\n    \n, \n    \n    \n    estimatedgrossprofit\n    \n as \n    \n    estimatedgrossprofit\n    \n, \n    \n    \n    estimatedgrossprofitpercent\n    \n as \n    \n    estimatedgrossprofitpercent\n    \n, \n    \n    \n    estimatedlaborcost\n    \n as \n    \n    estimatedlaborcost\n    \n, \n    \n    \n    estimatedlaborcostbaseline\n    \n as \n    \n    estimatedlaborcostbaseline\n    \n, \n    \n    \n    estimatedlaborrevenue\n    \n as \n    \n    estimatedlaborrevenue\n    \n, \n    \n    \n    estimatedrevenue\n    \n as \n    \n    estimatedrevenue\n    \n, \n    \n    \n    estimatedtime\n    \n as \n    \n    estimatedtime\n    \n, \n    \n    \n    estimatedtimeoverride\n    \n as \n    \n    estimatedtimeoverride\n    \n, \n    \n    \n    estimatedtimeoverridebaseline\n    \n as \n    \n    estimatedtimeoverridebaseline\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    files\n    \n as \n    \n    files\n    \n, \n    \n    \n    forecastchargerunondemand\n    \n as \n    \n    forecastchargerunondemand\n    \n, \n    \n    \n    fxrate\n    \n as \n    \n    fxrate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    includecrmtasksintotals\n    \n as \n    \n    includecrmtasksintotals\n    \n, \n    \n    \n    isexempttime\n    \n as \n    \n    isexempttime\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    isproductivetime\n    \n as \n    \n    isproductivetime\n    \n, \n    \n    \n    isutilizedtime\n    \n as \n    \n    isutilizedtime\n    \n, \n    \n    \n    jobbillingtype\n    \n as \n    \n    jobbillingtype\n    \n, \n    \n    \n    jobitem\n    \n as \n    \n    jobitem\n    \n, \n    \n    \n    jobprice\n    \n as \n    \n    jobprice\n    \n, \n    \n    \n    jobtype\n    \n as \n    \n    jobtype\n    \n, \n    \n    \n    lastbaselinedate\n    \n as \n    \n    lastbaselinedate\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    limittimetoassignees\n    \n as \n    \n    limittimetoassignees\n    \n, \n    \n    \n    materializetime\n    \n as \n    \n    materializetime\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    percentcomplete\n    \n as \n    \n    percentcomplete\n    \n, \n    \n    \n    percenttimecomplete\n    \n as \n    \n    percenttimecomplete\n    \n, \n    \n    \n    primarycontact\n    \n as \n    \n    primarycontact\n    \n, \n    \n    \n    projectedenddate\n    \n as \n    \n    projectedenddate\n    \n, \n    \n    \n    projectedenddatebaseline\n    \n as \n    \n    projectedenddatebaseline\n    \n, \n    \n    \n    projectmanager\n    \n as \n    \n    projectmanager\n    \n, \n    \n    \n    startdate\n    \n as \n    \n    startdate\n    \n, \n    \n    \n    startdatebaseline\n    \n as \n    \n    startdatebaseline\n    \n, \n    \n    \n    timeapproval\n    \n as \n    \n    timeapproval\n    \n, \n    \n    \n    timeremaining\n    \n as \n    \n    timeremaining\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        id as job_id,\n        externalid as job_external_id,\n        customer as customer_id,\n        entityid as entity_id,\n        defaultbillingaddress as billing_address_id,\n        defaultshippingaddress as shipping_address_id,\n        parent as parent_id\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__jobs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:04.714302Z", "completed_at": "2024-03-19T16:06:05.098146Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:05.099127Z", "completed_at": "2024-03-19T16:06:05.099178Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4071979522705078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__location_main_address", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__location_main_address_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    addr1\n    \n as \n    \n    addr1\n    \n, \n    \n    \n    addr2\n    \n as \n    \n    addr2\n    \n, \n    \n    \n    addr3\n    \n as \n    \n    addr3\n    \n, \n    \n    \n    addressee\n    \n as \n    \n    addressee\n    \n, \n    \n    \n    addrphone\n    \n as \n    \n    addrphone\n    \n, \n    \n    \n    addrtext\n    \n as \n    \n    addrtext\n    \n, \n    \n    \n    attention\n    \n as \n    \n    attention\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    dropdownstate\n    \n as \n    \n    dropdownstate\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    nkey\n    \n as \n    \n    nkey\n    \n, \n    \n    \n    override\n    \n as \n    \n    override\n    \n, \n    \n    \n    recordowner\n    \n as \n    \n    recordowner\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        addr1,\n        addr2,\n        addr3,\n        addressee,\n        addrtext as full_address,\n        city,\n        country,\n        coalesce(state, dropdownstate) as state,\n        nkey,\n        zip as zipcode\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__location_main_address\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:04.793727Z", "completed_at": "2024-03-19T16:06:05.099471Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:05.100468Z", "completed_at": "2024-03-19T16:06:05.100474Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.33755016326904297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__locations", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__locations_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    mainaddress\n    \n as \n    \n    mainaddress\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as location_id,\n        name,\n        fullname as full_name,\n        mainaddress as main_address_id,\n        parent as parent_id,\n        subsidiary as subsidiary_id\n\n        --The below macro adds the fields defined within your locations_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__locations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:04.987362Z", "completed_at": "2024-03-19T16:06:05.313980Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:05.314562Z", "completed_at": "2024-03-19T16:06:05.314570Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.36208677291870117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__transaction_accounting_lines", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__transaction_accounting_lines_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account\n    \n as \n    \n    account\n    \n, \n    \n    \n    accountingbook\n    \n as \n    \n    accountingbook\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amountlinked\n    \n as \n    \n    amountlinked\n    \n, \n    \n    \n    amountpaid\n    \n as \n    \n    amountpaid\n    \n, \n    \n    \n    amountunpaid\n    \n as \n    \n    amountunpaid\n    \n, \n    \n    \n    credit\n    \n as \n    \n    credit\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    debit\n    \n as \n    \n    debit\n    \n, \n    \n    \n    exchangerate\n    \n as \n    \n    exchangerate\n    \n, \n    \n    \n    netamount\n    \n as \n    \n    netamount\n    \n, \n    \n    \n    overheadparentitem\n    \n as \n    \n    overheadparentitem\n    \n, \n    \n    \n    paymentamountunused\n    \n as \n    \n    paymentamountunused\n    \n, \n    \n    \n    paymentamountused\n    \n as \n    \n    paymentamountused\n    \n, \n    \n    \n    posting\n    \n as \n    \n    posting\n    \n, \n    \n    \n    transaction\n    \n as \n    \n    transaction\n    \n, \n    \n    \n    transactionline\n    \n as \n    \n    transactionline\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted,\n        _fivetran_synced,\n        transaction as transaction_id,\n        transactionline as transaction_line_id,\n        accountingbook as accounting_book_id,\n        account as account_id,\n        posting = 'T' as is_posting,\n        exchangerate as exchange_rate,\n        amount,\n        credit as credit_amount,\n        debit as debit_amount,\n        netamount as net_amount,\n        amountpaid as paid_amount,\n        amountunpaid as unpaid_amount\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__transaction_accounting_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:05.132667Z", "completed_at": "2024-03-19T16:06:05.363304Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:05.364010Z", "completed_at": "2024-03-19T16:06:05.364018Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.25519323348999023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__transactions", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__transactions_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    transactionnumber\n    \n as \n    \n    transactionnumber\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    memo\n    \n as \n    \n    memo\n    \n, \n    \n    \n    trandate\n    \n as \n    \n    trandate\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    createddate\n    \n as \n    \n    createddate\n    \n, \n    \n    \n    duedate\n    \n as \n    \n    duedate\n    \n, \n    \n    \n    closedate\n    \n as \n    \n    closedate\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    entity\n    \n as \n    \n    entity\n    \n, \n    \n    \n    postingperiod\n    \n as \n    \n    postingperiod\n    \n, \n    \n    \n    posting\n    \n as \n    \n    posting\n    \n, \n    cast(null as TEXT) as \n    \n    intercoadj\n    \n , \n    \n    \n    isreversal\n    \n as \n    \n    isreversal\n    \n, \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as transaction_id,\n        transactionnumber as transaction_number,\n        type as transaction_type,\n        memo,\n        trandate as transaction_date,\n        status,\n        createddate as created_at,\n        duedate as due_date_at,\n        closedate as closed_at,\n        currency as currency_id,\n        entity as entity_id,\n        postingperiod as accounting_period_id,\n        posting = 'T' as is_posting,\n        intercoadj = 'T' as is_intercompany_adjustment,\n        isreversal = 'T' as is_reversal\n\n        --The below macro adds the fields defined within your transactions_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:04.982500Z", "completed_at": "2024-03-19T16:06:05.463842Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:05.464461Z", "completed_at": "2024-03-19T16:06:05.464470Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.5086789131164551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__subsidiaries", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__subsidiaries_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    mainaddress\n    \n as \n    \n    mainaddress\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    fiscalcalendar\n    \n as \n    \n    fiscalcalendar\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    iselimination\n    \n as \n    \n    iselimination\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as subsidiary_id,\n        name,\n        fullname as full_name,\n        email as email_address,\n        mainaddress as main_address_id,\n        country,\n        state,\n        fiscalcalendar as fiscal_calendar_id,\n        parent as parent_id,\n        iselimination = 'T' as is_elimination,\n        currency as currency_id\n\n        --The below macro adds the fields defined within your subsidiaries_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__subsidiaries\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:05.123041Z", "completed_at": "2024-03-19T16:06:05.521079Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:05.521731Z", "completed_at": "2024-03-19T16:06:05.521738Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4214811325073242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__transaction_lines", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__transaction_lines_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    transaction\n    \n as \n    \n    transaction\n    \n, \n    \n    \n    linesequencenumber\n    \n as \n    \n    linesequencenumber\n    \n, \n    \n    \n    memo\n    \n as \n    \n    memo\n    \n, \n    \n    \n    entity\n    \n as \n    \n    entity\n    \n, \n    \n    \n    item\n    \n as \n    \n    item\n    \n, \n    \n    \n    class\n    \n as \n    \n    class\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n, \n    \n    \n    department\n    \n as \n    \n    department\n    \n, \n    \n    \n    isclosed\n    \n as \n    \n    isclosed\n    \n, \n    \n    \n    isbillable\n    \n as \n    \n    isbillable\n    \n, \n    \n    \n    iscogs\n    \n as \n    \n    iscogs\n    \n, \n    \n    \n    cleared\n    \n as \n    \n    cleared\n    \n, \n    \n    \n    commitmentfirm\n    \n as \n    \n    commitmentfirm\n    \n, \n    \n    \n    mainline\n    \n as \n    \n    mainline\n    \n, \n    \n    \n    taxline\n    \n as \n    \n    taxline\n    \n, \n    \n    \n    eliminate\n    \n as \n    \n    eliminate\n    \n, \n    \n    \n    netamount\n    \n as \n    \n    netamount\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as transaction_line_id,\n        transaction as transaction_id,\n        linesequencenumber as transaction_line_number,\n        memo,\n        entity as entity_id,\n        item as item_id,\n        class as class_id,\n        location as location_id,\n        subsidiary as subsidiary_id,\n        department as department_id,\n        isclosed = 'T' as is_closed,\n        isbillable = 'T' as is_billable,\n        iscogs = 'T' as is_cogs,\n        cleared = 'T' as is_cleared,\n        commitmentfirm = 'T' as is_commitment_firm,\n        mainline = 'T' as is_main_line,\n        taxline = 'T' as is_tax_line,\n        eliminate = 'T' as is_eliminate,\n        netamount\n\n        --The below macro adds the fields defined within your transaction_lines_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__transaction_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:05.388628Z", "completed_at": "2024-03-19T16:06:05.647002Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:05.647483Z", "completed_at": "2024-03-19T16:06:05.647490Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2824130058288574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__vendors", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__vendors_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accountnumber\n    \n as \n    \n    accountnumber\n    \n, \n    \n    \n    altemail\n    \n as \n    \n    altemail\n    \n, \n    \n    \n    altname\n    \n as \n    \n    altname\n    \n, \n    \n    \n    altphone\n    \n as \n    \n    altphone\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    balanceprimary\n    \n as \n    \n    balanceprimary\n    \n, \n    cast(null as integer) as \n    \n    billingclass\n    \n , \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    comments\n    \n as \n    \n    comments\n    \n, \n    \n    \n    companyname\n    \n as \n    \n    companyname\n    \n, \n    \n    \n    contact\n    \n as \n    \n    contact\n    \n, \n    \n    \n    contactlist\n    \n as \n    \n    contactlist\n    \n, \n    \n    \n    creditlimit\n    \n as \n    \n    creditlimit\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    datecreated\n    \n as \n    \n    datecreated\n    \n, \n    \n    \n    defaultbankaccount\n    \n as \n    \n    defaultbankaccount\n    \n, \n    \n    \n    defaultbillingaddress\n    \n as \n    \n    defaultbillingaddress\n    \n, \n    \n    \n    defaultshippingaddress\n    \n as \n    \n    defaultshippingaddress\n    \n, \n    \n    \n    defaultvendorpaymentaccount\n    \n as \n    \n    defaultvendorpaymentaccount\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    emailpreference\n    \n as \n    \n    emailpreference\n    \n, \n    \n    \n    emailtransactions\n    \n as \n    \n    emailtransactions\n    \n, \n    \n    \n    entityid\n    \n as \n    \n    entityid\n    \n, \n    \n    \n    entitynumber\n    \n as \n    \n    entitynumber\n    \n, \n    \n    \n    entitytitle\n    \n as \n    \n    entitytitle\n    \n, \n    \n    \n    expenseaccount\n    \n as \n    \n    expenseaccount\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    fax\n    \n as \n    \n    fax\n    \n, \n    \n    \n    faxtransactions\n    \n as \n    \n    faxtransactions\n    \n, \n    \n    \n    firstname\n    \n as \n    \n    firstname\n    \n, \n    \n    \n    giveaccess\n    \n as \n    \n    giveaccess\n    \n, \n    \n    \n    homephone\n    \n as \n    \n    homephone\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    incoterm\n    \n as \n    \n    incoterm\n    \n, \n    cast(null as TEXT) as \n    \n    isautogeneratedrepresentingentity\n    \n , \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    isjobresourcevend\n    \n as \n    \n    isjobresourcevend\n    \n, \n    \n    \n    isperson\n    \n as \n    \n    isperson\n    \n, \n    \n    \n    laborcost\n    \n as \n    \n    laborcost\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    lastname\n    \n as \n    \n    lastname\n    \n, \n    \n    \n    legalname\n    \n as \n    \n    legalname\n    \n, \n    \n    \n    middlename\n    \n as \n    \n    middlename\n    \n, \n    \n    \n    mobilephone\n    \n as \n    \n    mobilephone\n    \n, \n    \n    \n    payablesaccount\n    \n as \n    \n    payablesaccount\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    printoncheckas\n    \n as \n    \n    printoncheckas\n    \n, \n    \n    \n    printtransactions\n    \n as \n    \n    printtransactions\n    \n, \n    \n    \n    purchaseorderamount\n    \n as \n    \n    purchaseorderamount\n    \n, \n    \n    \n    purchaseorderquantity\n    \n as \n    \n    purchaseorderquantity\n    \n, \n    \n    \n    purchaseorderquantitydiff\n    \n as \n    \n    purchaseorderquantitydiff\n    \n, \n    \n    \n    receiptamount\n    \n as \n    \n    receiptamount\n    \n, \n    \n    \n    receiptquantity\n    \n as \n    \n    receiptquantity\n    \n, \n    \n    \n    receiptquantitydiff\n    \n as \n    \n    receiptquantitydiff\n    \n, \n    cast(null as integer) as \n    \n    representingsubsidiary\n    \n , \n    \n    \n    rolesforsearch\n    \n as \n    \n    rolesforsearch\n    \n, \n    \n    \n    salutation\n    \n as \n    \n    salutation\n    \n, \n    \n    \n    subsidiaryedition\n    \n as \n    \n    subsidiaryedition\n    \n, \n    \n    \n    terms\n    \n as \n    \n    terms\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    unbilledorders\n    \n as \n    \n    unbilledorders\n    \n, \n    \n    \n    unbilledordersprimary\n    \n as \n    \n    unbilledordersprimary\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n, \n    \n    \n    workcalendar\n    \n as \n    \n    workcalendar\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as vendor_id,\n        companyname as company_name,\n        datecreated as create_date_at,\n        category as vendor_category_id\n\n        --The below macro adds the fields defined within your vendors_pass_through_columns variable into the staging model\n        \n\n\n\n\n        \n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__vendors\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:05.345224Z", "completed_at": "2024-03-19T16:06:05.751225Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:05.751733Z", "completed_at": "2024-03-19T16:06:05.751741Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.43222808837890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__vendor_categories", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__vendor_categories_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    istaxagency\n    \n as \n    \n    istaxagency\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as vendor_category_id,\n        name,\n        _fivetran_synced\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__vendor_categories\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:05.491934Z", "completed_at": "2024-03-19T16:06:05.884360Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:05.885061Z", "completed_at": "2024-03-19T16:06:05.885071Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.4267308712005615, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__accounting_books", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounting_books_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    accounting_book_extid\n    \n , \n    \n    \n    accounting_book_id\n    \n as \n    \n    accounting_book_id\n    \n, \n    cast(null as TEXT) as \n    \n    accounting_book_name\n    \n , \n    cast(null as float) as \n    \n    base_book_id\n    \n , \n    cast(null as timestamp) as \n    \n    date_created\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as float) as \n    \n    effective_period_id\n    \n , \n    cast(null as TEXT) as \n    \n    form_template_component_id\n    \n , \n    cast(null as float) as \n    \n    form_template_id\n    \n , \n    cast(null as TEXT) as \n    \n    is_adjustment_only\n    \n , \n    cast(null as TEXT) as \n    \n    is_arrangement_level_reclass\n    \n , \n    cast(null as TEXT) as \n    \n    is_consolidated\n    \n , \n    cast(null as TEXT) as \n    \n    is_contingent_revenue_handling\n    \n , \n    cast(null as TEXT) as \n    \n    is_include_child_subsidiaries\n    \n , \n    \n    \n    is_primary\n    \n as \n    \n    is_primary\n    \n, \n    cast(null as TEXT) as \n    \n    is_two_step_revenue_allocation\n    \n , \n    cast(null as TEXT) as \n    \n    status\n    \n , \n    cast(null as TEXT) as \n    \n    unbilled_receivable_grouping\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        accounting_book_id,\n        is_primary,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounting_books\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:05.545098Z", "completed_at": "2024-03-19T16:06:05.923274Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:05.924132Z", "completed_at": "2024-03-19T16:06:05.924138Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4021470546722412, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__accounting_periods", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounting_periods_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TEXT) as \n    \n    _fivetran_id\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    accounting_period_id\n    \n as \n    \n    accounting_period_id\n    \n, \n    \n    \n    closed\n    \n as \n    \n    closed\n    \n, \n    cast(null as TEXT) as \n    \n    closed_accounts_payable\n    \n , \n    cast(null as TEXT) as \n    \n    closed_accounts_receivable\n    \n , \n    cast(null as TEXT) as \n    \n    closed_all\n    \n , \n    cast(null as timestamp) as \n    \n    closed_on\n    \n , \n    cast(null as TEXT) as \n    \n    closed_payroll\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    \n    \n    ending\n    \n as \n    \n    ending\n    \n, \n    \n    \n    fiscal_calendar_id\n    \n as \n    \n    fiscal_calendar_id\n    \n, \n    cast(null as TEXT) as \n    \n    fivetran_index\n    \n , \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n, \n    \n    \n    is_adjustment\n    \n as \n    \n    is_adjustment\n    \n, \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as TEXT) as \n    \n    locked_accounts_payable\n    \n , \n    cast(null as TEXT) as \n    \n    locked_accounts_receivable\n    \n , \n    cast(null as TEXT) as \n    \n    locked_all\n    \n , \n    cast(null as TEXT) as \n    \n    locked_payroll\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as float) as \n    \n    parent_id\n    \n , \n    \n    \n    quarter\n    \n as \n    \n    quarter\n    \n, \n    \n    \n    starting\n    \n as \n    \n    starting\n    \n, \n    \n    \n    year_0\n    \n as \n    \n    year_0\n    \n, \n    \n    \n    year_id\n    \n as \n    \n    year_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        accounting_period_id,\n        name,\n        full_name,\n        fiscal_calendar_id,\n        year_id,\n        starting as starting_at,\n        ending as ending_at,\n        quarter,\n        year_0,\n        is_adjustment,\n        closed as is_closed,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounting_periods\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:05.778545Z", "completed_at": "2024-03-19T16:06:06.003534Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:06.004006Z", "completed_at": "2024-03-19T16:06:06.004013Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.24907183647155762, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__classes", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__classes_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        class_id,\n        full_name,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your classes_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__classes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:05.671273Z", "completed_at": "2024-03-19T16:06:06.053541Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:06.054007Z", "completed_at": "2024-03-19T16:06:06.054013Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.40256786346435547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__accounts", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounts_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    cast(null as TEXT) as \n    \n    accountnumber\n    \n , \n    \n    \n    general_rate_type\n    \n as \n    \n    general_rate_type\n    \n, \n    \n    \n    is_balancesheet\n    \n as \n    \n    is_balancesheet\n    \n, \n    \n    \n    is_leftside\n    \n as \n    \n    is_leftside\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    \n    \n    type_name\n    \n as \n    \n    type_name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        account_id,\n        parent_id,\n        name,\n        type_name,\n        accountnumber as account_number,\n        general_rate_type,\n        is_leftside,\n        is_balancesheet,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your accounts_pass_through_columns variable into the staging model\n        \n\n\n\n\n        \n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:05.918727Z", "completed_at": "2024-03-19T16:06:06.188816Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:06.189426Z", "completed_at": "2024-03-19T16:06:06.189436Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.30005574226379395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__consolidated_exchange_rates", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__consolidated_exchange_rates_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    accounting_book_id\n    \n as \n    \n    accounting_book_id\n    \n, \n    \n    \n    accounting_period_id\n    \n as \n    \n    accounting_period_id\n    \n, \n    cast(null as float) as \n    \n    average_budget_rate\n    \n , \n    \n    \n    average_rate\n    \n as \n    \n    average_rate\n    \n, \n    \n    \n    consolidated_exchange_rate_id\n    \n as \n    \n    consolidated_exchange_rate_id\n    \n, \n    cast(null as float) as \n    \n    current_budget_rate\n    \n , \n    \n    \n    current_rate\n    \n as \n    \n    current_rate\n    \n, \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    \n    \n    from_subsidiary_id\n    \n as \n    \n    from_subsidiary_id\n    \n, \n    cast(null as float) as \n    \n    historical_budget_rate\n    \n , \n    \n    \n    historical_rate\n    \n as \n    \n    historical_rate\n    \n, \n    \n    \n    to_subsidiary_id\n    \n as \n    \n    to_subsidiary_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        consolidated_exchange_rate_id,\n        accounting_book_id,\n        accounting_period_id,\n        average_rate,\n        current_rate,\n        historical_rate,\n        from_subsidiary_id,\n        to_subsidiary_id,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your consolidated_exchange_rates_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__consolidated_exchange_rates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:05.947816Z", "completed_at": "2024-03-19T16:06:06.232331Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:06.232996Z", "completed_at": "2024-03-19T16:06:06.233010Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3096120357513428, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__currencies", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__currencies_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    currency_extid\n    \n , \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as TEXT) as \n    \n    is_inactive\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as float) as \n    \n    precision_0\n    \n , \n    \n    \n    symbol\n    \n as \n    \n    symbol\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        currency_id,\n        name,\n        symbol,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__currencies\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:06.028418Z", "completed_at": "2024-03-19T16:06:06.270020Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:06.270596Z", "completed_at": "2024-03-19T16:06:06.270603Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.26192188262939453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__customers", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__customers_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    cast(null as TEXT) as \n    \n    companyname\n    \n , \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    cast(null as TEXT) as \n    \n    customer_extid\n    \n , \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    date_first_order\n    \n as \n    \n    date_first_order\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    zipcode\n    \n as \n    \n    zipcode\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        customer_id,\n        companyname as company_name,\n        customer_extid as customer_external_id,\n        city,\n        state,\n        zipcode,\n        country,\n        date_first_order as date_first_order_at,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your customers_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__customers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:06.074776Z", "completed_at": "2024-03-19T16:06:06.450044Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:06.450659Z", "completed_at": "2024-03-19T16:06:06.450666Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3967928886413574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__departments", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__departments_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        department_id,\n        name,\n        full_name,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your departments_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__departments\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:06.258333Z", "completed_at": "2024-03-19T16:06:06.505561Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:06.506282Z", "completed_at": "2024-03-19T16:06:06.506289Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.26860976219177246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__income_accounts", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__income_accounts_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    cast(null as TEXT) as \n    \n    comments\n    \n , \n    cast(null as float) as \n    \n    current_balance\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as TEXT) as \n    \n    desription\n    \n , \n    cast(null as TEXT) as \n    \n    full_name\n    \n , \n    cast(null as TEXT) as \n    \n    income_account_extid\n    \n , \n    \n    \n    income_account_id\n    \n as \n    \n    income_account_id\n    \n, \n    cast(null as TEXT) as \n    \n    is_including_child_subs\n    \n , \n    cast(null as TEXT) as \n    \n    is_summary\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as TEXT) as \n    \n    legal_name\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        income_account_id,\n        name, \n        parent_id,\n        account_number,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__income_accounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:06.219362Z", "completed_at": "2024-03-19T16:06:06.625791Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:06.626407Z", "completed_at": "2024-03-19T16:06:06.626415Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.4350900650024414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__expense_accounts", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__expense_accounts_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    cast(null as TEXT) as \n    \n    comments\n    \n , \n    cast(null as float) as \n    \n    current_balance\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as TEXT) as \n    \n    desription\n    \n , \n    cast(null as TEXT) as \n    \n    expense_account_extid\n    \n , \n    \n    \n    expense_account_id\n    \n as \n    \n    expense_account_id\n    \n, \n    cast(null as TEXT) as \n    \n    full_name\n    \n , \n    cast(null as TEXT) as \n    \n    is_including_child_subs\n    \n , \n    cast(null as TEXT) as \n    \n    is_summary\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as TEXT) as \n    \n    legal_name\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        expense_account_id,\n        name,\n        parent_id,\n        account_number,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__expense_accounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:06.290931Z", "completed_at": "2024-03-19T16:06:06.748180Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:06.749117Z", "completed_at": "2024-03-19T16:06:06.749158Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.4821970462799072, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__items", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__items_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    allow_drop_ship\n    \n , \n    cast(null as float) as \n    \n    alt_demand_source_item_id\n    \n , \n    cast(null as float) as \n    \n    asset_account_id\n    \n , \n    cast(null as float) as \n    \n    atp_lead_time\n    \n , \n    cast(null as TEXT) as \n    \n    atp_method\n    \n , \n    cast(null as TEXT) as \n    \n    available_to_partners\n    \n , \n    cast(null as TEXT) as \n    \n    avatax_taxcode\n    \n , \n    cast(null as float) as \n    \n    averagecost\n    \n , \n    cast(null as float) as \n    \n    backward_consumption_days\n    \n , \n    cast(null as TEXT) as \n    \n    build_sub_assemblies\n    \n , \n    cast(null as float) as \n    \n    class_id\n    \n , \n    cast(null as float) as \n    \n    code_of_supply_id\n    \n , \n    cast(null as TEXT) as \n    \n    commodity_code\n    \n , \n    cast(null as float) as \n    \n    consumption_unit_id\n    \n , \n    cast(null as float) as \n    \n    cost_0\n    \n , \n    cast(null as TEXT) as \n    \n    cost_category\n    \n , \n    cast(null as TEXT) as \n    \n    cost_estimate_type\n    \n , \n    cast(null as TEXT) as \n    \n    costing_method\n    \n , \n    cast(null as TEXT) as \n    \n    country_of_manufacture\n    \n , \n    cast(null as TEXT) as \n    \n    create_plan_on_event_type\n    \n , \n    cast(null as timestamp) as \n    \n    created\n    \n , \n    cast(null as float) as \n    \n    current_on_order_count\n    \n , \n    cast(null as float) as \n    \n    custreturn_variance_account_id\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as timestamp) as \n    \n    date_of_last_transaction\n    \n , \n    cast(null as float) as \n    \n    default_return_cost\n    \n , \n    cast(null as float) as \n    \n    deferred_expense_account_id\n    \n , \n    cast(null as float) as \n    \n    deferred_revenue_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    demand_source\n    \n , \n    cast(null as float) as \n    \n    demand_time_fence\n    \n , \n    cast(null as float) as \n    \n    department_id\n    \n , \n    cast(null as TEXT) as \n    \n    deposit\n    \n , \n    cast(null as TEXT) as \n    \n    displayname\n    \n , \n    cast(null as TEXT) as \n    \n    distribution_category\n    \n , \n    cast(null as TEXT) as \n    \n    distribution_network\n    \n , \n    cast(null as float) as \n    \n    dropship_expense_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    effective_bom_control_type\n    \n , \n    cast(null as float) as \n    \n    expense_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    featureddescription\n    \n , \n    cast(null as TEXT) as \n    \n    featureditem\n    \n , \n    cast(null as float) as \n    \n    fixed_lot_size\n    \n , \n    cast(null as float) as \n    \n    forward_consumption_days\n    \n , \n    cast(null as TEXT) as \n    \n    fraud_risk\n    \n , \n    cast(null as TEXT) as \n    \n    full_name\n    \n , \n    cast(null as float) as \n    \n    fx_adjustment_account_id\n    \n , \n    cast(null as float) as \n    \n    gain_loss_account_id\n    \n , \n    cast(null as float) as \n    \n    handling_cost\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat_hazard_class\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat_id\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat_item_units\n    \n , \n    cast(null as float) as \n    \n    hazmat_item_units_qty\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat_packing_group\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat_shipping_name\n    \n , \n    cast(null as TEXT) as \n    \n    include_child_subsidiaries\n    \n , \n    cast(null as float) as \n    \n    income_account_id\n    \n , \n    cast(null as float) as \n    \n    interco_expense_account_id\n    \n , \n    cast(null as float) as \n    \n    interco_income_account_id\n    \n , \n    cast(null as float) as \n    \n    invt_count_classification\n    \n , \n    cast(null as float) as \n    \n    invt_count_interval\n    \n , \n    cast(null as TEXT) as \n    \n    is_cont_rev_handling\n    \n , \n    cast(null as TEXT) as \n    \n    is_enforce_min_qty_internally\n    \n , \n    cast(null as TEXT) as \n    \n    is_hold_rev_rec\n    \n , \n    cast(null as TEXT) as \n    \n    is_moss\n    \n , \n    cast(null as TEXT) as \n    \n    is_phantom\n    \n , \n    cast(null as TEXT) as \n    \n    is_special_order_item\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as TEXT) as \n    \n    isonline\n    \n , \n    cast(null as TEXT) as \n    \n    istaxable\n    \n , \n    cast(null as float) as \n    \n    item_defined_cost\n    \n , \n    cast(null as TEXT) as \n    \n    item_extid\n    \n , \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    cast(null as float) as \n    \n    item_image\n    \n , \n    cast(null as TEXT) as \n    \n    item_revenue_category\n    \n , \n    cast(null as float) as \n    \n    item_term_id\n    \n , \n    cast(null as timestamp) as \n    \n    last_cogs_correction\n    \n , \n    cast(null as timestamp) as \n    \n    last_invt_count_date\n    \n , \n    cast(null as float) as \n    \n    last_purchase_price\n    \n , \n    cast(null as float) as \n    \n    location_id\n    \n , \n    cast(null as TEXT) as \n    \n    lot_numbered_item\n    \n , \n    cast(null as TEXT) as \n    \n    lot_sizing_method\n    \n , \n    cast(null as TEXT) as \n    \n    manufacturer\n    \n , \n    cast(null as TEXT) as \n    \n    manufacturing_charge_item\n    \n , \n    cast(null as TEXT) as \n    \n    match_bill_to_receipt\n    \n , \n    cast(null as TEXT) as \n    \n    matrix_type\n    \n , \n    cast(null as float) as \n    \n    maximum_quantity\n    \n , \n    cast(null as float) as \n    \n    minimum_quantity\n    \n , \n    cast(null as timestamp) as \n    \n    modified\n    \n , \n    cast(null as TEXT) as \n    \n    mpn\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as float) as \n    \n    nature_of_transaction_codes_id\n    \n , \n    cast(null as timestamp) as \n    \n    next_invt_count_date\n    \n , \n    cast(null as float) as \n    \n    ng_asset_type_id\n    \n , \n    cast(null as float) as \n    \n    ns_lead_time\n    \n , \n    cast(null as TEXT) as \n    \n    offersupport\n    \n , \n    cast(null as TEXT) as \n    \n    onspecial\n    \n , \n    cast(null as TEXT) as \n    \n    overhead_type\n    \n , \n    cast(null as float) as \n    \n    parent_id\n    \n , \n    cast(null as float) as \n    \n    payment_method_id\n    \n , \n    cast(null as float) as \n    \n    periodic_lot_size_days\n    \n , \n    cast(null as TEXT) as \n    \n    periodic_lot_size_type\n    \n , \n    cast(null as float) as \n    \n    pref_purchase_tax_id\n    \n , \n    cast(null as float) as \n    \n    pref_sale_tax_id\n    \n , \n    cast(null as float) as \n    \n    pref_stock_level\n    \n , \n    cast(null as TEXT) as \n    \n    prices_include_tax\n    \n , \n    cast(null as float) as \n    \n    pricing_group_id\n    \n , \n    cast(null as TEXT) as \n    \n    print_sub_items\n    \n , \n    cast(null as float) as \n    \n    prod_price_var_account_id\n    \n , \n    cast(null as float) as \n    \n    prod_qty_var_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    prompt_payment_discount_item\n    \n , \n    cast(null as float) as \n    \n    purchase_price_var_account_id\n    \n , \n    cast(null as float) as \n    \n    purchase_unit_id\n    \n , \n    cast(null as TEXT) as \n    \n    purchasedescription\n    \n , \n    cast(null as float) as \n    \n    purchaseorderamount\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantity\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantitydiff\n    \n , \n    cast(null as float) as \n    \n    quantityavailable\n    \n , \n    cast(null as float) as \n    \n    quantitybackordered\n    \n , \n    cast(null as float) as \n    \n    quantityonhand\n    \n , \n    cast(null as float) as \n    \n    receiptamount\n    \n , \n    cast(null as float) as \n    \n    receiptquantity\n    \n , \n    cast(null as float) as \n    \n    receiptquantitydiff\n    \n , \n    cast(null as float) as \n    \n    reorder_multiple\n    \n , \n    cast(null as float) as \n    \n    reorderpoint\n    \n , \n    cast(null as TEXT) as \n    \n    replenishment_method\n    \n , \n    cast(null as TEXT) as \n    \n    resalable\n    \n , \n    cast(null as float) as \n    \n    reschedule_in_days\n    \n , \n    cast(null as float) as \n    \n    reschedule_out_days\n    \n , \n    cast(null as float) as \n    \n    rev_rec_forecast_rule_id\n    \n , \n    cast(null as float) as \n    \n    rev_rec_rule_id\n    \n , \n    cast(null as TEXT) as \n    \n    revenue_allocation_group\n    \n , \n    cast(null as TEXT) as \n    \n    round_up_as_component\n    \n , \n    cast(null as float) as \n    \n    safety_stock_days\n    \n , \n    cast(null as float) as \n    \n    safety_stock_level\n    \n , \n    cast(null as float) as \n    \n    sale_unit_id\n    \n , \n    cast(null as TEXT) as \n    \n    salesdescription\n    \n , \n    cast(null as TEXT) as \n    \n    salesforce_id\n    \n , \n    cast(null as TEXT) as \n    \n    salesprice\n    \n , \n    cast(null as float) as \n    \n    scrap_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    serialized_item\n    \n , \n    cast(null as float) as \n    \n    shippingcost\n    \n , \n    cast(null as TEXT) as \n    \n    special_work_order_item\n    \n , \n    cast(null as TEXT) as \n    \n    specialsdescription\n    \n , \n    cast(null as float) as \n    \n    stock_unit_id\n    \n , \n    cast(null as TEXT) as \n    \n    storedescription\n    \n , \n    cast(null as TEXT) as \n    \n    storedetaileddescription\n    \n , \n    cast(null as TEXT) as \n    \n    storedisplayname\n    \n , \n    cast(null as TEXT) as \n    \n    subtype\n    \n , \n    cast(null as TEXT) as \n    \n    supplementary_unit__abberviat\n    \n , \n    cast(null as float) as \n    \n    supplementary_unit_id\n    \n , \n    cast(null as float) as \n    \n    supply_time_fence\n    \n , \n    cast(null as TEXT) as \n    \n    supply_type\n    \n , \n    cast(null as float) as \n    \n    tax_item_id\n    \n , \n    cast(null as float) as \n    \n    totalvalue\n    \n , \n    cast(null as float) as \n    \n    transferprice\n    \n , \n    \n    \n    type_name\n    \n as \n    \n    type_name\n    \n, \n    cast(null as float) as \n    \n    type_of_goods_id\n    \n , \n    cast(null as TEXT) as \n    \n    udf1\n    \n , \n    cast(null as TEXT) as \n    \n    udf2\n    \n , \n    cast(null as TEXT) as \n    \n    un_number\n    \n , \n    cast(null as float) as \n    \n    unbuild_variance_account_id\n    \n , \n    cast(null as float) as \n    \n    units_type_id\n    \n , \n    cast(null as TEXT) as \n    \n    upc_code\n    \n , \n    cast(null as TEXT) as \n    \n    use_component_yield\n    \n , \n    cast(null as float) as \n    \n    vendor_id\n    \n , \n    cast(null as TEXT) as \n    \n    vendorname\n    \n , \n    cast(null as float) as \n    \n    vendreturn_variance_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    vsoe_deferral\n    \n , \n    cast(null as TEXT) as \n    \n    vsoe_delivered\n    \n , \n    cast(null as TEXT) as \n    \n    vsoe_discount\n    \n , \n    cast(null as float) as \n    \n    vsoe_price\n    \n , \n    cast(null as float) as \n    \n    weight\n    \n , \n    cast(null as float) as \n    \n    weight_in_user_defined_unit\n    \n , \n    cast(null as float) as \n    \n    weight_unit_index\n    \n , \n    cast(null as float) as \n    \n    wip_account_id\n    \n , \n    cast(null as float) as \n    \n    wip_cost_variance_account_id\n    \n , \n    cast(null as float) as \n    \n    work_order_lead_time\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        item_id,\n        name,\n        type_name,\n        salesdescription as sales_description,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your items_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__items\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:06.472856Z", "completed_at": "2024-03-19T16:06:06.749864Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:06.750679Z", "completed_at": "2024-03-19T16:06:06.750684Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.30812501907348633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__subsidiaries", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__subsidiaries_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    address\n    \n , \n    cast(null as TEXT) as \n    \n    address1\n    \n , \n    cast(null as TEXT) as \n    \n    address2\n    \n , \n    cast(null as float) as \n    \n    base_currency_id\n    \n , \n    cast(null as TEXT) as \n    \n    branch_id\n    \n , \n    cast(null as TEXT) as \n    \n    brn\n    \n , \n    cast(null as TEXT) as \n    \n    city\n    \n , \n    cast(null as TEXT) as \n    \n    country\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as TEXT) as \n    \n    edition\n    \n , \n    cast(null as TEXT) as \n    \n    federal_number\n    \n , \n    \n    \n    fiscal_calendar_id\n    \n as \n    \n    fiscal_calendar_id\n    \n, \n    cast(null as TEXT) as \n    \n    full_name\n    \n , \n    cast(null as TEXT) as \n    \n    is_elimination\n    \n , \n    cast(null as TEXT) as \n    \n    is_moss\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive_bool\n    \n , \n    cast(null as TEXT) as \n    \n    legal_name\n    \n , \n    cast(null as float) as \n    \n    moss_nexus_id\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    cast(null as float) as \n    \n    purchaseorderamount\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantity\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantitydiff\n    \n , \n    cast(null as float) as \n    \n    receiptamount\n    \n , \n    cast(null as float) as \n    \n    receiptquantity\n    \n , \n    cast(null as float) as \n    \n    receiptquantitydiff\n    \n , \n    cast(null as TEXT) as \n    \n    return_address\n    \n , \n    cast(null as TEXT) as \n    \n    return_address1\n    \n , \n    cast(null as TEXT) as \n    \n    return_address2\n    \n , \n    cast(null as TEXT) as \n    \n    return_city\n    \n , \n    cast(null as TEXT) as \n    \n    return_country\n    \n , \n    cast(null as TEXT) as \n    \n    return_state\n    \n , \n    cast(null as TEXT) as \n    \n    return_zipcode\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address1\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address2\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_city\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_country\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_state\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_zipcode\n    \n , \n    cast(null as TEXT) as \n    \n    state\n    \n , \n    cast(null as TEXT) as \n    \n    state_tax_number\n    \n , \n    cast(null as float) as \n    \n    subnav__searchable_subsidiary\n    \n , \n    cast(null as TEXT) as \n    \n    subsidiary_extid\n    \n , \n    \n    \n    subsidiary_id\n    \n as \n    \n    subsidiary_id\n    \n, \n    cast(null as float) as \n    \n    taxonomy_reference_id\n    \n , \n    cast(null as TEXT) as \n    \n    tran_num_prefix\n    \n , \n    cast(null as TEXT) as \n    \n    uen\n    \n , \n    cast(null as TEXT) as \n    \n    url\n    \n , \n    cast(null as TEXT) as \n    \n    zipcode\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        subsidiary_id,\n        fiscal_calendar_id,\n        full_name,\n        name,\n        parent_id,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your subsidiaries_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__subsidiaries\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:06.527593Z", "completed_at": "2024-03-19T16:06:06.792036Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:06.792735Z", "completed_at": "2024-03-19T16:06:06.792741Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2871558666229248, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__locations", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__locations_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        location_id,\n        name,\n        full_name,\n        city,\n        country,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your locations_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__locations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:06.655687Z", "completed_at": "2024-03-19T16:06:06.921825Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:06.922407Z", "completed_at": "2024-03-19T16:06:06.922414Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2862362861633301, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__transaction_lines", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__transaction_lines_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    company_id\n    \n as \n    \n    company_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    memo\n    \n as \n    \n    memo\n    \n, \n    \n    \n    non_posting_line\n    \n as \n    \n    non_posting_line\n    \n, \n    \n    \n    subsidiary_id\n    \n as \n    \n    subsidiary_id\n    \n, \n    \n    \n    transaction_id\n    \n as \n    \n    transaction_id\n    \n, \n    \n    \n    transaction_line_id\n    \n as \n    \n    transaction_line_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        transaction_id,\n        transaction_line_id,\n        subsidiary_id,\n        account_id,\n        company_id,\n        item_id,\n        amount,\n        non_posting_line,\n        class_id,\n        location_id,\n        department_id,\n        memo\n\n        --The below macro adds the fields defined within your transaction_lines_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__transaction_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:06.942735Z", "completed_at": "2024-03-19T16:06:06.951087Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:06.951610Z", "completed_at": "2024-03-19T16:06:06.951616Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010151147842407227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounting_books_accounting_book_id.1b7504d30e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect accounting_book_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounting_books\"\nwhere accounting_book_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:06.953434Z", "completed_at": "2024-03-19T16:06:06.957955Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:06.958579Z", "completed_at": "2024-03-19T16:06:06.958589Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006445646286010742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounting_books_accounting_book_id.70d96d1230", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    accounting_book_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounting_books\"\nwhere accounting_book_id is not null\ngroup by accounting_book_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:06.960561Z", "completed_at": "2024-03-19T16:06:06.963990Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:06.964485Z", "completed_at": "2024-03-19T16:06:06.964491Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005105257034301758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.ec8750b679", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect _fivetran_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounting_period_fiscal_cal\"\nwhere _fivetran_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:06.965995Z", "completed_at": "2024-03-19T16:06:06.970085Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:06.970588Z", "completed_at": "2024-03-19T16:06:06.970594Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005563974380493164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.d2038de348", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    _fivetran_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounting_period_fiscal_cal\"\nwhere _fivetran_id is not null\ngroup by _fivetran_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:06.972147Z", "completed_at": "2024-03-19T16:06:06.975546Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:06.976020Z", "completed_at": "2024-03-19T16:06:06.976026Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004821062088012695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.76e6e71411", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect _fivetran_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounting_book_subsidiaries\"\nwhere _fivetran_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:06.977547Z", "completed_at": "2024-03-19T16:06:06.980435Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:06.980911Z", "completed_at": "2024-03-19T16:06:06.980916Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004354000091552734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.27ddb08396", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    _fivetran_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounting_book_subsidiaries\"\nwhere _fivetran_id is not null\ngroup by _fivetran_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:06.982421Z", "completed_at": "2024-03-19T16:06:06.985792Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:06.986267Z", "completed_at": "2024-03-19T16:06:06.986274Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004920005798339844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.int_netsuite2__accounting_periods", "compiled": true, "compiled_code": "\n\nwith accounting_periods as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounting_periods\"\n),\n\naccounting_period_fiscal_calendars as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounting_period_fiscal_cal\"\n),\n\naccounting_period_hierarchy as (\n\n    select\n        accounting_period_id,\n        parent_id,\n        1 as level,\n        name as full_name\n    from accounting_periods\n    where parent_id is null\n),\n\nunioned as (\n\n    select *\n    from accounting_period_hierarchy\n\n    union all \n\n    select\n        accounting_periods.accounting_period_id,\n        accounting_periods.parent_id,\n        accounting_period_hierarchy.level + 1 as level,\n        accounting_period_hierarchy.full_name || ' : ' || accounting_periods.name as full_name\n    from accounting_periods\n    join accounting_period_hierarchy\n        on accounting_periods.parent_id = accounting_period_hierarchy.accounting_period_id\n),\n\njoined as (\n\n    select \n        accounting_periods.*,\n        accounting_period_fiscal_calendars.fiscal_calendar_id,\n        unioned.full_name\n\n    from accounting_periods\n    left join accounting_period_fiscal_calendars\n        on accounting_periods.accounting_period_id = accounting_period_fiscal_calendars.accounting_period_id\n    left join unioned\n        on accounting_periods.accounting_period_id = unioned.accounting_period_id\n)\n\nselect *\nfrom joined", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__accounting_periods\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:06.988965Z", "completed_at": "2024-03-19T16:06:07.001659Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.003875Z", "completed_at": "2024-03-19T16:06:07.003884Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01914691925048828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounting_periods_accounting_period_id.f2db2c547c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect accounting_period_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounting_periods\"\nwhere accounting_period_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.019203Z", "completed_at": "2024-03-19T16:06:07.060609Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.089445Z", "completed_at": "2024-03-19T16:06:07.089454Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0735471248626709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounting_periods_accounting_period_id.a9d8f4c6e1", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    accounting_period_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounting_periods\"\nwhere accounting_period_id is not null\ngroup by accounting_period_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.095062Z", "completed_at": "2024-03-19T16:06:07.099678Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.100417Z", "completed_at": "2024-03-19T16:06:07.100424Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009961843490600586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounts_account_id.5a542e47a2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounts\"\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.103834Z", "completed_at": "2024-03-19T16:06:07.107605Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.108186Z", "completed_at": "2024-03-19T16:06:07.108193Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0054149627685546875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounts_account_id.23a63b3e17", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounts\"\nwhere account_id is not null\ngroup by account_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.111130Z", "completed_at": "2024-03-19T16:06:07.115072Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.115613Z", "completed_at": "2024-03-19T16:06:07.115620Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005751848220825195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.int_netsuite2__accounts", "compiled": true, "compiled_code": "\n\nwith accounts as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__accounts\"\n),\n\naccount_types as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__account_types\"\n),\n\naccount_hierarchy as (\n\n    select\n        account_id,\n        parent_id,\n        1 as level,\n        account_number || ' - ' || display_name as display_full_name\n    \n    from accounts\n    where parent_id is null\n),\n\nunioned as (\n\n    select * \n    from account_hierarchy\n\n    union all\n\n    select\n        accounts.account_id,\n        accounts.parent_id,\n        account_hierarchy.level + 1 as level,\n        account_hierarchy.display_full_name || ' : ' || accounts.account_number || ' - ' || accounts.display_name as display_full_name\n    \n    from accounts\n    join account_hierarchy\n        on accounts.parent_id = account_hierarchy.account_id \n),\n\njoined as (\n\n    select \n        accounts.*,\n        unioned.display_full_name,\n        account_types.type_name,\n        account_types.is_balancesheet,\n        account_types.is_leftside\n\n    from accounts\n    left join account_types\n        on accounts.account_type_id = account_types.account_type_id\n    left join unioned\n        on accounts.account_id = unioned.account_id\n)\n\nselect *\nfrom joined", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__accounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:06.815673Z", "completed_at": "2024-03-19T16:06:07.091903Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.094661Z", "completed_at": "2024-03-19T16:06:07.094675Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.30662083625793457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__vendors", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__vendors_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    account_owner\n    \n , \n    cast(null as TEXT) as \n    \n    accountnumber\n    \n , \n    cast(null as TEXT) as \n    \n    accounts_email\n    \n , \n    cast(null as float) as \n    \n    annual_revenue\n    \n , \n    cast(null as TEXT) as \n    \n    auto_renewals\n    \n , \n    cast(null as TEXT) as \n    \n    auto_send_statements\n    \n , \n    cast(null as TEXT) as \n    \n    billaddress\n    \n , \n    cast(null as float) as \n    \n    billing_class_id\n    \n , \n    cast(null as TEXT) as \n    \n    city\n    \n , \n    cast(null as TEXT) as \n    \n    comments\n    \n , \n    cast(null as TEXT) as \n    \n    companyname\n    \n , \n    cast(null as TEXT) as \n    \n    country\n    \n , \n    \n    \n    create_date\n    \n as \n    \n    create_date\n    \n, \n    cast(null as float) as \n    \n    creditlimit\n    \n , \n    cast(null as float) as \n    \n    currency_id\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as TEXT) as \n    \n    dic\n    \n , \n    cast(null as TEXT) as \n    \n    email\n    \n , \n    cast(null as TEXT) as \n    \n    email_bill_payment_vouchers\n    \n , \n    cast(null as TEXT) as \n    \n    email_cash_sales\n    \n , \n    cast(null as TEXT) as \n    \n    email_credit_notes\n    \n , \n    cast(null as TEXT) as \n    \n    email_invoices\n    \n , \n    cast(null as TEXT) as \n    \n    email_item_fulfilments\n    \n , \n    cast(null as TEXT) as \n    \n    email_purchase_orders\n    \n , \n    cast(null as TEXT) as \n    \n    email_quotes\n    \n , \n    cast(null as TEXT) as \n    \n    email_sales_orders\n    \n , \n    cast(null as TEXT) as \n    \n    email_statements\n    \n , \n    cast(null as TEXT) as \n    \n    employee_number\n    \n , \n    cast(null as TEXT) as \n    \n    exemption_certificate_no\n    \n , \n    cast(null as float) as \n    \n    expense_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    fax\n    \n , \n    cast(null as TEXT) as \n    \n    full_name\n    \n , \n    cast(null as TEXT) as \n    \n    home_phone\n    \n , \n    cast(null as TEXT) as \n    \n    hris_id\n    \n , \n    cast(null as TEXT) as \n    \n    ico\n    \n , \n    cast(null as TEXT) as \n    \n    id_number_in_the_country_of_r\n    \n , \n    cast(null as float) as \n    \n    id_type_in_the_country_of_r_id\n    \n , \n    cast(null as float) as \n    \n    in_transit_balance\n    \n , \n    cast(null as TEXT) as \n    \n    incoterm\n    \n , \n    cast(null as float) as \n    \n    industry_id\n    \n , \n    cast(null as TEXT) as \n    \n    invoice_via_procurement_syste\n    \n , \n    cast(null as TEXT) as \n    \n    invoicing_details\n    \n , \n    cast(null as TEXT) as \n    \n    is1099eligible\n    \n , \n    cast(null as TEXT) as \n    \n    is_partner\n    \n , \n    cast(null as TEXT) as \n    \n    is_person\n    \n , \n    cast(null as TEXT) as \n    \n    isemailhtml\n    \n , \n    cast(null as TEXT) as \n    \n    isemailpdf\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as float) as \n    \n    labor_cost\n    \n , \n    cast(null as timestamp) as \n    \n    last_modified_date\n    \n , \n    cast(null as timestamp) as \n    \n    last_sales_activity\n    \n , \n    cast(null as TEXT) as \n    \n    line1\n    \n , \n    cast(null as TEXT) as \n    \n    line2\n    \n , \n    cast(null as TEXT) as \n    \n    line3\n    \n , \n    cast(null as TEXT) as \n    \n    loginaccess\n    \n , \n    cast(null as TEXT) as \n    \n    lsa_link\n    \n , \n    cast(null as TEXT) as \n    \n    lsa_link_name\n    \n , \n    cast(null as TEXT) as \n    \n    mobile_phone\n    \n , \n    cast(null as timestamp) as \n    \n    msa_effective_date\n    \n , \n    cast(null as TEXT) as \n    \n    name\n    \n , \n    cast(null as float) as \n    \n    no__of_employees\n    \n , \n    cast(null as float) as \n    \n    openbalance\n    \n , \n    cast(null as float) as \n    \n    openbalance_foreign\n    \n , \n    cast(null as float) as \n    \n    payables_account_id\n    \n , \n    cast(null as float) as \n    \n    payment_terms_id\n    \n , \n    cast(null as TEXT) as \n    \n    phone\n    \n , \n    cast(null as float) as \n    \n    prepayment_balance\n    \n , \n    cast(null as TEXT) as \n    \n    printoncheckas\n    \n , \n    cast(null as float) as \n    \n    purchaseorderamount\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantity\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantitydiff\n    \n , \n    cast(null as TEXT) as \n    \n    purchases_email\n    \n , \n    cast(null as float) as \n    \n    receiptamount\n    \n , \n    cast(null as float) as \n    \n    receiptquantity\n    \n , \n    cast(null as float) as \n    \n    receiptquantitydiff\n    \n , \n    cast(null as float) as \n    \n    represents_subsidiary_id\n    \n , \n    cast(null as TEXT) as \n    \n    restrict_access_to_expensify\n    \n , \n    cast(null as TEXT) as \n    \n    salesforce_id\n    \n , \n    cast(null as TEXT) as \n    \n    shipaddress\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_email\n    \n , \n    cast(null as TEXT) as \n    \n    state\n    \n , \n    cast(null as float) as \n    \n    subsidiary\n    \n , \n    cast(null as TEXT) as \n    \n    tax_contact_first_name\n    \n , \n    cast(null as float) as \n    \n    tax_contact_id\n    \n , \n    cast(null as TEXT) as \n    \n    tax_contact_last_name\n    \n , \n    cast(null as TEXT) as \n    \n    tax_contact_middle_name\n    \n , \n    cast(null as TEXT) as \n    \n    tax_number\n    \n , \n    cast(null as TEXT) as \n    \n    taxidnum\n    \n , \n    cast(null as float) as \n    \n    time_approver_id\n    \n , \n    cast(null as TEXT) as \n    \n    transactions_need_approval\n    \n , \n    cast(null as TEXT) as \n    \n    uen\n    \n , \n    cast(null as float) as \n    \n    unbilled_orders\n    \n , \n    cast(null as float) as \n    \n    unbilled_orders_foreign\n    \n , \n    cast(null as TEXT) as \n    \n    url\n    \n , \n    cast(null as TEXT) as \n    \n    vat_registration_no\n    \n , \n    cast(null as TEXT) as \n    \n    vendor_extid\n    \n , \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n, \n    \n    \n    vendor_type_id\n    \n as \n    \n    vendor_type_id\n    \n, \n    cast(null as TEXT) as \n    \n    zipcode\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        vendor_id,\n        companyname as company_name,\n        create_date as create_date_at,\n        vendor_type_id,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your vendors_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__vendors\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.118208Z", "completed_at": "2024-03-19T16:06:07.123970Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.129157Z", "completed_at": "2024-03-19T16:06:07.129165Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013098955154418945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__account_types_account_type_id.20889967ef", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_type_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__account_types\"\nwhere account_type_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.124265Z", "completed_at": "2024-03-19T16:06:07.129667Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.131040Z", "completed_at": "2024-03-19T16:06:07.131044Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008822202682495117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__account_types_account_type_id.aaea9bec0f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_type_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__account_types\"\nwhere account_type_id is not null\ngroup by account_type_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.133034Z", "completed_at": "2024-03-19T16:06:07.141657Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.142256Z", "completed_at": "2024-03-19T16:06:07.142267Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011957883834838867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__classes_class_id.799b01ffba", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect class_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__classes\"\nwhere class_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.137826Z", "completed_at": "2024-03-19T16:06:07.142627Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.144293Z", "completed_at": "2024-03-19T16:06:07.144298Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008173942565917969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__classes_class_id.d069e30c98", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    class_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__classes\"\nwhere class_id is not null\ngroup by class_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.145991Z", "completed_at": "2024-03-19T16:06:07.153042Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.153692Z", "completed_at": "2024-03-19T16:06:07.153700Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009918212890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__currencies_currency_id.7eff9f9c1c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__currencies\"\nwhere currency_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.149853Z", "completed_at": "2024-03-19T16:06:07.153927Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.160699Z", "completed_at": "2024-03-19T16:06:07.160711Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013402938842773438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__currencies_currency_id.50d9c37c78", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    currency_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__currencies\"\nwhere currency_id is not null\ngroup by currency_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.170852Z", "completed_at": "2024-03-19T16:06:07.176443Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.181090Z", "completed_at": "2024-03-19T16:06:07.181093Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.020930051803588867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__customers_customer_id.65a5ae302a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__customers\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.176676Z", "completed_at": "2024-03-19T16:06:07.181574Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.183110Z", "completed_at": "2024-03-19T16:06:07.183115Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00904393196105957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__customers_customer_id.05ca0360f2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.184683Z", "completed_at": "2024-03-19T16:06:07.192325Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.192960Z", "completed_at": "2024-03-19T16:06:07.192967Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010174274444580078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__departments_department_id.7395bbfe71", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect department_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__departments\"\nwhere department_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.188908Z", "completed_at": "2024-03-19T16:06:07.193905Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.195394Z", "completed_at": "2024-03-19T16:06:07.195399Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007971763610839844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__departments_department_id.13e4897f0b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    department_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__departments\"\nwhere department_id is not null\ngroup by department_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.196367Z", "completed_at": "2024-03-19T16:06:07.204867Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.205689Z", "completed_at": "2024-03-19T16:06:07.205697Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011213064193725586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.09703507c6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect consolidated_exchange_rate_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__consolidated_exchange_rates\"\nwhere consolidated_exchange_rate_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:06.774246Z", "completed_at": "2024-03-19T16:06:07.175979Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.180742Z", "completed_at": "2024-03-19T16:06:07.180750Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.43603086471557617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__transactions", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__transactions_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    accounting_period_id\n    \n as \n    \n    accounting_period_id\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    is_advanced_intercompany\n    \n as \n    \n    is_advanced_intercompany\n    \n, \n    \n    \n    is_intercompany\n    \n as \n    \n    is_intercompany\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    cast(null as timestamp) as \n    \n    trandate\n    \n , \n    \n    \n    transaction_id\n    \n as \n    \n    transaction_id\n    \n, \n    \n    \n    transaction_type\n    \n as \n    \n    transaction_type\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        transaction_id,\n        status,\n        trandate as transaction_date,\n        currency_id,\n        accounting_period_id,\n        due_date as due_date_at,\n        transaction_type,\n        is_intercompany,\n        is_advanced_intercompany,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your transactions_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:06.786836Z", "completed_at": "2024-03-19T16:06:07.163038Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.175487Z", "completed_at": "2024-03-19T16:06:07.175494Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.42402100563049316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__vendor_types", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__vendor_types_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as float) as \n    \n    parent_id\n    \n , \n    cast(null as TEXT) as \n    \n    vendor_type_extid\n    \n , \n    \n    \n    vendor_type_id\n    \n as \n    \n    vendor_type_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        vendor_type_id,\n        name,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__vendor_types\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.200796Z", "completed_at": "2024-03-19T16:06:07.206492Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.208944Z", "completed_at": "2024-03-19T16:06:07.208954Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010671138763427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.2d4725bb7a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    consolidated_exchange_rate_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__consolidated_exchange_rates\"\nwhere consolidated_exchange_rate_id is not null\ngroup by consolidated_exchange_rate_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.211778Z", "completed_at": "2024-03-19T16:06:07.219016Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.235807Z", "completed_at": "2024-03-19T16:06:07.235817Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.028490066528320312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__entities_entity_id.f22c18cfa2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect entity_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__entities\"\nwhere entity_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.220930Z", "completed_at": "2024-03-19T16:06:07.237231Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.239828Z", "completed_at": "2024-03-19T16:06:07.239836Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.030206918716430664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__entities_entity_id.f9acd04f50", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    entity_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__entities\"\nwhere entity_id is not null\ngroup by entity_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.231468Z", "completed_at": "2024-03-19T16:06:07.237526Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.240135Z", "completed_at": "2024-03-19T16:06:07.240139Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02879500389099121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__items_item_id.e216b5b06a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__items\"\nwhere item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.226553Z", "completed_at": "2024-03-19T16:06:07.238335Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.245410Z", "completed_at": "2024-03-19T16:06:07.245417Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.030748844146728516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.int_netsuite2__customers", "compiled": true, "compiled_code": "\n\nwith customers as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__customers\"\n),\n\nentity_address as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__entity_address\"\n),\n\njoined as (\n\n    select \n        customers.*,\n        entity_address.city,\n        entity_address.state,\n        entity_address.zipcode,\n        entity_address.country\n\n    from customers\n    left join entity_address\n        on coalesce(customers.default_billing_address_id, customers.default_shipping_address_id) = entity_address.nkey\n)\n\nselect *\nfrom joined", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__customers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.240540Z", "completed_at": "2024-03-19T16:06:07.247989Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.251145Z", "completed_at": "2024-03-19T16:06:07.251151Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01973104476928711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__jobs_job_id.d7b5b06b33", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect job_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__jobs\"\nwhere job_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.251640Z", "completed_at": "2024-03-19T16:06:07.262570Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.267551Z", "completed_at": "2024-03-19T16:06:07.267558Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020192623138427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__items_item_id.3fcafd9eee", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    item_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__items\"\nwhere item_id is not null\ngroup by item_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.254426Z", "completed_at": "2024-03-19T16:06:07.262849Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.267870Z", "completed_at": "2024-03-19T16:06:07.267880Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02043890953063965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__jobs_job_id.c294ea849c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    job_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__jobs\"\nwhere job_id is not null\ngroup by job_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.257952Z", "completed_at": "2024-03-19T16:06:07.263109Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.268277Z", "completed_at": "2024-03-19T16:06:07.268281Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020371198654174805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.int_netsuite2__locations", "compiled": true, "compiled_code": "\n\nwith locations as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__locations\"\n),\n\nlocation_main_address as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__location_main_address\"\n),\n\njoined as (\n\n    select \n        locations.*,\n        location_main_address.city,\n        location_main_address.state,\n        location_main_address.zipcode,\n        location_main_address.country\n\n    from locations\n    left join location_main_address\n        on locations.main_address_id = location_main_address.nkey\n)\n\nselect *\nfrom joined", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__locations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.264410Z", "completed_at": "2024-03-19T16:06:07.270535Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.273654Z", "completed_at": "2024-03-19T16:06:07.273662Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012687206268310547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__locations_location_id.c335a5985e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__locations\"\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.279386Z", "completed_at": "2024-03-19T16:06:07.295183Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.297385Z", "completed_at": "2024-03-19T16:06:07.297396Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.026112079620361328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_accounting_lines_transaction_id__transaction_line_id__accounting_book_id.ac47a8ecc1", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, transaction_line_id, accounting_book_id\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__transaction_accounting_lines\"\n    group by transaction_id, transaction_line_id, accounting_book_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.286396Z", "completed_at": "2024-03-19T16:06:07.295576Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.297673Z", "completed_at": "2024-03-19T16:06:07.297676Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.026159048080444336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_id.f28afbfa25", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__transaction_accounting_lines\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.275232Z", "completed_at": "2024-03-19T16:06:07.295890Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.298191Z", "completed_at": "2024-03-19T16:06:07.298195Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02791285514831543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__locations_location_id.f1469a5149", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    location_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__locations\"\nwhere location_id is not null\ngroup by location_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.291296Z", "completed_at": "2024-03-19T16:06:07.296801Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.299514Z", "completed_at": "2024-03-19T16:06:07.299518Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010954856872558594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_line_id.0f72869807", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__transaction_accounting_lines\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.305159Z", "completed_at": "2024-03-19T16:06:07.366169Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.366941Z", "completed_at": "2024-03-19T16:06:07.366947Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.06613302230834961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transactions_transaction_id.b4f6c6a72b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__transactions\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.360477Z", "completed_at": "2024-03-19T16:06:07.366720Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.368802Z", "completed_at": "2024-03-19T16:06:07.368805Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06630825996398926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__subsidiaries_subsidiary_id.0ab6516626", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subsidiary_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__subsidiaries\"\nwhere subsidiary_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.308532Z", "completed_at": "2024-03-19T16:06:07.367633Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.370337Z", "completed_at": "2024-03-19T16:06:07.370341Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.06885409355163574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__transactions_transaction_id.af3d15dce4", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__transactions\"\nwhere transaction_id is not null\ngroup by transaction_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.363160Z", "completed_at": "2024-03-19T16:06:07.367926Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.370600Z", "completed_at": "2024-03-19T16:06:07.370603Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0676419734954834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__subsidiaries_subsidiary_id.8edc974229", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    subsidiary_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__subsidiaries\"\nwhere subsidiary_id is not null\ngroup by subsidiary_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.373791Z", "completed_at": "2024-03-19T16:06:07.382779Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.390669Z", "completed_at": "2024-03-19T16:06:07.390677Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.021069049835205078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.int_netsuite2__transaction_lines", "compiled": true, "compiled_code": "\n\nwith transaction_lines as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__transaction_lines\"\n),\n\ntransaction_accounting_lines as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__transaction_accounting_lines\"\n),\n\n\n\njoined as (\n\n    select \n        transaction_lines.*,\n        transaction_accounting_lines.account_id,\n\n        \n        \n        transaction_accounting_lines.exchange_rate,\n        transaction_accounting_lines.amount,\n        transaction_accounting_lines.credit_amount,\n        transaction_accounting_lines.debit_amount,\n        transaction_accounting_lines.paid_amount,\n        transaction_accounting_lines.unpaid_amount,\n        transaction_accounting_lines.is_posting\n\n    from transaction_lines\n    left join transaction_accounting_lines\n        on transaction_lines.transaction_line_id = transaction_accounting_lines.transaction_line_id\n        and transaction_lines.transaction_id = transaction_accounting_lines.transaction_id\n        \n    \n\n)\n\nselect *\nfrom joined", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__transaction_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.379128Z", "completed_at": "2024-03-19T16:06:07.389697Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.390937Z", "completed_at": "2024-03-19T16:06:07.390941Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01980876922607422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_lines_transaction_id__transaction_line_id.07b823514f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, transaction_line_id\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__transaction_lines\"\n    group by transaction_id, transaction_line_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.383179Z", "completed_at": "2024-03-19T16:06:07.391193Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.393986Z", "completed_at": "2024-03-19T16:06:07.393995Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016999006271362305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_id.267b150890", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__transaction_lines\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.386635Z", "completed_at": "2024-03-19T16:06:07.391413Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.394236Z", "completed_at": "2024-03-19T16:06:07.394240Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017106056213378906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_line_id.a82e70adc1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__transaction_lines\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.399952Z", "completed_at": "2024-03-19T16:06:07.406976Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.411963Z", "completed_at": "2024-03-19T16:06:07.411969Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018230915069580078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__vendors_vendor_id.415829ac1d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    vendor_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__vendors\"\nwhere vendor_id is not null\ngroup by vendor_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.397023Z", "completed_at": "2024-03-19T16:06:07.407224Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.412221Z", "completed_at": "2024-03-19T16:06:07.412224Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019097089767456055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__vendors_vendor_id.777b758daf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__vendors\"\nwhere vendor_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.404023Z", "completed_at": "2024-03-19T16:06:07.411676Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.414186Z", "completed_at": "2024-03-19T16:06:07.414193Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012928962707519531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__vendor_categories_vendor_category_id.60acd9acb2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_category_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__vendor_categories\"\nwhere vendor_category_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.407436Z", "completed_at": "2024-03-19T16:06:07.412436Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.415043Z", "completed_at": "2024-03-19T16:06:07.415047Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01367497444152832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__vendor_categories_vendor_category_id.874da088c6", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    vendor_category_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__vendor_categories\"\nwhere vendor_category_id is not null\ngroup by vendor_category_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.421635Z", "completed_at": "2024-03-19T16:06:07.431760Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.433059Z", "completed_at": "2024-03-19T16:06:07.433066Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01826190948486328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__accounting_books_accounting_book_id.22e0106417", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    accounting_book_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounting_books\"\nwhere accounting_book_id is not null\ngroup by accounting_book_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.418557Z", "completed_at": "2024-03-19T16:06:07.432217Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.433800Z", "completed_at": "2024-03-19T16:06:07.433803Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019782066345214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__accounting_books_accounting_book_id.12972ee6fc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect accounting_book_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounting_books\"\nwhere accounting_book_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.429092Z", "completed_at": "2024-03-19T16:06:07.433303Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.436216Z", "completed_at": "2024-03-19T16:06:07.436221Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013931035995483398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__accounting_periods_accounting_period_id.5c1c46821c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect accounting_period_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounting_periods\"\nwhere accounting_period_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.425649Z", "completed_at": "2024-03-19T16:06:07.433525Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.436488Z", "completed_at": "2024-03-19T16:06:07.436491Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020626306533813477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__accounting_periods_accounting_period_id__fiscal_calendar_id.43005ecb69", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        accounting_period_id, fiscal_calendar_id\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounting_periods\"\n    group by accounting_period_id, fiscal_calendar_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.440438Z", "completed_at": "2024-03-19T16:06:07.449207Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.456014Z", "completed_at": "2024-03-19T16:06:07.456021Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.020242929458618164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__accounting_periods_fiscal_calendar_id.8d75190563", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fiscal_calendar_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounting_periods\"\nwhere fiscal_calendar_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.445387Z", "completed_at": "2024-03-19T16:06:07.455106Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.456297Z", "completed_at": "2024-03-19T16:06:07.456301Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0185699462890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__classes_class_id.462bfda765", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect class_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__classes\"\nwhere class_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.449491Z", "completed_at": "2024-03-19T16:06:07.456557Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.459087Z", "completed_at": "2024-03-19T16:06:07.459092Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01612091064453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__classes_class_id.c63c54840b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    class_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__classes\"\nwhere class_id is not null\ngroup by class_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.452358Z", "completed_at": "2024-03-19T16:06:07.456774Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.459397Z", "completed_at": "2024-03-19T16:06:07.459402Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016059160232543945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__accounts_account_id.f03cddbace", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounts\"\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.462240Z", "completed_at": "2024-03-19T16:06:07.470964Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.478086Z", "completed_at": "2024-03-19T16:06:07.478093Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019451141357421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__accounts_account_id.e94563d281", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounts\"\nwhere account_id is not null\ngroup by account_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.465238Z", "completed_at": "2024-03-19T16:06:07.474270Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.478385Z", "completed_at": "2024-03-19T16:06:07.478389Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019832134246826172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.83de8c8e97", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect consolidated_exchange_rate_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__consolidated_exchange_rates\"\nwhere consolidated_exchange_rate_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.471264Z", "completed_at": "2024-03-19T16:06:07.478635Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.481246Z", "completed_at": "2024-03-19T16:06:07.481250Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013388872146606445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.2ca94ecb54", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    consolidated_exchange_rate_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__consolidated_exchange_rates\"\nwhere consolidated_exchange_rate_id is not null\ngroup by consolidated_exchange_rate_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.474568Z", "completed_at": "2024-03-19T16:06:07.479494Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.481849Z", "completed_at": "2024-03-19T16:06:07.481852Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01365804672241211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__currencies_currency_id.e8b331ffb3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__currencies\"\nwhere currency_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.484412Z", "completed_at": "2024-03-19T16:06:07.491604Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.499502Z", "completed_at": "2024-03-19T16:06:07.499509Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0192410945892334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__currencies_currency_id.09ab867f2c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    currency_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__currencies\"\nwhere currency_id is not null\ngroup by currency_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.487667Z", "completed_at": "2024-03-19T16:06:07.495811Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.499843Z", "completed_at": "2024-03-19T16:06:07.499846Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019204139709472656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__customers_customer_id.bbb9eed2dc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__customers\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.492116Z", "completed_at": "2024-03-19T16:06:07.500167Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.503011Z", "completed_at": "2024-03-19T16:06:07.503016Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014033794403076172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__customers_customer_id.7c9debe8d9", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.496454Z", "completed_at": "2024-03-19T16:06:07.501675Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.504083Z", "completed_at": "2024-03-19T16:06:07.504087Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014535903930664062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__departments_department_id.6d96b00002", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect department_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__departments\"\nwhere department_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.509082Z", "completed_at": "2024-03-19T16:06:07.516730Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.521136Z", "completed_at": "2024-03-19T16:06:07.521144Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018452882766723633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__income_accounts_income_account_id.a38311d5f9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect income_account_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__income_accounts\"\nwhere income_account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.506087Z", "completed_at": "2024-03-19T16:06:07.516999Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.521691Z", "completed_at": "2024-03-19T16:06:07.521695Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01986098289489746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__departments_department_id.2df16a9aa1", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    department_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__departments\"\nwhere department_id is not null\ngroup by department_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.513787Z", "completed_at": "2024-03-19T16:06:07.521417Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.523979Z", "completed_at": "2024-03-19T16:06:07.523984Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013280868530273438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__income_accounts_income_account_id.28b4166a07", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    income_account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__income_accounts\"\nwhere income_account_id is not null\ngroup by income_account_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.517409Z", "completed_at": "2024-03-19T16:06:07.522486Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.525033Z", "completed_at": "2024-03-19T16:06:07.525038Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015105962753295898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__expense_accounts_expense_account_id.4de138ed23", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect expense_account_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__expense_accounts\"\nwhere expense_account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.528699Z", "completed_at": "2024-03-19T16:06:07.536360Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.546438Z", "completed_at": "2024-03-19T16:06:07.546447Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.022935152053833008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__expense_accounts_expense_account_id.5e813830ff", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    expense_account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__expense_accounts\"\nwhere expense_account_id is not null\ngroup by expense_account_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.532452Z", "completed_at": "2024-03-19T16:06:07.539947Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.547051Z", "completed_at": "2024-03-19T16:06:07.547054Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.022749900817871094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__items_item_id.ba322d7da3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__items\"\nwhere item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.536863Z", "completed_at": "2024-03-19T16:06:07.546796Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.549189Z", "completed_at": "2024-03-19T16:06:07.549193Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01839590072631836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__items_item_id.760a674654", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    item_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__items\"\nwhere item_id is not null\ngroup by item_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.540585Z", "completed_at": "2024-03-19T16:06:07.548118Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.550768Z", "completed_at": "2024-03-19T16:06:07.550773Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016920804977416992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.int_netsuite__accountxperiod_exchange_rate_map", "compiled": true, "compiled_code": "\n\nwith accounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounts\"\n), \n\naccounting_books as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounting_books\"\n), \n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__subsidiaries\"\n),\n\nconsolidated_exchange_rates as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__consolidated_exchange_rates\"\n),\n\nperiod_exchange_rate_map as ( -- exchange rates used, by accounting period, to convert to parent subsidiary\n  select\n    consolidated_exchange_rates.accounting_period_id,\n    consolidated_exchange_rates.average_rate,\n    consolidated_exchange_rates.current_rate,\n    consolidated_exchange_rates.historical_rate,\n    consolidated_exchange_rates.from_subsidiary_id,\n    consolidated_exchange_rates.to_subsidiary_id\n  from consolidated_exchange_rates\n\n  where consolidated_exchange_rates.to_subsidiary_id in (select subsidiary_id from subsidiaries where parent_id is null)  -- constrait - only the primary subsidiary has no parent\n    and consolidated_exchange_rates.accounting_book_id in (select accounting_book_id from accounting_books where lower(is_primary) = 'yes')\n), \n\naccountxperiod_exchange_rate_map as ( -- account table with exchange rate details by accounting period\n  select\n    period_exchange_rate_map.accounting_period_id,\n    period_exchange_rate_map.from_subsidiary_id,\n    period_exchange_rate_map.to_subsidiary_id,\n    accounts.account_id,\n    case \n      when lower(accounts.general_rate_type) = 'historical' then period_exchange_rate_map.historical_rate\n      when lower(accounts.general_rate_type) = 'current' then period_exchange_rate_map.current_rate\n      when lower(accounts.general_rate_type) = 'average' then period_exchange_rate_map.average_rate\n      else null\n        end as exchange_rate\n  from accounts\n  \n  cross join period_exchange_rate_map\n)\n\nselect * \nfrom accountxperiod_exchange_rate_map", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite__accountxperiod_exchange_rate_map\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.553009Z", "completed_at": "2024-03-19T16:06:07.568586Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.574342Z", "completed_at": "2024-03-19T16:06:07.574349Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.026227951049804688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.int_netsuite__transaction_and_reporting_periods", "compiled": true, "compiled_code": "\n\nwith accounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounting_periods\"\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__subsidiaries\"\n),\n\ntransaction_and_reporting_periods as ( \n  select\n    base.accounting_period_id as accounting_period_id,\n    multiplier.accounting_period_id as reporting_accounting_period_id\n  from accounting_periods as base\n\n  join accounting_periods as multiplier\n    on multiplier.starting_at >= base.starting_at\n      and multiplier.quarter = base.quarter\n      and multiplier.year_0 = base.year_0\n      and multiplier.fiscal_calendar_id = base.fiscal_calendar_id\n      and cast(multiplier.starting_at as timestamp) <= now() \n\n  where lower(base.quarter) = 'no'\n    and lower(base.year_0) = 'no'\n    and base.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null) -- fiscal calendar will align with parent subsidiary's default calendar\n)\n\nselect * \nfrom transaction_and_reporting_periods", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite__transaction_and_reporting_periods\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.560693Z", "completed_at": "2024-03-19T16:06:07.569250Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.574671Z", "completed_at": "2024-03-19T16:06:07.574675Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.025873899459838867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__subsidiaries_subsidiary_id.9aa9c2d015", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subsidiary_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__subsidiaries\"\nwhere subsidiary_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.565099Z", "completed_at": "2024-03-19T16:06:07.573947Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.577513Z", "completed_at": "2024-03-19T16:06:07.577519Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01961994171142578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__subsidiaries_subsidiary_id.7d0dfe64f0", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    subsidiary_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__subsidiaries\"\nwhere subsidiary_id is not null\ngroup by subsidiary_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.569944Z", "completed_at": "2024-03-19T16:06:07.576554Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.580047Z", "completed_at": "2024-03-19T16:06:07.580051Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017657041549682617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__locations_location_id.9f68ecaa6b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__locations\"\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.587719Z", "completed_at": "2024-03-19T16:06:07.596548Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.600940Z", "completed_at": "2024-03-19T16:06:07.600949Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.021771669387817383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__transaction_lines_transaction_id__transaction_line_id.651bc3120d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, transaction_line_id\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__transaction_lines\"\n    group by transaction_id, transaction_line_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.583169Z", "completed_at": "2024-03-19T16:06:07.599696Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.601750Z", "completed_at": "2024-03-19T16:06:07.601754Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02366328239440918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__locations_location_id.3857e2cac2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    location_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__locations\"\nwhere location_id is not null\ngroup by location_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.591832Z", "completed_at": "2024-03-19T16:06:07.600321Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.602553Z", "completed_at": "2024-03-19T16:06:07.602557Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.021569013595581055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_id.e8055d67bc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__transaction_lines\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.596869Z", "completed_at": "2024-03-19T16:06:07.601495Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.604597Z", "completed_at": "2024-03-19T16:06:07.604601Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01465606689453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_line_id.420bd8637c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__transaction_lines\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.608017Z", "completed_at": "2024-03-19T16:06:07.621387Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.626585Z", "completed_at": "2024-03-19T16:06:07.626593Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.022664785385131836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.int_netsuite2__tran_and_reporting_periods", "compiled": true, "compiled_code": "\n\nwith accounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__accounting_periods\"\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__subsidiaries\"\n),\n\ntransaction_and_reporting_periods as ( \n  select\n    base.accounting_period_id as accounting_period_id,\n    multiplier.accounting_period_id as reporting_accounting_period_id\n  from accounting_periods as base\n\n  join accounting_periods as multiplier\n    on multiplier.starting_at >= base.starting_at\n      and multiplier.is_quarter = base.is_quarter\n      and multiplier.is_year = base.is_year -- this was year_0 in netsuite1\n      and multiplier.fiscal_calendar_id = base.fiscal_calendar_id\n      and cast(multiplier.starting_at as timestamp) <= now() \n\n  where not base.is_quarter\n    and not base.is_year\n    and base.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null) -- fiscal calendar will align with parent subsidiary's default calendar\n)\n\nselect * \nfrom transaction_and_reporting_periods", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__tran_and_reporting_periods\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.612530Z", "completed_at": "2024-03-19T16:06:07.625937Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.628137Z", "completed_at": "2024-03-19T16:06:07.628140Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02302694320678711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.int_netsuite2__acctxperiod_exchange_rate_map", "compiled": true, "compiled_code": "\n\nwith accounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__accounts\"\n), \n\n\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__subsidiaries\"\n),\n\nconsolidated_exchange_rates as (\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__consolidated_exchange_rates\"\n),\n\ncurrencies as (\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__currencies\"\n),\n\nperiod_exchange_rate_map as ( -- exchange rates used, by accounting period, to convert to parent subsidiary\n  select\n    consolidated_exchange_rates.accounting_period_id,\n\n    \n\n    consolidated_exchange_rates.average_rate,\n    consolidated_exchange_rates.current_rate,\n    consolidated_exchange_rates.historical_rate,\n    consolidated_exchange_rates.from_subsidiary_id,\n    consolidated_exchange_rates.to_subsidiary_id,\n    to_subsidiaries.name as to_subsidiary_name,\n    currencies.symbol as to_subsidiary_currency_symbol\n  from consolidated_exchange_rates\n  \n  left join subsidiaries as to_subsidiaries\n    on consolidated_exchange_rates.to_subsidiary_id = to_subsidiaries.subsidiary_id\n\n  left join currencies\n    on currencies.currency_id = to_subsidiaries.currency_id\n\n  \n  where consolidated_exchange_rates.to_subsidiary_id in (select subsidiary_id from subsidiaries where parent_id is null)  -- constraint - only the primary subsidiary has no parent\n  \n), \n\naccountxperiod_exchange_rate_map as ( -- account table with exchange rate details by accounting period\n  select\n    period_exchange_rate_map.accounting_period_id,\n\n    \n    \n    period_exchange_rate_map.from_subsidiary_id,\n    period_exchange_rate_map.to_subsidiary_id,\n    period_exchange_rate_map.to_subsidiary_name,\n    period_exchange_rate_map.to_subsidiary_currency_symbol,\n    accounts.account_id,\n    case \n      when lower(accounts.general_rate_type) = 'historical' then period_exchange_rate_map.historical_rate\n      when lower(accounts.general_rate_type) = 'current' then period_exchange_rate_map.current_rate\n      when lower(accounts.general_rate_type) = 'average' then period_exchange_rate_map.average_rate\n      else null\n        end as exchange_rate\n  from accounts\n  \n  cross join period_exchange_rate_map\n)\n\nselect *\nfrom accountxperiod_exchange_rate_map", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__acctxperiod_exchange_rate_map\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.617810Z", "completed_at": "2024-03-19T16:06:07.626269Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.628389Z", "completed_at": "2024-03-19T16:06:07.628393Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.022687911987304688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__vendors_vendor_id.15978cc531", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__vendors\"\nwhere vendor_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.621717Z", "completed_at": "2024-03-19T16:06:07.627352Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.630059Z", "completed_at": "2024-03-19T16:06:07.630062Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01948690414428711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__vendors_vendor_id.a981580d39", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    vendor_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__vendors\"\nwhere vendor_id is not null\ngroup by vendor_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.633449Z", "completed_at": "2024-03-19T16:06:07.643954Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.648101Z", "completed_at": "2024-03-19T16:06:07.648112Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01919698715209961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.int_netsuite__transaction_lines_w_accounting_period", "compiled": true, "compiled_code": "\n\nwith transactions as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__transactions\"\n), \n\ntransaction_lines as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__transaction_lines\"\n),\n\ntransaction_lines_w_accounting_period as ( -- transaction line totals, by accounts, accounting period and subsidiary\n  select\n    transaction_lines.transaction_id,\n    transaction_lines.transaction_line_id,\n    transaction_lines.subsidiary_id,\n    transaction_lines.account_id,\n    transactions.accounting_period_id as transaction_accounting_period_id,\n    coalesce(transaction_lines.amount, 0) as unconverted_amount\n  from transaction_lines\n\n  join transactions on transactions.transaction_id = transaction_lines.transaction_id\n\n  where lower(transactions.transaction_type) != 'revenue arrangement'\n    and lower(non_posting_line) != 'yes'\n)\n\nselect * \nfrom transaction_lines_w_accounting_period", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite__transaction_lines_w_accounting_period\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.640851Z", "completed_at": "2024-03-19T16:06:07.647473Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.650210Z", "completed_at": "2024-03-19T16:06:07.650217Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01887202262878418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__vendor_types_vendor_type_id.faed6fe0e9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_type_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__vendor_types\"\nwhere vendor_type_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.637720Z", "completed_at": "2024-03-19T16:06:07.647779Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.650503Z", "completed_at": "2024-03-19T16:06:07.650507Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019785165786743164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__transactions_transaction_id.9439fe1532", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__transactions\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.644397Z", "completed_at": "2024-03-19T16:06:07.648420Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.651129Z", "completed_at": "2024-03-19T16:06:07.651133Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015740156173706055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__transactions_transaction_id.fd6bd3af79", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__transactions\"\nwhere transaction_id is not null\ngroup by transaction_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.654784Z", "completed_at": "2024-03-19T16:06:07.665872Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.666366Z", "completed_at": "2024-03-19T16:06:07.666373Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014375925064086914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__vendor_types_vendor_type_id.6ba4f59b69", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    vendor_type_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__vendor_types\"\nwhere vendor_type_id is not null\ngroup by vendor_type_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.662749Z", "completed_at": "2024-03-19T16:06:07.667371Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.668319Z", "completed_at": "2024-03-19T16:06:07.668323Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014503955841064453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.int_netsuite__transactions_with_converted_amounts", "compiled": true, "compiled_code": "\n\nwith transaction_lines_w_accounting_period as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite__transaction_lines_w_accounting_period\"\n), \n\naccountxperiod_exchange_rate_map as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite__accountxperiod_exchange_rate_map\"\n), \n\ntransaction_and_reporting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite__transaction_and_reporting_periods\"\n), \n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounts\"\n),\n\ntransactions_in_every_calculation_period_w_exchange_rates as (\n  select\n    transaction_lines_w_accounting_period.*,\n    reporting_accounting_period_id,\n    exchange_reporting_period.exchange_rate as exchange_rate_reporting_period,\n    exchange_transaction_period.exchange_rate as exchange_rate_transaction_period\n  from transaction_lines_w_accounting_period\n\n  join transaction_and_reporting_periods \n    on transaction_and_reporting_periods.accounting_period_id = transaction_lines_w_accounting_period.transaction_accounting_period_id \n\n  join accountxperiod_exchange_rate_map as exchange_reporting_period\n    on exchange_reporting_period.accounting_period_id = transaction_and_reporting_periods.reporting_accounting_period_id\n      and exchange_reporting_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_reporting_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n      \n  join accountxperiod_exchange_rate_map as exchange_transaction_period\n    on exchange_transaction_period.accounting_period_id = transaction_and_reporting_periods.accounting_period_id\n      and exchange_transaction_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_transaction_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n), \n\ntransactions_with_converted_amounts as (\n  select\n    transactions_in_every_calculation_period_w_exchange_rates.*,\n    unconverted_amount * exchange_rate_transaction_period as converted_amount_using_transaction_accounting_period,\n    unconverted_amount * exchange_rate_reporting_period as converted_amount_using_reporting_month,\n    case\n      when lower(accounts.type_name) in ('income','other income','expense','other expense','other income','cost of goods sold') then true\n      else false \n        end as is_income_statement,\n    case\n      when lower(accounts.type_name) in ('accounts receivable', 'bank', 'deferred expense', 'fixed asset', 'other asset', 'other current asset', 'unbilled receivable', 'prepaid expense') then 'Asset'\n      when lower(accounts.type_name) in ('cost of goods sold', 'expense', 'other expense') then 'Expense'\n      when lower(accounts.type_name) in ('income', 'other income') then 'Income'\n      when lower(accounts.type_name) in ('accounts payable', 'credit card', 'deferred revenue', 'long term liability', 'other current liability') then 'Liability'\n      when lower(accounts.type_name) in ('equity', 'retained earnings', 'net income') then 'Equity'\n      when lower(accounts.type_name) in ('non posting', 'statistical') then 'Other'\n      else null \n        end as account_category\n  from transactions_in_every_calculation_period_w_exchange_rates\n\n  left join accounts \n    on accounts.account_id = transactions_in_every_calculation_period_w_exchange_rates.account_id \n)\n\nselect * \nfrom transactions_with_converted_amounts", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite__transactions_with_converted_amounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.659527Z", "completed_at": "2024-03-19T16:06:07.667654Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.668551Z", "completed_at": "2024-03-19T16:06:07.668554Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015294075012207031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.int_netsuite2__tran_lines_w_accounting_period", "compiled": true, "compiled_code": "\n\nwith transactions as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__transactions\"\n), \n\ntransaction_lines as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__transaction_lines\"\n),\n\ntransaction_lines_w_accounting_period as ( -- transaction line totals, by accounts, accounting period and subsidiary\n  select\n    transaction_lines.transaction_id,\n    transaction_lines.transaction_line_id,\n    transaction_lines.subsidiary_id,\n    transaction_lines.account_id,\n\n    \n    \n    transactions.accounting_period_id as transaction_accounting_period_id,\n    coalesce(transaction_lines.amount, 0) as unconverted_amount\n  from transaction_lines\n\n  join transactions on transactions.transaction_id = transaction_lines.transaction_id\n\n  where lower(transactions.transaction_type) != 'revenue arrangement'\n    and transaction_lines.is_posting\n)\n\nselect * \nfrom transaction_lines_w_accounting_period", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__tran_lines_w_accounting_period\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.681339Z", "completed_at": "2024-03-19T16:06:07.707787Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.708479Z", "completed_at": "2024-03-19T16:06:07.708486Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03769969940185547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.netsuite__income_statement", "compiled": true, "compiled_code": "\n\nwith transactions_with_converted_amounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite__transactions_with_converted_amounts\"\n), \n\n--Below is only used if income statement transaction detail columns are specified dbt_project.yml file.\n\n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounts\"\n), \n\naccounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounting_periods\"\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__subsidiaries\"\n),\n\ntransaction_lines as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__transaction_lines\"\n),\n\nclasses as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__classes\"\n),\n\nlocations as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__locations\"\n),\n\ndepartments as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__departments\"\n),\n\nincome_statement as (\n    select\n        transactions_with_converted_amounts.transaction_id,\n        transactions_with_converted_amounts.transaction_line_id,\n        reporting_accounting_periods.accounting_period_id as accounting_period_id,\n        reporting_accounting_periods.ending_at as accounting_period_ending,\n        reporting_accounting_periods.full_name as accounting_period_full_name,\n        reporting_accounting_periods.name as accounting_period_name,\n        lower(reporting_accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n        lower(reporting_accounting_periods.is_closed) = 'yes' as is_accounting_period_closed,\n        accounts.name as account_name,\n        accounts.type_name as account_type_name,\n        accounts.account_id as account_id,\n        accounts.account_number,\n        subsidiaries.subsidiary_id,\n        subsidiaries.full_name as subsidiary_full_name,\n        subsidiaries.name as subsidiary_name\n\n        --The below script allows for accounts table pass through columns.\n        \n\n\n\n,\n\n        accounts.account_number || '-' || accounts.name as account_number_and_name,\n        classes.full_name as class_full_name\n\n        --The below script allows for classes table pass through columns.\n        \n\n\n\n,\n\n        locations.full_name as location_full_name,\n        departments.full_name as department_full_name\n\n        --The below script allows for departments table pass through columns.\n        \n\n\n\n,\n\n        -converted_amount_using_transaction_accounting_period as converted_amount,\n        transactions_with_converted_amounts.account_category as account_category,\n        case when lower(accounts.type_name) = 'income' then 1\n            when lower(accounts.type_name) = 'cost of goods sold' then 2\n            when lower(accounts.type_name) = 'expense' then 3\n            when lower(accounts.type_name) = 'other income' then 4\n            when lower(accounts.type_name) = 'other expense' then 5\n            else null\n            end as income_statement_sort_helper\n\n        --Below is only used if income statement transaction detail columns are specified dbt_project.yml file.\n        \n    \n        \n    from transactions_with_converted_amounts\n\n    join transaction_lines as transaction_lines\n        on transaction_lines.transaction_line_id = transactions_with_converted_amounts.transaction_line_id\n            and transaction_lines.transaction_id = transactions_with_converted_amounts.transaction_id\n\n    left join classes \n        on classes.class_id = transaction_lines.class_id\n\n    left join locations\n        on locations.location_id = transaction_lines.location_id\n\n    left join departments \n        on departments.department_id = transaction_lines.department_id\n    join accounts on accounts.account_id = transactions_with_converted_amounts.account_id\n\n    join accounting_periods as reporting_accounting_periods \n        on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n    \n    join subsidiaries\n        on transactions_with_converted_amounts.subsidiary_id = subsidiaries.subsidiary_id\n\n    --Below is only used if income statement transaction detail columns are specified dbt_project.yml file.\n    \n\n    where reporting_accounting_periods.fiscal_calendar_id  = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n        and transactions_with_converted_amounts.transaction_accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n        and transactions_with_converted_amounts.is_income_statement\n)\n\nselect *\nfrom income_statement", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__income_statement\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.690949Z", "completed_at": "2024-03-19T16:06:07.709284Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.711546Z", "completed_at": "2024-03-19T16:06:07.711551Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04110980033874512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.netsuite__transaction_details", "compiled": true, "compiled_code": "\n\nwith transactions_with_converted_amounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite__transactions_with_converted_amounts\"\n),\n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounts\"\n),\n\naccounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounting_periods\"\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__subsidiaries\"\n),\n\ntransaction_lines as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__transaction_lines\"\n),\n\ntransactions as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__transactions\"\n),\n\nincome_accounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__income_accounts\"\n),\n\nexpense_accounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__expense_accounts\"\n),\n\ncustomers as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__customers\"\n),\n\nitems as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__items\"\n),\n\nlocations as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__locations\"\n),\n\nvendors as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__vendors\"\n),\n\nvendor_types as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__vendor_types\"\n),\n\ndepartments as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__departments\"\n),\n\ncurrencies as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__currencies\"\n),\n\nclasses as (\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__classes\"\n),\n\ntransaction_details as (\n  select\n    transaction_lines.transaction_line_id,\n    transaction_lines.memo as transaction_memo,\n    lower(transaction_lines.non_posting_line) = 'yes' as is_transaction_non_posting,\n    transactions.transaction_id,\n    transactions.status as transaction_status,\n    transactions.transaction_date,\n    transactions.due_date_at as transaction_due_date,\n    transactions.transaction_type as transaction_type,\n    (lower(transactions.is_advanced_intercompany) = 'yes' or lower(transactions.is_intercompany) = 'yes') as is_transaction_intercompany\n\n    --The below script allows for transactions table pass through columns.\n    \n\n\n\n    \n\n    --The below script allows for transaction lines table pass through columns.\n    \n\n\n\n,\n\n    accounting_periods.ending_at as accounting_period_ending,\n    accounting_periods.full_name as accounting_period_full_name,\n    accounting_periods.name as accounting_period_name,\n    lower(accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n    lower(accounting_periods.is_closed) = 'yes' as is_accounting_period_closed,\n    accounts.name as account_name,\n    accounts.type_name as account_type_name,\n    accounts.account_id as account_id,\n    accounts.account_number\n\n    --The below script allows for accounts table pass through columns.\n    \n\n\n\n,\n\n    lower(accounts.is_leftside) = 't' as is_account_leftside,\n    lower(accounts.type_name) like 'accounts payable%' as is_accounts_payable,\n    lower(accounts.type_name) like 'accounts receivable%' as is_accounts_receivable,\n    lower(accounts.name) like '%intercompany%' as is_account_intercompany,\n    coalesce(parent_account.name, accounts.name) as parent_account_name,\n    income_accounts.income_account_id is not null as is_income_account,\n    expense_accounts.expense_account_id is not null as is_expense_account,\n    customers.company_name,\n    customers.city as customer_city,\n    customers.state as customer_state,\n    customers.zipcode as customer_zipcode,\n    customers.country as customer_country,\n    customers.date_first_order_at as customer_date_first_order,\n    customers.customer_external_id,\n    classes.full_name as class_full_name,\n    items.name as item_name,\n    items.type_name as item_type_name,\n    items.sales_description,\n    locations.name as location_name,\n    locations.city as location_city,\n    locations.country as location_country,\n    vendor_types.name as vendor_type_name,\n    vendors.company_name as vendor_name,\n    vendors.create_date_at as vendor_create_date,\n    currencies.name as currency_name,\n    currencies.symbol as currency_symbol,\n    departments.name as department_name\n\n    --The below script allows for departments table pass through columns.\n    \n\n\n\n,\n\n    subsidiaries.name as subsidiary_name,\n    case\n      when lower(accounts.type_name) = 'income' or lower(accounts.type_name) = 'other income' then -converted_amount_using_transaction_accounting_period\n      else converted_amount_using_transaction_accounting_period\n        end as converted_amount,\n    case\n      when lower(accounts.type_name) = 'income' or lower(accounts.type_name) = 'other income' then -transaction_lines.amount\n      else transaction_lines.amount\n        end as transaction_amount\n  from transaction_lines\n\n  join transactions\n    on transactions.transaction_id = transaction_lines.transaction_id\n\n  left join transactions_with_converted_amounts as transactions_with_converted_amounts\n    on transactions_with_converted_amounts.transaction_line_id = transaction_lines.transaction_line_id\n      and transactions_with_converted_amounts.transaction_id = transaction_lines.transaction_id\n      and transactions_with_converted_amounts.transaction_accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n\n  left join accounts \n    on accounts.account_id = transaction_lines.account_id\n\n  left join accounts as parent_account \n    on parent_account.account_id = accounts.parent_id\n\n  left join accounting_periods \n    on accounting_periods.accounting_period_id = transactions.accounting_period_id\n  left join income_accounts \n    on income_accounts.income_account_id = accounts.account_id\n\n  left join expense_accounts \n    on expense_accounts.expense_account_id = accounts.account_id\n\n  left join customers \n    on customers.customer_id = transaction_lines.company_id\n  \n  left join classes\n    on classes.class_id = transaction_lines.class_id\n\n  left join items \n    on items.item_id = transaction_lines.item_id\n\n  left join locations \n    on locations.location_id = transaction_lines.location_id\n\n  left join vendors \n    on vendors.vendor_id = transaction_lines.company_id\n\n  left join vendor_types \n    on vendor_types.vendor_type_id = vendors.vendor_type_id\n\n  left join currencies \n    on currencies.currency_id = transactions.currency_id\n\n  left join departments \n    on departments.department_id = transaction_lines.department_id\n\n  join subsidiaries \n    on subsidiaries.subsidiary_id = transaction_lines.subsidiary_id\n    \n  where (accounting_periods.fiscal_calendar_id is null\n    or accounting_periods.fiscal_calendar_id  = (select fiscal_calendar_id from subsidiaries where parent_id is null))\n)\n\nselect *\nfrom transaction_details", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__transaction_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.673220Z", "completed_at": "2024-03-19T16:06:07.709528Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.711789Z", "completed_at": "2024-03-19T16:06:07.711792Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04236197471618652, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.netsuite__balance_sheet", "compiled": true, "compiled_code": "\n\nwith transactions_with_converted_amounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite__transactions_with_converted_amounts\"\n), \n\n--Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n\n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounts\"\n), \n\naccounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__accounting_periods\"\n), \n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite__subsidiaries\"\n),\n\nbalance_sheet as ( \n  select\n    transactions_with_converted_amounts.transaction_id,\n    transactions_with_converted_amounts.transaction_line_id,\n    reporting_accounting_periods.accounting_period_id as accounting_period_id,\n    reporting_accounting_periods.ending_at as accounting_period_ending,\n    reporting_accounting_periods.full_name as accounting_period_full_name,\n    reporting_accounting_periods.name as accounting_period_name,\n    lower(reporting_accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n    lower(reporting_accounting_periods.is_closed) = 'yes' as is_accounting_period_closed,\n    transactions_with_converted_amounts.account_category as account_category,\n    case\n      when (lower(accounts.is_balancesheet) = 'f' and reporting_accounting_periods.year_id = transaction_accounting_periods.year_id) then 'Net Income'\n      when lower(accounts.is_balancesheet) = 'f' then 'Retained Earnings'\n      else accounts.name\n        end as account_name,\n    case\n      when (lower(accounts.is_balancesheet) = 'f' and reporting_accounting_periods.year_id = transaction_accounting_periods.year_id) then 'Net Income'\n      when lower(accounts.is_balancesheet) = 'f' then 'Retained Earnings'\n      else accounts.type_name\n        end as account_type_name,\n    case\n      when lower(accounts.is_balancesheet) = 'f' then null\n      else accounts.account_id\n        end as account_id,\n    case\n      when lower(accounts.is_balancesheet) = 'f' then null\n      else accounts.account_number\n        end as account_number\n    \n    --The below script allows for accounts table pass through columns.\n    \n\n\n\n,\n\n    case\n      when lower(accounts.is_balancesheet) = 'f' and lower(accounts.general_rate_type) in ('historical', 'average') then -converted_amount_using_transaction_accounting_period\n      when lower(accounts.is_balancesheet) = 'f' then -converted_amount_using_reporting_month\n      when lower(accounts.is_balancesheet) = 't' and lower(accounts.is_leftside) = 'f' and lower(accounts.general_rate_type) in ('historical', 'average') then -converted_amount_using_transaction_accounting_period\n      when lower(accounts.is_balancesheet) = 't' and lower(accounts.is_leftside) = 't' and lower(accounts.general_rate_type) in ('historical', 'average') then converted_amount_using_transaction_accounting_period\n      when lower(accounts.is_balancesheet) = 't' and lower(accounts.is_leftside) = 'f' then -converted_amount_using_reporting_month\n      when lower(accounts.is_balancesheet) = 't' and lower(accounts.is_leftside) = 't' then converted_amount_using_reporting_month\n      else 0\n        end as converted_amount,\n        \n    case\n      when lower(accounts.type_name) = 'bank' then 1\n      when lower(accounts.type_name) = 'accounts receivable' then 2\n      when lower(accounts.type_name) = 'unbilled receivable' then 3\n      when lower(accounts.type_name) = 'other current asset' then 4\n      when lower(accounts.type_name) = 'fixed asset' then 5\n      when lower(accounts.type_name) = 'other asset' then 6\n      when lower(accounts.type_name) = 'deferred expense' then 7\n      when lower(accounts.type_name) = 'accounts payable' then 8\n      when lower(accounts.type_name) = 'credit card' then 9\n      when lower(accounts.type_name) = 'other current liability' then 10\n      when lower(accounts.type_name) = 'long term liability' then 11\n      when lower(accounts.type_name) = 'deferred revenue' then 12\n      when lower(accounts.type_name) = 'equity' then 13\n      when (lower(accounts.is_balancesheet) = 'f' and reporting_accounting_periods.year_id = transaction_accounting_periods.year_id) then 15\n      when lower(accounts.is_balancesheet) = 'f' then 14\n      else null\n        end as balance_sheet_sort_helper\n    \n    --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n    \n\n  from transactions_with_converted_amounts\n  \n  --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n  \n\n\n  left join accounts \n    on accounts.account_id = transactions_with_converted_amounts.account_id\n\n  left join accounting_periods as reporting_accounting_periods \n    on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n\n  left join accounting_periods as transaction_accounting_periods \n    on transaction_accounting_periods.accounting_period_id = transactions_with_converted_amounts.transaction_accounting_period_id\n\n  where reporting_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n    and transaction_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n    and (lower(accounts.is_balancesheet) = 't'\n      or transactions_with_converted_amounts.is_income_statement)\n\n  union all\n\n  select\n    transactions_with_converted_amounts.transaction_id,\n    transactions_with_converted_amounts.transaction_line_id,\n    reporting_accounting_periods.accounting_period_id as accounting_period_id,\n    reporting_accounting_periods.ending_at as accounting_period_ending,\n    reporting_accounting_periods.full_name as accounting_period_full_name,\n    reporting_accounting_periods.name as accounting_period_name,\n    lower(reporting_accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n    lower(reporting_accounting_periods.is_closed) = 'yes' as is_accounting_period_closed,\n    'Equity' as account_category,\n    'Cumulative Translation Adjustment' as account_name,\n    'Cumulative Translation Adjustment' as account_type_name,\n    null as account_id,\n    null as account_number,\n\n    \n\n    case\n      when lower(account_category) = 'equity' or is_income_statement then converted_amount_using_transaction_accounting_period\n      else converted_amount_using_reporting_month\n        end as converted_amount,\n    16 as balance_sheet_sort_helper\n\n    --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n    \n\n  from transactions_with_converted_amounts\n\n  --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n  \n\n  left join accounts\n    on accounts.account_id = transactions_with_converted_amounts.account_id\n\n  left join accounting_periods as reporting_accounting_periods \n    on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n    \n  where reporting_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n    and (lower(accounts.is_balancesheet) = 't'\n      or transactions_with_converted_amounts.is_income_statement)\n)\n\nselect *\nfrom balance_sheet", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__balance_sheet\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.703002Z", "completed_at": "2024-03-19T16:06:07.709863Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.712028Z", "completed_at": "2024-03-19T16:06:07.712031Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04186582565307617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.int_netsuite2__tran_with_converted_amounts", "compiled": true, "compiled_code": "\n\nwith transaction_lines_w_accounting_period as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__tran_lines_w_accounting_period\"\n), \n\n\n  accountxperiod_exchange_rate_map as (\n      select * \n      from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__acctxperiod_exchange_rate_map\"\n  ), \n\n\ntransaction_and_reporting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__tran_and_reporting_periods\"\n), \n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__accounts\"\n),\n\ntransactions_in_every_calculation_period_w_exchange_rates as (\n  select\n    transaction_lines_w_accounting_period.*,\n    reporting_accounting_period_id\n    \n    \n    , exchange_reporting_period.exchange_rate as exchange_rate_reporting_period\n    , exchange_transaction_period.exchange_rate as exchange_rate_transaction_period\n    \n\n    \n\n  from transaction_lines_w_accounting_period\n\n  left join transaction_and_reporting_periods \n    on transaction_and_reporting_periods.accounting_period_id = transaction_lines_w_accounting_period.transaction_accounting_period_id \n\n  \n  left join accountxperiod_exchange_rate_map as exchange_reporting_period\n    on exchange_reporting_period.accounting_period_id = transaction_and_reporting_periods.reporting_accounting_period_id\n      and exchange_reporting_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_reporting_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n\n      \n      \n  left join accountxperiod_exchange_rate_map as exchange_transaction_period\n    on exchange_transaction_period.accounting_period_id = transaction_and_reporting_periods.accounting_period_id\n      and exchange_transaction_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_transaction_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n      \n      \n\n      \n  \n), \n\ntransactions_with_converted_amounts as (\n  select\n    transactions_in_every_calculation_period_w_exchange_rates.*,\n    \n    unconverted_amount * exchange_rate_transaction_period as converted_amount_using_transaction_accounting_period,\n    unconverted_amount * exchange_rate_reporting_period as converted_amount_using_reporting_month,\n    \n    case\n      when lower(accounts.account_type_id) in ('income','othincome','expense','othexpense','cogs') then true\n      else false \n        end as is_income_statement,\n    case\n      when lower(accounts.account_type_id) in ('acctrec', 'bank', 'deferexpense', 'fixedasset', 'othasset', 'othcurrasset', 'unbilledrec') then 'Asset'\n      when lower(accounts.account_type_id) in ('cogs', 'expense', 'othexpense') then 'Expense'\n      when lower(accounts.account_type_id) in ('income', 'othincome') then 'Income'\n      when lower(accounts.account_type_id) in ('acctpay', 'credcard', 'deferrevenue', 'longtermliab', 'othcurrliab') then 'Liability'\n      when lower(accounts.account_type_id) in ('equity', 'retained_earnings', 'net_income') then 'Equity'\n      when lower(accounts.account_type_id) in ('nonposting', 'stat') then 'Other'\n      else null \n        end as account_category\n  from transactions_in_every_calculation_period_w_exchange_rates\n\n  left join accounts\n    on accounts.account_id = transactions_in_every_calculation_period_w_exchange_rates.account_id \n)\n\nselect * \nfrom transactions_with_converted_amounts", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__tran_with_converted_amounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.714169Z", "completed_at": "2024-03-19T16:06:07.720892Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.739919Z", "completed_at": "2024-03-19T16:06:07.739931Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03000617027282715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.dbt_utils_unique_combination_of_columns_netsuite__income_statement_transaction_line_id__transaction_id__accounting_period_id__account_name.8ee630c641", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_line_id, transaction_id, accounting_period_id, account_name\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__income_statement\"\n    group by transaction_line_id, transaction_id, accounting_period_id, account_name\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.721727Z", "completed_at": "2024-03-19T16:06:07.740407Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.742817Z", "completed_at": "2024-03-19T16:06:07.742821Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02521491050720215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite__income_statement_transaction_id.12be020c7d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__income_statement\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.724686Z", "completed_at": "2024-03-19T16:06:07.740714Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.743064Z", "completed_at": "2024-03-19T16:06:07.743067Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.025054216384887695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite__income_statement_transaction_line_id.00136bcf80", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__income_statement\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.728664Z", "completed_at": "2024-03-19T16:06:07.741539Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.743692Z", "completed_at": "2024-03-19T16:06:07.743695Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02542591094970703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.accepted_values_netsuite__transaction_details_account_type_name__Accounts_Receivable__Bank__Deferred_Expense__Fixed_Asset__Other_Asset__Other_Current_Asset__Unbilled_Receivable__Prepaid_Expense__Cost_of_Goods_Sold__Expense__Other_Expense__Income__Other_Income__Accounts_Payable__Credit_Card__Deferred_Revenue__Long_Term_Liability__Other_Current_Liability__Equity__Retained_Earnings__Net_Income__Non_Posting__Statistical.fd03652096", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        account_type_name as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__transaction_details\"\n    group by account_type_name\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Accounts Receivable','Bank','Deferred Expense','Fixed Asset','Other Asset','Other Current Asset','Unbilled Receivable','Prepaid Expense','Cost of Goods Sold','Expense','Other Expense','Income','Other Income','Accounts Payable','Credit Card','Deferred Revenue','Long Term Liability','Other Current Liability','Equity','Retained Earnings','Net Income','Non Posting','Statistical'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.746232Z", "completed_at": "2024-03-19T16:06:07.751224Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.760844Z", "completed_at": "2024-03-19T16:06:07.760851Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.018052101135253906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.dbt_utils_unique_combination_of_columns_netsuite__transaction_details_transaction_line_id__transaction_id.5613fa3400", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_line_id, transaction_id\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__transaction_details\"\n    group by transaction_line_id, transaction_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.751693Z", "completed_at": "2024-03-19T16:06:07.761964Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.764093Z", "completed_at": "2024-03-19T16:06:07.764098Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018121957778930664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite__transaction_details_transaction_id.a65a8e2f58", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__transaction_details\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.754546Z", "completed_at": "2024-03-19T16:06:07.762210Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.764335Z", "completed_at": "2024-03-19T16:06:07.764338Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01824784278869629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite__transaction_details_transaction_line_id.1662f317e3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__transaction_details\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.758240Z", "completed_at": "2024-03-19T16:06:07.762544Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.764564Z", "completed_at": "2024-03-19T16:06:07.764567Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01833510398864746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.dbt_utils_unique_combination_of_columns_netsuite__balance_sheet_transaction_line_id__transaction_id__accounting_period_id__account_name.7d7c0ea1da", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_line_id, transaction_id, accounting_period_id, account_name\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__balance_sheet\"\n    group by transaction_line_id, transaction_id, accounting_period_id, account_name\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.764788Z", "completed_at": "2024-03-19T16:06:07.770486Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.794944Z", "completed_at": "2024-03-19T16:06:07.794953Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04285788536071777, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite__balance_sheet_transaction_id.bb54ae3b9e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__balance_sheet\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.772234Z", "completed_at": "2024-03-19T16:06:07.806149Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.808230Z", "completed_at": "2024-03-19T16:06:07.808240Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.039522647857666016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite__balance_sheet_transaction_line_id.2467dc5a32", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__balance_sheet\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.775322Z", "completed_at": "2024-03-19T16:06:07.806528Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.808501Z", "completed_at": "2024-03-19T16:06:07.808506Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03967094421386719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.netsuite2__balance_sheet", "compiled": true, "compiled_code": "\n\nwith transactions_with_converted_amounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__tran_with_converted_amounts\"\n), \n\n--Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n\n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__accounts\"\n), \n\naccounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__accounting_periods\"\n), \n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__subsidiaries\"\n),\n\nbalance_sheet as ( \n  select\n    transactions_with_converted_amounts.transaction_id,\n    transactions_with_converted_amounts.transaction_line_id,\n    transactions_with_converted_amounts.subsidiary_id,\n    subsidiaries.full_name as subsidiary_full_name,\n    subsidiaries.name as subsidiary_name,\n\n    \n    \n    \n\n    reporting_accounting_periods.accounting_period_id as accounting_period_id,\n    reporting_accounting_periods.ending_at as accounting_period_ending,\n    reporting_accounting_periods.full_name as accounting_period_full_name,\n    reporting_accounting_periods.name as accounting_period_name,\n    reporting_accounting_periods.is_adjustment as is_accounting_period_adjustment,\n    reporting_accounting_periods.is_closed as is_accounting_period_closed,\n    transactions_with_converted_amounts.account_category as account_category,\n    case\n      when (not accounts.is_balancesheet \n            and date_trunc('year', reporting_accounting_periods.starting_at) = date_trunc('year', transaction_accounting_periods.starting_at) \n            and reporting_accounting_periods.fiscal_calendar_id = transaction_accounting_periods.fiscal_calendar_id) then 'Net Income'\n      when not accounts.is_balancesheet then 'Retained Earnings'\n      else accounts.name\n        end as account_name,\n    case\n      when (not accounts.is_balancesheet \n            and date_trunc('year', reporting_accounting_periods.starting_at) = date_trunc('year', transaction_accounting_periods.starting_at) \n            and reporting_accounting_periods.fiscal_calendar_id = transaction_accounting_periods.fiscal_calendar_id) then 'Net Income'\n      when not accounts.is_balancesheet then 'Retained Earnings'\n      else accounts.display_full_name\n        end as account_display_full_name,\n    case\n      when (not accounts.is_balancesheet \n            and date_trunc('year', reporting_accounting_periods.starting_at) = date_trunc('year', transaction_accounting_periods.starting_at) \n            and reporting_accounting_periods.fiscal_calendar_id = transaction_accounting_periods.fiscal_calendar_id) then 'Net Income'\n      when not accounts.is_balancesheet then 'Retained Earnings'\n      else accounts.display_name\n        end as account_display_name,\n    case\n      when (not accounts.is_balancesheet \n            and date_trunc('year', reporting_accounting_periods.starting_at) = date_trunc('year', transaction_accounting_periods.starting_at) \n            and reporting_accounting_periods.fiscal_calendar_id = transaction_accounting_periods.fiscal_calendar_id) then 'Net Income'\n      when not accounts.is_balancesheet then 'Retained Earnings'\n      when lower(accounts.special_account_type_id) = 'retearnings' then 'Retained Earnings'\n      when lower(accounts.special_account_type_id) in ('cta-e', 'cumultransadj') then 'Cumulative Translation Adjustment'\n      else accounts.type_name\n        end as account_type_name,\n    case\n      when (not accounts.is_balancesheet \n            and date_trunc('year', reporting_accounting_periods.starting_at) = date_trunc('year', transaction_accounting_periods.starting_at) \n            and reporting_accounting_periods.fiscal_calendar_id = transaction_accounting_periods.fiscal_calendar_id) then 'net_income'\n      when not accounts.is_balancesheet then 'retained_earnings'\n      when lower(accounts.special_account_type_id) = 'retearnings' then 'retained_earnings'\n      when lower(accounts.special_account_type_id) in ('cta-e', 'cumultransadj') then 'cumulative_translation_adjustment'\n      else accounts.account_type_id\n        end as account_type_id,\n    case\n      when not accounts.is_balancesheet then null\n      else accounts.account_id\n        end as account_id,\n    case\n      when not accounts.is_balancesheet then null\n      else accounts.account_number\n        end as account_number\n    \n    --The below script allows for accounts table pass through columns.\n    \n\n\n\n,\n\n    case\n      when not accounts.is_balancesheet and lower(accounts.general_rate_type) in ('historical', 'average') then -converted_amount_using_transaction_accounting_period\n      when not accounts.is_balancesheet then -converted_amount_using_reporting_month\n      when accounts.is_balancesheet and not accounts.is_leftside and lower(accounts.general_rate_type) in ('historical', 'average') then -converted_amount_using_transaction_accounting_period\n      when accounts.is_balancesheet and accounts.is_leftside and lower(accounts.general_rate_type) in ('historical', 'average') then converted_amount_using_transaction_accounting_period\n      when accounts.is_balancesheet and not accounts.is_leftside then -converted_amount_using_reporting_month\n      when accounts.is_balancesheet and accounts.is_leftside then converted_amount_using_reporting_month\n      else 0\n        end as converted_amount,\n\n    case\n      when lower(accounts.account_type_id) = 'bank' then 1\n      when lower(accounts.account_type_id) = 'acctrec' then 2\n      when lower(accounts.account_type_id) = 'unbilledrec' then 3\n      when lower(accounts.account_type_id) = 'othcurrasset' then 4\n      when lower(accounts.account_type_id) = 'fixedasset' then 5\n      when lower(accounts.account_type_id) = 'othasset' then 6\n      when lower(accounts.account_type_id) = 'deferexpense' then 7\n      when lower(accounts.account_type_id) = 'acctpay' then 8\n      when lower(accounts.account_type_id) = 'credcard' then 9\n      when lower(accounts.account_type_id) = 'othcurrliab' then 10\n      when lower(accounts.account_type_id) = 'longtermliab' then 11\n      when lower(accounts.account_type_id) = 'deferrevenue' then 12\n      when lower(accounts.special_account_type_id) = 'retearnings' then 14\n      when lower(accounts.special_account_type_id) in ('cta-e', 'cumultransadj') then 16\n      when lower(accounts.account_type_id) = 'equity' then 13\n      when (not accounts.is_balancesheet \n            and date_trunc('year', reporting_accounting_periods.starting_at) = date_trunc('year', transaction_accounting_periods.starting_at) \n            and reporting_accounting_periods.fiscal_calendar_id = transaction_accounting_periods.fiscal_calendar_id) then 15\n      when not accounts.is_balancesheet then 14\n      else null\n        end as balance_sheet_sort_helper\n\n    --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n    \n\n  from transactions_with_converted_amounts\n  \n  --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n  \n\n\n  left join accounts \n    on accounts.account_id = transactions_with_converted_amounts.account_id\n\n  left join accounting_periods as reporting_accounting_periods \n    on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n\n  left join accounting_periods as transaction_accounting_periods \n    on transaction_accounting_periods.accounting_period_id = transactions_with_converted_amounts.transaction_accounting_period_id\n\n  left join subsidiaries\n    on subsidiaries.subsidiary_id = transactions_with_converted_amounts.subsidiary_id\n\n  where reporting_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n    and transaction_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n    and (accounts.is_balancesheet\n      or transactions_with_converted_amounts.is_income_statement)\n\n  union all\n\n  select\n    transactions_with_converted_amounts.transaction_id,\n    transactions_with_converted_amounts.transaction_line_id,\n    transactions_with_converted_amounts.subsidiary_id,\n    subsidiaries.full_name as subsidiary_full_name,\n    subsidiaries.name as subsidiary_name,\n\n    \n\n    \n    \n    reporting_accounting_periods.accounting_period_id as accounting_period_id,\n    reporting_accounting_periods.ending_at as accounting_period_ending,\n    reporting_accounting_periods.full_name as accounting_period_full_name,\n    reporting_accounting_periods.name as accounting_period_name,\n    reporting_accounting_periods.is_adjustment as is_accounting_period_adjustment,\n    reporting_accounting_periods.is_closed as is_accounting_period_closed,\n    'Equity' as account_category,\n    'Cumulative Translation Adjustment' as account_name,\n    'Cumulative Translation Adjustment' as account_display_full_name,\n    'Cumulative Translation Adjustment' as account_display_name,\n    'Cumulative Translation Adjustment' as account_type_name,\n    'cumulative_translation_adjustment' as account_type_id,\n    null as account_id,\n    null as account_number,\n\n    \n\n    case\n      when lower(accounts.general_rate_type) in ('historical', 'average') then converted_amount_using_transaction_accounting_period\n      else converted_amount_using_reporting_month\n        end as converted_amount,\n    16 as balance_sheet_sort_helper\n\n    --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n    \n\n  from transactions_with_converted_amounts\n\n  --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n  \n\n  left join accounts\n    on accounts.account_id = transactions_with_converted_amounts.account_id\n\n  left join accounting_periods as reporting_accounting_periods \n    on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n\n  left join subsidiaries\n    on subsidiaries.subsidiary_id = transactions_with_converted_amounts.subsidiary_id\n\n  where reporting_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n    and (accounts.is_balancesheet\n      or transactions_with_converted_amounts.is_income_statement)\n),\n\nsurrogate_key as ( \n  \n  \n  \n\n  select \n    *,\n    md5(cast(coalesce(cast(transaction_line_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transaction_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(accounting_period_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(account_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(account_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as balance_sheet_id\n\n  from balance_sheet\n)\n\nselect *\nfrom surrogate_key", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__balance_sheet\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.795293Z", "completed_at": "2024-03-19T16:06:07.807570Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.810140Z", "completed_at": "2024-03-19T16:06:07.810144Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05238604545593262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.netsuite2__income_statement", "compiled": true, "compiled_code": "\n\nwith transactions_with_converted_amounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__tran_with_converted_amounts\"\n), \n\n--Below is only used if income statement transaction detail columns are specified dbt_project.yml file.\n\n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__accounts\"\n), \n\naccounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__accounting_periods\"\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__subsidiaries\"\n),\n\ntransaction_lines as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__transaction_lines\"\n),\n\nclasses as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__classes\"\n),\n\nlocations as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__locations\"\n),\n\ndepartments as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__departments\"\n),\n\nincome_statement as (\n    select\n        transactions_with_converted_amounts.transaction_id,\n        transactions_with_converted_amounts.transaction_line_id,\n\n        \n\n        \n\n        reporting_accounting_periods.accounting_period_id as accounting_period_id,\n        reporting_accounting_periods.ending_at as accounting_period_ending,\n        reporting_accounting_periods.full_name as accounting_period_full_name,\n        reporting_accounting_periods.name as accounting_period_name,\n        reporting_accounting_periods.is_adjustment as is_accounting_period_adjustment,\n        reporting_accounting_periods.is_closed as is_accounting_period_closed,\n        accounts.name as account_name,\n        accounts.display_full_name as account_display_full_name,\n        accounts.display_name as account_display_name,\n        accounts.type_name as account_type_name,\n        accounts.account_type_id,\n        accounts.account_id as account_id,\n        accounts.account_number,\n        subsidiaries.subsidiary_id,\n        subsidiaries.full_name as subsidiary_full_name,\n        subsidiaries.name as subsidiary_name\n\n        --The below script allows for accounts table pass through columns.\n        \n\n\n\n,\n\n        accounts.account_number || '-' || accounts.name as account_number_and_name,\n        classes.full_name as class_full_name\n\n        --The below script allows for accounts table pass through columns.\n        \n\n\n\n,\n\n        locations.full_name as location_full_name,\n        departments.full_name as department_full_name\n\n        --The below script allows for departments table pass through columns.\n        \n\n\n\n,\n\n        transactions_with_converted_amounts.account_category as account_category,\n        case when lower(accounts.account_type_id) = 'income' then 1\n            when lower(accounts.account_type_id) = 'cogs' then 2\n            when lower(accounts.account_type_id) = 'expense' then 3\n            when lower(accounts.account_type_id) = 'othincome' then 4\n            when lower(accounts.account_type_id) = 'othexpense' then 5\n            else null\n            end as income_statement_sort_helper\n\n        --Below is only used if income statement transaction detail columns are specified dbt_project.yml file.\n        \n\n        , -converted_amount_using_transaction_accounting_period as converted_amount\n        \n    from transactions_with_converted_amounts\n\n    join transaction_lines as transaction_lines\n        on transaction_lines.transaction_line_id = transactions_with_converted_amounts.transaction_line_id\n            and transaction_lines.transaction_id = transactions_with_converted_amounts.transaction_id\n\n            \n\n    left join departments \n        on departments.department_id = transaction_lines.department_id\n    \n    left join accounts \n        on accounts.account_id = transactions_with_converted_amounts.account_id\n\n    left join locations\n        on locations.location_id = transaction_lines.location_id\n\n    left join classes \n        on classes.class_id = transaction_lines.class_id\n\n    left join accounting_periods as reporting_accounting_periods \n        on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n    \n    left join subsidiaries\n        on transactions_with_converted_amounts.subsidiary_id = subsidiaries.subsidiary_id\n\n    --Below is only used if income statement transaction detail columns are specified dbt_project.yml file.\n    \n\n    where reporting_accounting_periods.fiscal_calendar_id  = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n        and transactions_with_converted_amounts.transaction_accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n        and transactions_with_converted_amounts.is_income_statement\n),\n\nsurrogate_key as ( \n    \n    \n    \n\n    select \n        *,\n        md5(cast(coalesce(cast(transaction_line_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transaction_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(accounting_period_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(account_name as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as income_statement_id\n\n    from income_statement\n)\n\nselect *\nfrom surrogate_key", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__income_statement\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.810385Z", "completed_at": "2024-03-19T16:06:07.824791Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.833282Z", "completed_at": "2024-03-19T16:06:07.833292Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.029788970947265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.netsuite2__transaction_details", "compiled": true, "compiled_code": "\n\nwith transactions_with_converted_amounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__tran_with_converted_amounts\"\n),\n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__accounts\"\n),\n\naccounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__accounting_periods\"\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__subsidiaries\"\n),\n\ntransaction_lines as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__transaction_lines\"\n),\n\ntransactions as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__transactions\"\n),\n\ncustomers as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__customers\"\n),\n\nitems as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__items\"\n),\n\nlocations as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__locations\"\n),\n\nvendors as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__vendors\"\n),\n\n\nvendor_categories as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__vendor_categories\"\n),\n\n\ndepartments as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__departments\"\n),\n\ncurrencies as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__currencies\"\n),\n\nclasses as (\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__classes\"\n),\n\nentities as (\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite_source\".\"stg_netsuite2__entities\"\n),\n\ntransaction_details as (\n  select\n\n    \n\n    \n    \n    transaction_lines.transaction_line_id,\n    transaction_lines.memo as transaction_memo,\n    not transaction_lines.is_posting as is_transaction_non_posting,\n    transactions.transaction_id,\n    transactions.status as transaction_status,\n    transactions.transaction_date,\n    transactions.due_date_at as transaction_due_date,\n    transactions.transaction_type as transaction_type,\n    transactions.is_intercompany_adjustment as is_transaction_intercompany_adjustment\n\n    --The below script allows for transactions table pass through columns.\n    \n\n\n\n\n\n    --The below script allows for transaction lines table pass through columns.\n    \n\n\n\n,\n\n    accounting_periods.ending_at as accounting_period_ending,\n    accounting_periods.full_name as accounting_period_full_name,\n    accounting_periods.name as accounting_period_name,\n    accounting_periods.accounting_period_id as accounting_period_id,\n    accounting_periods.is_adjustment as is_accounting_period_adjustment,\n    accounting_periods.is_closed as is_accounting_period_closed,\n    accounts.name as account_name,\n    accounts.display_full_name as account_display_full_name,\n    accounts.display_name as account_display_name,\n    accounts.type_name as account_type_name,\n    accounts.account_type_id,\n    accounts.account_id as account_id,\n    accounts.account_number\n\n    --The below script allows for accounts table pass through columns.\n    \n\n\n\n,\n\n    accounts.is_leftside as is_account_leftside,\n    lower(accounts.account_type_id) = 'acctpay' as is_accounts_payable,\n    lower(accounts.account_type_id) = 'acctrec' as is_accounts_receivable,\n    accounts.is_eliminate as is_account_intercompany,\n    transaction_lines.is_eliminate,\n    coalesce(parent_account.name, accounts.name) as parent_account_name,\n    lower(accounts.account_type_id) in ('expense', 'othexpense', 'deferexpense') as is_expense_account,\n    lower(accounts.account_type_id) in ('income', 'othincome') as is_income_account,\n    customers.company_name,\n    customers.city as customer_city,\n    customers.state as customer_state,\n    customers.zipcode as customer_zipcode,\n    customers.country as customer_country,\n    customers.date_first_order_at as customer_date_first_order,\n    customers.customer_external_id,\n    classes.full_name as class_full_name,\n    items.name as item_name,\n    items.type_name as item_type_name,\n    items.sales_description,\n    locations.name as location_name,\n    locations.city as location_city,\n    locations.country as location_country,\n    \n    vendor_categories.name as vendor_category_name,\n    \n    vendors.company_name as vendor_name,\n    vendors.create_date_at as vendor_create_date,\n    currencies.name as currency_name,\n    currencies.symbol as currency_symbol,\n    transaction_lines.exchange_rate,\n    departments.full_name as department_full_name,\n    departments.name as department_name\n\n    --The below script allows for departments table pass through columns.\n    \n\n\n\n,\n\n    subsidiaries.subsidiary_id,\n    subsidiaries.full_name as subsidiary_full_name,\n    subsidiaries.name as subsidiary_name,\n    subsidiaries_currencies.symbol as subsidiary_currency_symbol,\n    case\n      when lower(accounts.account_type_id) in ('income', 'othincome') then -converted_amount_using_transaction_accounting_period\n      else converted_amount_using_transaction_accounting_period\n        end as converted_amount,\n    case\n      when lower(accounts.account_type_id) in ('income', 'othincome') then -transaction_lines.amount\n      else transaction_lines.amount\n        end as transaction_amount,\n    case\n      when lower(accounts.account_type_id) in ('income', 'othincome') then -transaction_lines.netamount\n      else transaction_lines.netamount\n        end as transaction_line_amount  \n  from transaction_lines\n\n  join transactions\n    on transactions.transaction_id = transaction_lines.transaction_id\n\n  left join transactions_with_converted_amounts as transactions_with_converted_amounts\n    on transactions_with_converted_amounts.transaction_line_id = transaction_lines.transaction_line_id\n      and transactions_with_converted_amounts.transaction_id = transaction_lines.transaction_id\n      and transactions_with_converted_amounts.transaction_accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n      \n      \n\n  left join accounts \n    on accounts.account_id = transaction_lines.account_id\n\n  left join accounts as parent_account \n    on parent_account.account_id = accounts.parent_id\n\n  left join accounting_periods \n    on accounting_periods.accounting_period_id = transactions.accounting_period_id\n\n  left join customers \n    on customers.customer_id = coalesce(transaction_lines.entity_id, transactions.entity_id)\n  \n  left join classes\n    on classes.class_id = transaction_lines.class_id\n\n  left join items \n    on items.item_id = transaction_lines.item_id\n\n  left join locations \n    on locations.location_id = transaction_lines.location_id\n\n  left join vendors \n    on vendors.vendor_id = coalesce(transaction_lines.entity_id, transactions.entity_id)\n\n  \n  left join vendor_categories \n    on vendor_categories.vendor_category_id = vendors.vendor_category_id\n  \n\n  left join currencies \n    on currencies.currency_id = transactions.currency_id\n\n  left join departments \n    on departments.department_id = transaction_lines.department_id\n\n  join subsidiaries \n    on subsidiaries.subsidiary_id = transaction_lines.subsidiary_id\n\n  left join currencies subsidiaries_currencies\n    on subsidiaries_currencies.currency_id = subsidiaries.currency_id\n    \n  where (accounting_periods.fiscal_calendar_id is null\n    or accounting_periods.fiscal_calendar_id  = (select fiscal_calendar_id from subsidiaries where parent_id is null))\n),\n\nsurrogate_key as ( \n    \n    \n    \n\n    select \n        *,\n        md5(cast(coalesce(cast(transaction_line_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transaction_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as transaction_details_id\n\n    from transaction_details\n)\n\nselect *\nfrom surrogate_key", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__transaction_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.825906Z", "completed_at": "2024-03-19T16:06:07.838274Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.840874Z", "completed_at": "2024-03-19T16:06:07.840879Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01846909523010254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__balance_sheet_balance_sheet_id.0e299c6c01", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect balance_sheet_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__balance_sheet\"\nwhere balance_sheet_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.828972Z", "completed_at": "2024-03-19T16:06:07.838711Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.841152Z", "completed_at": "2024-03-19T16:06:07.841157Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018572092056274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__balance_sheet_transaction_id.4e0a408da1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__balance_sheet\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.833712Z", "completed_at": "2024-03-19T16:06:07.839472Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.841648Z", "completed_at": "2024-03-19T16:06:07.841652Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02038884162902832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__balance_sheet_transaction_line_id.dd5f702ec9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__balance_sheet\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.842823Z", "completed_at": "2024-03-19T16:06:07.848672Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.859111Z", "completed_at": "2024-03-19T16:06:07.859118Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019574880599975586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.unique_netsuite2__balance_sheet_balance_sheet_id.8bb14ebf4a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    balance_sheet_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__balance_sheet\"\nwhere balance_sheet_id is not null\ngroup by balance_sheet_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.849770Z", "completed_at": "2024-03-19T16:06:07.860237Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.861975Z", "completed_at": "2024-03-19T16:06:07.861978Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015440225601196289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__income_statement_income_statement_id.4c1a7c959e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect income_statement_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__income_statement\"\nwhere income_statement_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.855596Z", "completed_at": "2024-03-19T16:06:07.860709Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.862591Z", "completed_at": "2024-03-19T16:06:07.862595Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017870187759399414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__income_statement_transaction_line_id.8fdd5b1706", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__income_statement\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.852684Z", "completed_at": "2024-03-19T16:06:07.861168Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.863247Z", "completed_at": "2024-03-19T16:06:07.863251Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0189211368560791, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__income_statement_transaction_id.0ecd59a9ef", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__income_statement\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.863476Z", "completed_at": "2024-03-19T16:06:07.868690Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.876135Z", "completed_at": "2024-03-19T16:06:07.876142Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0182492733001709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.unique_netsuite2__income_statement_income_statement_id.20a530fc68", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    income_statement_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__income_statement\"\nwhere income_statement_id is not null\ngroup by income_statement_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.869992Z", "completed_at": "2024-03-19T16:06:07.880013Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.882074Z", "completed_at": "2024-03-19T16:06:07.882079Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015466928482055664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__transaction_details_transaction_details_id.a24a6eb6c0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_details_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__transaction_details\"\nwhere transaction_details_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.873138Z", "completed_at": "2024-03-19T16:06:07.880612Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.882512Z", "completed_at": "2024-03-19T16:06:07.882514Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01911783218383789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__transaction_details_transaction_id.e9ee05db79", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__transaction_details\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.876514Z", "completed_at": "2024-03-19T16:06:07.881826Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.887761Z", "completed_at": "2024-03-19T16:06:07.887765Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.019301891326904297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__transaction_details_transaction_line_id.12a67b5f36", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__transaction_details\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-19T16:06:07.883349Z", "completed_at": "2024-03-19T16:06:07.889088Z"}, {"name": "execute", "started_at": "2024-03-19T16:06:07.889712Z", "completed_at": "2024-03-19T16:06:07.889717Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009088993072509766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.unique_netsuite2__transaction_details_transaction_details_id.cb70f22d04", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_details_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__transaction_details\"\nwhere transaction_details_id is not null\ngroup by transaction_details_id\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 6.328969955444336, "args": {"print": true, "macro_debugging": false, "project_dir": "/Users/avinash.kunnath/Documents/dbt_packages/netsuite/dbt_netsuite/integration_tests", "indirect_selection": "eager", "compile": true, "invocation_command": "dbt docs generate -t postgres", "log_level_file": "debug", "exclude": [], "strict_mode": false, "send_anonymous_usage_stats": true, "show_resource_report": false, "favor_state": false, "version_check": true, "introspect": true, "log_format": "default", "write_json": true, "printer_width": 80, "populate_cache": true, "log_format_file": "debug", "profiles_dir": "/Users/avinash.kunnath/.dbt", "select": [], "quiet": false, "log_path": "/Users/avinash.kunnath/Documents/dbt_packages/netsuite/dbt_netsuite/integration_tests/logs", "partial_parse": true, "static": false, "use_colors_file": true, "static_parser": true, "enable_legacy_logger": false, "cache_selected_only": false, "use_colors": true, "warn_error_options": {"include": [], "exclude": []}, "log_file_max_bytes": 10485760, "target": "postgres", "vars": {}, "empty_catalog": false, "partial_parse_file_diff": true, "log_level": "info", "which": "generate", "defer": false}}