{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.9", "generated_at": "2024-04-29T22:48:04.532005Z", "invocation_id": "46c17a11-a2bb-46fc-82b5-9edc861795a8", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.187430Z", "completed_at": "2024-04-29T22:47:57.217029Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.243757Z", "completed_at": "2024-04-29T22:47:57.243769Z"}], "thread_id": "Thread-1", "execution_time": 0.06498312950134277, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__account_types_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite2_account_type_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__account_types_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.196123Z", "completed_at": "2024-04-29T22:47:57.215215Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.242065Z", "completed_at": "2024-04-29T22:47:57.242078Z"}], "thread_id": "Thread-3", "execution_time": 0.06326103210449219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_books_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite2_accounting_book_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_books_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.218082Z", "completed_at": "2024-04-29T22:47:57.234541Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.245763Z", "completed_at": "2024-04-29T22:47:57.245769Z"}], "thread_id": "Thread-5", "execution_time": 0.06405973434448242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_periods_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite2_accounting_period_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_periods_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.209206Z", "completed_at": "2024-04-29T22:47:57.232882Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.246246Z", "completed_at": "2024-04-29T22:47:57.246259Z"}], "thread_id": "Thread-6", "execution_time": 0.06511902809143066, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounts_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite2_account_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounts_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.229079Z", "completed_at": "2024-04-29T22:47:57.242419Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.252360Z", "completed_at": "2024-04-29T22:47:57.252387Z"}], "thread_id": "Thread-7", "execution_time": 0.07078289985656738, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__classes_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite2_classification_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__classes_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.222731Z", "completed_at": "2024-04-29T22:47:57.234982Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.253996Z", "completed_at": "2024-04-29T22:47:57.254002Z"}], "thread_id": "Thread-4", "execution_time": 0.07467913627624512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite2_accounting_period_fiscal_cal_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_period_fiscal_cal_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.235606Z", "completed_at": "2024-04-29T22:47:57.247528Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.256211Z", "completed_at": "2024-04-29T22:47:57.256220Z"}], "thread_id": "Thread-8", "execution_time": 0.07415199279785156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite2_consolidated_exchange_rate_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__consolidated_exchange_rates_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.204550Z", "completed_at": "2024-04-29T22:47:57.240819Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.254418Z", "completed_at": "2024-04-29T22:47:57.254422Z"}], "thread_id": "Thread-2", "execution_time": 0.08822774887084961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite2_accounting_book_sub_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_book_subsidiaries_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.262192Z", "completed_at": "2024-04-29T22:47:57.281575Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.336969Z", "completed_at": "2024-04-29T22:47:57.336984Z"}], "thread_id": "Thread-1", "execution_time": 0.09238123893737793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__currencies_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite2_currency_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__currencies_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.265967Z", "completed_at": "2024-04-29T22:47:57.282262Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.337410Z", "completed_at": "2024-04-29T22:47:57.337416Z"}], "thread_id": "Thread-5", "execution_time": 0.0881490707397461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__departments_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite2_department_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__departments_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.270953Z", "completed_at": "2024-04-29T22:47:57.284437Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.341609Z", "completed_at": "2024-04-29T22:47:57.341617Z"}], "thread_id": "Thread-3", "execution_time": 0.09256219863891602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__customers_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite2_customer_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__customers_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.277865Z", "completed_at": "2024-04-29T22:47:57.286870Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.347056Z", "completed_at": "2024-04-29T22:47:57.347063Z"}], "thread_id": "Thread-6", "execution_time": 0.09101176261901855, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__entities_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite2_entities_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__entities_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.333086Z", "completed_at": "2024-04-29T22:47:57.346453Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.352755Z", "completed_at": "2024-04-29T22:47:57.352761Z"}], "thread_id": "Thread-4", "execution_time": 0.07938981056213379, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__items_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite2_item_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__items_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.287181Z", "completed_at": "2024-04-29T22:47:57.346743Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.353336Z", "completed_at": "2024-04-29T22:47:57.353347Z"}], "thread_id": "Thread-7", "execution_time": 0.08093905448913574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__entity_address_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite2_entity_address_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__entity_address_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.337770Z", "completed_at": "2024-04-29T22:47:57.349377Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.355326Z", "completed_at": "2024-04-29T22:47:57.355330Z"}], "thread_id": "Thread-8", "execution_time": 0.0829930305480957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__jobs_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite2_job_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__jobs_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.341946Z", "completed_at": "2024-04-29T22:47:57.350270Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.356683Z", "completed_at": "2024-04-29T22:47:57.356687Z"}], "thread_id": "Thread-2", "execution_time": 0.08219599723815918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__location_main_address_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite2_location_main_address_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__location_main_address_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.357662Z", "completed_at": "2024-04-29T22:47:57.375841Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.386163Z", "completed_at": "2024-04-29T22:47:57.386169Z"}], "thread_id": "Thread-1", "execution_time": 0.04300379753112793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__locations_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite2_location_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__locations_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.361226Z", "completed_at": "2024-04-29T22:47:57.376170Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.386449Z", "completed_at": "2024-04-29T22:47:57.386457Z"}], "thread_id": "Thread-5", "execution_time": 0.04315590858459473, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__subsidiaries_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite2_subsidiary_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__subsidiaries_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.367733Z", "completed_at": "2024-04-29T22:47:57.377822Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.393824Z", "completed_at": "2024-04-29T22:47:57.393834Z"}], "thread_id": "Thread-3", "execution_time": 0.042511940002441406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__transaction_accounting_lines_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite2_tran_acct_line_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transaction_accounting_lines_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.372890Z", "completed_at": "2024-04-29T22:47:57.378855Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.395763Z", "completed_at": "2024-04-29T22:47:57.395767Z"}], "thread_id": "Thread-6", "execution_time": 0.041699886322021484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__transaction_lines_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite2_transaction_line_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transaction_lines_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.379116Z", "completed_at": "2024-04-29T22:47:57.395462Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.400758Z", "completed_at": "2024-04-29T22:47:57.400762Z"}], "thread_id": "Thread-4", "execution_time": 0.03149867057800293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__transactions_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite2_transaction_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transactions_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.382100Z", "completed_at": "2024-04-29T22:47:57.396028Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.401317Z", "completed_at": "2024-04-29T22:47:57.401319Z"}], "thread_id": "Thread-7", "execution_time": 0.031858205795288086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__vendor_categories_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite2_vendor_category_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__vendor_categories_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.386724Z", "completed_at": "2024-04-29T22:47:57.396391Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.401605Z", "completed_at": "2024-04-29T22:47:57.401608Z"}], "thread_id": "Thread-8", "execution_time": 0.027926921844482422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__vendors_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite2_vendor_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__vendors_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.391025Z", "completed_at": "2024-04-29T22:47:57.397935Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.402686Z", "completed_at": "2024-04-29T22:47:57.402689Z"}], "thread_id": "Thread-2", "execution_time": 0.03408980369567871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__accounting_books_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite_accounting_books_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounting_books_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.405000Z", "completed_at": "2024-04-29T22:47:57.419893Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.428207Z", "completed_at": "2024-04-29T22:47:57.428213Z"}], "thread_id": "Thread-1", "execution_time": 0.038754940032958984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__accounting_periods_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite_accounting_periods_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounting_periods_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.408154Z", "completed_at": "2024-04-29T22:47:57.420754Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.431390Z", "completed_at": "2024-04-29T22:47:57.431401Z"}], "thread_id": "Thread-5", "execution_time": 0.038984060287475586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__accounts_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite_accounts_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounts_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.416951Z", "completed_at": "2024-04-29T22:47:57.423040Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.439491Z", "completed_at": "2024-04-29T22:47:57.439495Z"}], "thread_id": "Thread-6", "execution_time": 0.038702964782714844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__consolidated_exchange_rates_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite_consolidated_exchange_rates_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__consolidated_exchange_rates_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.413124Z", "completed_at": "2024-04-29T22:47:57.423349Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.439809Z", "completed_at": "2024-04-29T22:47:57.439814Z"}], "thread_id": "Thread-3", "execution_time": 0.040761709213256836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__classes_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite_classes_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__classes_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.428511Z", "completed_at": "2024-04-29T22:47:57.440114Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.445155Z", "completed_at": "2024-04-29T22:47:57.445158Z"}], "thread_id": "Thread-7", "execution_time": 0.027302265167236328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__customers_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite_customers_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__customers_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.424097Z", "completed_at": "2024-04-29T22:47:57.440413Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.445452Z", "completed_at": "2024-04-29T22:47:57.445455Z"}], "thread_id": "Thread-4", "execution_time": 0.031699180603027344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__currencies_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite_currencies_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__currencies_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.432320Z", "completed_at": "2024-04-29T22:47:57.441368Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.446148Z", "completed_at": "2024-04-29T22:47:57.446151Z"}], "thread_id": "Thread-8", "execution_time": 0.03422188758850098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__departments_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite_departments_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__departments_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.435389Z", "completed_at": "2024-04-29T22:47:57.441704Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.446400Z", "completed_at": "2024-04-29T22:47:57.446403Z"}], "thread_id": "Thread-2", "execution_time": 0.034259796142578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__expense_accounts_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite_expense_accounts_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__expense_accounts_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.448412Z", "completed_at": "2024-04-29T22:47:57.460701Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.468239Z", "completed_at": "2024-04-29T22:47:57.468245Z"}], "thread_id": "Thread-1", "execution_time": 0.03783011436462402, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__income_accounts_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite_income_accounts_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__income_accounts_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.451627Z", "completed_at": "2024-04-29T22:47:57.461098Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.468624Z", "completed_at": "2024-04-29T22:47:57.468627Z"}], "thread_id": "Thread-5", "execution_time": 0.03802680969238281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__items_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite_items_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__items_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.457904Z", "completed_at": "2024-04-29T22:47:57.467236Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.482203Z", "completed_at": "2024-04-29T22:47:57.482208Z"}], "thread_id": "Thread-6", "execution_time": 0.03888201713562012, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__locations_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite_locations_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__locations_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.461386Z", "completed_at": "2024-04-29T22:47:57.467983Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.482792Z", "completed_at": "2024-04-29T22:47:57.482800Z"}], "thread_id": "Thread-3", "execution_time": 0.03906106948852539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__subsidiaries_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite_subsidiaries_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__subsidiaries_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.471535Z", "completed_at": "2024-04-29T22:47:57.483106Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.488855Z", "completed_at": "2024-04-29T22:47:57.488859Z"}], "thread_id": "Thread-4", "execution_time": 0.026482105255126953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__transactions_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite_transactions_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__transactions_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.468884Z", "completed_at": "2024-04-29T22:47:57.483472Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.489158Z", "completed_at": "2024-04-29T22:47:57.489161Z"}], "thread_id": "Thread-7", "execution_time": 0.02742290496826172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__transaction_lines_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite_transaction_lines_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__transaction_lines_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.474303Z", "completed_at": "2024-04-29T22:47:57.484306Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.489691Z", "completed_at": "2024-04-29T22:47:57.489695Z"}], "thread_id": "Thread-8", "execution_time": 0.02872300148010254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__vendor_types_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite_vendor_types_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__vendor_types_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.478106Z", "completed_at": "2024-04-29T22:47:57.484647Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.489996Z", "completed_at": "2024-04-29T22:47:57.490003Z"}], "thread_id": "Thread-2", "execution_time": 0.028834819793701172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__vendors_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_25\".\"netsuite_vendors_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__vendors_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.492337Z", "completed_at": "2024-04-29T22:47:57.493657Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.502285Z", "completed_at": "2024-04-29T22:47:57.502291Z"}], "thread_id": "Thread-1", "execution_time": 0.01893305778503418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_account_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.494908Z", "completed_at": "2024-04-29T22:47:57.496042Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.503339Z", "completed_at": "2024-04-29T22:47:57.503345Z"}], "thread_id": "Thread-5", "execution_time": 0.018867969512939453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_account_type_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.498396Z", "completed_at": "2024-04-29T22:47:57.499602Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.507092Z", "completed_at": "2024-04-29T22:47:57.507095Z"}], "thread_id": "Thread-6", "execution_time": 0.023562192916870117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_accounting_book_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.499952Z", "completed_at": "2024-04-29T22:47:57.501131Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.507342Z", "completed_at": "2024-04-29T22:47:57.507345Z"}], "thread_id": "Thread-3", "execution_time": 0.023669958114624023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_accounting_book_sub_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.507594Z", "completed_at": "2024-04-29T22:47:57.508821Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.517180Z", "completed_at": "2024-04-29T22:47:57.517186Z"}], "thread_id": "Thread-4", "execution_time": 0.01810288429260254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_accounting_period_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.509088Z", "completed_at": "2024-04-29T22:47:57.510079Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.517474Z", "completed_at": "2024-04-29T22:47:57.517477Z"}], "thread_id": "Thread-7", "execution_time": 0.01814889907836914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_accounting_period_fiscal_cal_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.510614Z", "completed_at": "2024-04-29T22:47:57.511828Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.517964Z", "completed_at": "2024-04-29T22:47:57.517967Z"}], "thread_id": "Thread-8", "execution_time": 0.019572973251342773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_classification_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.512220Z", "completed_at": "2024-04-29T22:47:57.513290Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.518215Z", "completed_at": "2024-04-29T22:47:57.518218Z"}], "thread_id": "Thread-2", "execution_time": 0.01966571807861328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_consolidated_exchange_rate_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.520372Z", "completed_at": "2024-04-29T22:47:57.521684Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.531378Z", "completed_at": "2024-04-29T22:47:57.531384Z"}], "thread_id": "Thread-1", "execution_time": 0.018314123153686523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_currency_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.522965Z", "completed_at": "2024-04-29T22:47:57.525029Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.532398Z", "completed_at": "2024-04-29T22:47:57.532401Z"}], "thread_id": "Thread-5", "execution_time": 0.01839303970336914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_customer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.527452Z", "completed_at": "2024-04-29T22:47:57.528713Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.534933Z", "completed_at": "2024-04-29T22:47:57.534936Z"}], "thread_id": "Thread-6", "execution_time": 0.023897171020507812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_department_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.529020Z", "completed_at": "2024-04-29T22:47:57.530196Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.535186Z", "completed_at": "2024-04-29T22:47:57.535189Z"}], "thread_id": "Thread-3", "execution_time": 0.0240020751953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_entities_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.535430Z", "completed_at": "2024-04-29T22:47:57.536639Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.545797Z", "completed_at": "2024-04-29T22:47:57.545802Z"}], "thread_id": "Thread-4", "execution_time": 0.0178070068359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_entity_address_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.536901Z", "completed_at": "2024-04-29T22:47:57.537947Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.546079Z", "completed_at": "2024-04-29T22:47:57.546082Z"}], "thread_id": "Thread-7", "execution_time": 0.017821073532104492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.538451Z", "completed_at": "2024-04-29T22:47:57.539622Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.546577Z", "completed_at": "2024-04-29T22:47:57.546581Z"}], "thread_id": "Thread-8", "execution_time": 0.019222021102905273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_job_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.539959Z", "completed_at": "2024-04-29T22:47:57.541879Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.546872Z", "completed_at": "2024-04-29T22:47:57.546881Z"}], "thread_id": "Thread-2", "execution_time": 0.01930975914001465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_location_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.549137Z", "completed_at": "2024-04-29T22:47:57.550420Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.558962Z", "completed_at": "2024-04-29T22:47:57.558967Z"}], "thread_id": "Thread-1", "execution_time": 0.017387866973876953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_location_main_address_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.551643Z", "completed_at": "2024-04-29T22:47:57.552700Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.559929Z", "completed_at": "2024-04-29T22:47:57.559932Z"}], "thread_id": "Thread-5", "execution_time": 0.01748490333557129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_subsidiary_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.555132Z", "completed_at": "2024-04-29T22:47:57.556420Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.562369Z", "completed_at": "2024-04-29T22:47:57.562372Z"}], "thread_id": "Thread-6", "execution_time": 0.02239513397216797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_tran_acct_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.556743Z", "completed_at": "2024-04-29T22:47:57.557844Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.562618Z", "completed_at": "2024-04-29T22:47:57.562621Z"}], "thread_id": "Thread-3", "execution_time": 0.0225369930267334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_transaction_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.562866Z", "completed_at": "2024-04-29T22:47:57.564799Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.572749Z", "completed_at": "2024-04-29T22:47:57.572754Z"}], "thread_id": "Thread-4", "execution_time": 0.016872406005859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_transaction_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.565068Z", "completed_at": "2024-04-29T22:47:57.566075Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.573003Z", "completed_at": "2024-04-29T22:47:57.573006Z"}], "thread_id": "Thread-7", "execution_time": 0.016879796981811523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_vendor_category_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.566648Z", "completed_at": "2024-04-29T22:47:57.567702Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.573457Z", "completed_at": "2024-04-29T22:47:57.573459Z"}], "thread_id": "Thread-8", "execution_time": 0.018141984939575195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_vendor_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.567997Z", "completed_at": "2024-04-29T22:47:57.569034Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.573703Z", "completed_at": "2024-04-29T22:47:57.573706Z"}], "thread_id": "Thread-2", "execution_time": 0.018240928649902344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_accounting_books_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.575767Z", "completed_at": "2024-04-29T22:47:57.576945Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.586227Z", "completed_at": "2024-04-29T22:47:57.586233Z"}], "thread_id": "Thread-1", "execution_time": 0.01735401153564453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_accounting_periods_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.578118Z", "completed_at": "2024-04-29T22:47:57.579154Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.587183Z", "completed_at": "2024-04-29T22:47:57.587186Z"}], "thread_id": "Thread-5", "execution_time": 0.0174558162689209, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_accounts_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.581661Z", "completed_at": "2024-04-29T22:47:57.583731Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.589703Z", "completed_at": "2024-04-29T22:47:57.589706Z"}], "thread_id": "Thread-6", "execution_time": 0.023483991622924805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_classes_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.584086Z", "completed_at": "2024-04-29T22:47:57.585121Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.590100Z", "completed_at": "2024-04-29T22:47:57.590104Z"}], "thread_id": "Thread-3", "execution_time": 0.023662090301513672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_consolidated_exchange_rates_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.590387Z", "completed_at": "2024-04-29T22:47:57.591642Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.600590Z", "completed_at": "2024-04-29T22:47:57.600593Z"}], "thread_id": "Thread-4", "execution_time": 0.017457962036132812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_currencies_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.591996Z", "completed_at": "2024-04-29T22:47:57.593046Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.600836Z", "completed_at": "2024-04-29T22:47:57.600838Z"}], "thread_id": "Thread-7", "execution_time": 0.017492055892944336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_customers_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.593605Z", "completed_at": "2024-04-29T22:47:57.594619Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.601297Z", "completed_at": "2024-04-29T22:47:57.601300Z"}], "thread_id": "Thread-8", "execution_time": 0.018717050552368164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_departments_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.594928Z", "completed_at": "2024-04-29T22:47:57.596773Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.601535Z", "completed_at": "2024-04-29T22:47:57.601537Z"}], "thread_id": "Thread-2", "execution_time": 0.018826961517333984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_expense_accounts_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.603592Z", "completed_at": "2024-04-29T22:47:57.604776Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.612618Z", "completed_at": "2024-04-29T22:47:57.612623Z"}], "thread_id": "Thread-1", "execution_time": 0.015884876251220703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_income_accounts_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.605957Z", "completed_at": "2024-04-29T22:47:57.607048Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.613547Z", "completed_at": "2024-04-29T22:47:57.613550Z"}], "thread_id": "Thread-5", "execution_time": 0.015964031219482422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_items_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.609174Z", "completed_at": "2024-04-29T22:47:57.610277Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.615985Z", "completed_at": "2024-04-29T22:47:57.615987Z"}], "thread_id": "Thread-6", "execution_time": 0.021142244338989258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_locations_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.610573Z", "completed_at": "2024-04-29T22:47:57.611608Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.616226Z", "completed_at": "2024-04-29T22:47:57.616229Z"}], "thread_id": "Thread-3", "execution_time": 0.021363019943237305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_subsidiaries_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.616465Z", "completed_at": "2024-04-29T22:47:57.617544Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.626327Z", "completed_at": "2024-04-29T22:47:57.626331Z"}], "thread_id": "Thread-4", "execution_time": 0.016894817352294922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_transaction_lines_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.617799Z", "completed_at": "2024-04-29T22:47:57.619565Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.626618Z", "completed_at": "2024-04-29T22:47:57.626621Z"}], "thread_id": "Thread-7", "execution_time": 0.016993045806884766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_transactions_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.620073Z", "completed_at": "2024-04-29T22:47:57.621083Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.627105Z", "completed_at": "2024-04-29T22:47:57.627108Z"}], "thread_id": "Thread-8", "execution_time": 0.022279024124145508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_vendor_types_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.621373Z", "completed_at": "2024-04-29T22:47:57.622420Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:57.627356Z", "completed_at": "2024-04-29T22:47:57.627358Z"}], "thread_id": "Thread-2", "execution_time": 0.024534940719604492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_vendors_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.645219Z", "completed_at": "2024-04-29T22:47:58.582347Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:58.585212Z", "completed_at": "2024-04-29T22:47:58.585216Z"}], "thread_id": "Thread-6", "execution_time": 1.0949311256408691, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_periods", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_periods_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    alllocked\n    \n as \n    \n    alllocked\n    \n, \n    \n    \n    allownonglchanges\n    \n as \n    \n    allownonglchanges\n    \n, \n    \n    \n    aplocked\n    \n as \n    \n    aplocked\n    \n, \n    \n    \n    arlocked\n    \n as \n    \n    arlocked\n    \n, \n    \n    \n    closed\n    \n as \n    \n    closed\n    \n, \n    \n    \n    closedondate\n    \n as \n    \n    closedondate\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    enddate\n    \n as \n    \n    enddate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isadjust\n    \n as \n    \n    isadjust\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    isposting\n    \n as \n    \n    isposting\n    \n, \n    \n    \n    isquarter\n    \n as \n    \n    isquarter\n    \n, \n    \n    \n    isyear\n    \n as \n    \n    isyear\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    periodname\n    \n as \n    \n    periodname\n    \n, \n    \n    \n    startdate\n    \n as \n    \n    startdate\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as accounting_period_id,\n        parent as parent_id, \n        periodname as name,\n        startdate as starting_at,\n        enddate as ending_at,\n        closedondate as closed_at,\n        isquarter = 'T' as is_quarter,\n        isyear = 'T' as is_year,\n        isadjust = 'T' as is_adjustment,\n        isposting = 'T' as is_posting,\n        closed = 'T' as is_closed,\n        alllocked = 'T' as is_all_locked,\n        arlocked = 'T' as is_ar_locked,\n        aplocked = 'T' as is_ap_locked\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_periods\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.629680Z", "completed_at": "2024-04-29T22:47:58.583112Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:58.585681Z", "completed_at": "2024-04-29T22:47:58.585683Z"}], "thread_id": "Thread-1", "execution_time": 1.1148452758789062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__account_types", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__account_types_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    balancesheet\n    \n as \n    \n    balancesheet\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    defaultcashflowratetype\n    \n as \n    \n    defaultcashflowratetype\n    \n, \n    \n    \n    defaultgeneralratetype\n    \n as \n    \n    defaultgeneralratetype\n    \n, \n    \n    \n    eliminationalgo\n    \n as \n    \n    eliminationalgo\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    includeinrevaldefault\n    \n as \n    \n    includeinrevaldefault\n    \n, \n    \n    \n    internalid\n    \n as \n    \n    internalid\n    \n, \n    \n    \n        \n            \n            \"left\"\n            \n        \n    \n as \n    \n        \n            \n            \"left\"\n            \n        \n    \n, \n    \n    \n    longname\n    \n as \n    \n    longname\n    \n, \n    \n    \n    seqnum\n    \n as \n    \n    seqnum\n    \n, \n    \n    \n    usercanchangerevaloption\n    \n as \n    \n    usercanchangerevaloption\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted,\n        _fivetran_synced,\n        id as account_type_id,\n        balancesheet = 'T' as is_balancesheet,\"left\"= 'T' as is_leftside,\n        longname as type_name\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__account_types\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.638068Z", "completed_at": "2024-04-29T22:47:58.583387Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:58.585925Z", "completed_at": "2024-04-29T22:47:58.585927Z"}], "thread_id": "Thread-5", "execution_time": 1.1165239810943604, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_books", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_books_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    basebook\n    \n as \n    \n    basebook\n    \n, \n    cast(null as TEXT) as \n    \n    contingentrevenuehandling\n    \n , \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    effectiveperiod\n    \n as \n    \n    effectiveperiod\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isadjustmentonly\n    \n as \n    \n    isadjustmentonly\n    \n, \n    \n    \n    isconsolidated\n    \n as \n    \n    isconsolidated\n    \n, \n    \n    \n    isprimary\n    \n as \n    \n    isprimary\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    subsidiariesstring\n    \n as \n    \n    subsidiariesstring\n    \n, \n    cast(null as TEXT) as \n    \n    twosteprevenueallocation\n    \n , \n    cast(null as TEXT) as \n    \n    unbilledreceivablegrouping\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as accounting_book_id,\n        name as accounting_book_name,\n        basebook as base_book_id,\n        effectiveperiod as effective_period_id,\n        isadjustmentonly = 'T' as is_adjustment_only,\n        isconsolidated = 'T' as is_consolidated,\n        contingentrevenuehandling as is_contingent_revenue_handling,\n        isprimary = 'T' as is_primary,\n        twosteprevenueallocation as is_two_step_revenue_allocation\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_books\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.668126Z", "completed_at": "2024-04-29T22:47:58.582002Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:58.584947Z", "completed_at": "2024-04-29T22:47:58.584956Z"}], "thread_id": "Thread-8", "execution_time": 1.087951898574829, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__consolidated_exchange_rates_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    averagerate\n    \n as \n    \n    averagerate\n    \n, \n    \n    \n    currentrate\n    \n as \n    \n    currentrate\n    \n, \n    \n    \n    fromcurrency\n    \n as \n    \n    fromcurrency\n    \n, \n    \n    \n    fromsubsidiary\n    \n as \n    \n    fromsubsidiary\n    \n, \n    \n    \n    historicalrate\n    \n as \n    \n    historicalrate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    accountingbook\n    \n as \n    \n    accountingbook\n    \n, \n    \n    \n    postingperiod\n    \n as \n    \n    postingperiod\n    \n, \n    \n    \n    tocurrency\n    \n as \n    \n    tocurrency\n    \n, \n    \n    \n    tosubsidiary\n    \n as \n    \n    tosubsidiary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as consolidated_exchange_rate_id,\n        postingperiod as accounting_period_id,\n        fromcurrency as from_currency_id,\n        fromsubsidiary as from_subsidiary_id,\n        tocurrency as to_currency_id,\n        tosubsidiary as to_subsidiary_id,\n        accountingbook as accounting_book_id,\n        currentrate as current_rate, \n        averagerate as average_rate,\n        historicalrate as historical_rate\n\n        --The below macro adds the fields defined within your consolidated_exchange_rates_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__consolidated_exchange_rates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.649853Z", "completed_at": "2024-04-29T22:47:58.584209Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:58.586663Z", "completed_at": "2024-04-29T22:47:58.586666Z"}], "thread_id": "Thread-3", "execution_time": 1.1158201694488525, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounts", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounts_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    acctnumber\n    \n as \n    \n    acctnumber\n    \n, \n    \n    \n    accttype\n    \n as \n    \n    accttype\n    \n, \n    \n    \n    sspecacct\n    \n as \n    \n    sspecacct\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    deferralacct\n    \n as \n    \n    deferralacct\n    \n, \n    \n    \n    cashflowrate\n    \n as \n    \n    cashflowrate\n    \n, \n    \n    \n    generalrate\n    \n as \n    \n    generalrate\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    class\n    \n as \n    \n    class\n    \n, \n    \n    \n    department\n    \n as \n    \n    department\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    includechildren\n    \n as \n    \n    includechildren\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    issummary\n    \n as \n    \n    issummary\n    \n, \n    \n    \n    eliminate\n    \n as \n    \n    eliminate\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as account_id, \n        externalid as account_external_id,\n        parent as parent_id,\n        acctnumber as account_number,\n        accttype as account_type_id,\n        sspecacct as special_account_type_id,\n        fullname as name,\n        description as account_description,\n        deferralacct as deferral_account_id,\n        cashflowrate as cash_flow_rate_type,\n        generalrate as general_rate_type,\n        currency as currency_id,\n        class as class_id,\n        department as department_id,\n        location as location_id,\n        includechildren = 'T' as is_including_child_subs,\n        isinactive = 'T' as is_inactive,\n        issummary = 'T' as is_summary,\n        eliminate = 'T' as is_eliminate,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your accounts_pass_through_columns variable into the staging model\n        \n\n\n\n\n        \n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.663718Z", "completed_at": "2024-04-29T22:47:58.746626Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:58.758417Z", "completed_at": "2024-04-29T22:47:58.758424Z"}], "thread_id": "Thread-7", "execution_time": 1.1899158954620361, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_period_fiscal_cal_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accountingperiod\n    \n as \n    \n    accountingperiod\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    fiscalcalendar\n    \n as \n    \n    fiscalcalendar\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        _fivetran_synced,\n        accountingperiod as accounting_period_id,\n        fiscalcalendar as fiscal_calendar_id,\n        parent as parent_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_period_fiscal_cal\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.708266Z", "completed_at": "2024-04-29T22:47:58.747654Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:58.759321Z", "completed_at": "2024-04-29T22:47:58.759325Z"}], "thread_id": "Thread-2", "execution_time": 1.1993122100830078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_book_subsidiaries_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accountingbook\n    \n as \n    \n    accountingbook\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        _fivetran_synced,\n        accountingbook as accounting_book_id,\n        status,\n        subsidiary as subsidiary_id\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_book_subsidiaries\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:57.658759Z", "completed_at": "2024-04-29T22:47:58.746999Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:58.758751Z", "completed_at": "2024-04-29T22:47:58.758755Z"}], "thread_id": "Thread-4", "execution_time": 1.2012569904327393, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__classes", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__classes_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as class_id,\n        externalid as class_external_id,\n        name,\n        fullname as full_name,\n        isinactive = 'T' as is_inactive,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your classes_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__classes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:58.752521Z", "completed_at": "2024-04-29T22:47:59.452552Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:59.454426Z", "completed_at": "2024-04-29T22:47:59.454439Z"}], "thread_id": "Thread-6", "execution_time": 0.8090391159057617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__currencies", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__currencies_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    currencyprecision\n    \n as \n    \n    currencyprecision\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    displaysymbol\n    \n as \n    \n    displaysymbol\n    \n, \n    \n    \n    exchangerate\n    \n as \n    \n    exchangerate\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    fxrateupdatetimezone\n    \n as \n    \n    fxrateupdatetimezone\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    includeinfxrateupdates\n    \n as \n    \n    includeinfxrateupdates\n    \n, \n    \n    \n    isbasecurrency\n    \n as \n    \n    isbasecurrency\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    overridecurrencyformat\n    \n as \n    \n    overridecurrencyformat\n    \n, \n    \n    \n    symbol\n    \n as \n    \n    symbol\n    \n, \n    \n    \n    symbolplacement\n    \n as \n    \n    symbolplacement\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as currency_id,\n        name,\n        symbol\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__currencies\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:58.769217Z", "completed_at": "2024-04-29T22:47:59.543571Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:59.651799Z", "completed_at": "2024-04-29T22:47:59.651805Z"}], "thread_id": "Thread-8", "execution_time": 0.9858770370483398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__entities", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__entities_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    altemail\n    \n as \n    \n    altemail\n    \n, \n    \n    \n    altname\n    \n as \n    \n    altname\n    \n, \n    \n    \n    altphone\n    \n as \n    \n    altphone\n    \n, \n    \n    \n    comments\n    \n as \n    \n    comments\n    \n, \n    \n    \n    contact\n    \n as \n    \n    contact\n    \n, \n    \n    \n    customer\n    \n as \n    \n    customer\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    datecreated\n    \n as \n    \n    datecreated\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    employee\n    \n as \n    \n    employee\n    \n, \n    \n    \n    entityid\n    \n as \n    \n    entityid\n    \n, \n    \n    \n    entitynumber\n    \n as \n    \n    entitynumber\n    \n, \n    \n    \n    entitytitle\n    \n as \n    \n    entitytitle\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    fax\n    \n as \n    \n    fax\n    \n, \n    \n    \n    firstname\n    \n as \n    \n    firstname\n    \n, \n    \n    \n    genericresource\n    \n as \n    \n    genericresource\n    \n, \n    \n    \n    homephone\n    \n as \n    \n    homephone\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    isperson\n    \n as \n    \n    isperson\n    \n, \n    \n    \n    laborcost\n    \n as \n    \n    laborcost\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    lastname\n    \n as \n    \n    lastname\n    \n, \n    \n    \n    middlename\n    \n as \n    \n    middlename\n    \n, \n    \n    \n    mobilephone\n    \n as \n    \n    mobilephone\n    \n, \n    \n    \n    othername\n    \n as \n    \n    othername\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    partner\n    \n as \n    \n    partner\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    project\n    \n as \n    \n    project\n    \n, \n    \n    \n    projecttemplate\n    \n as \n    \n    projecttemplate\n    \n, \n    \n    \n    salutation\n    \n as \n    \n    salutation\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    toplevelparent\n    \n as \n    \n    toplevelparent\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    vendor\n    \n as \n    \n    vendor\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as entity_id,\n        parent as parent_id,\n        entitytitle as entity_name,\n        type as entity_type,\n        isperson = 'T' as is_person,\n        contact as contact_id,\n        customer as customer_id,\n        employee as employee_id,\n        project as job_id,\n        vendor as vendor_id\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__entities\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:58.774687Z", "completed_at": "2024-04-29T22:47:59.572657Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:59.653058Z", "completed_at": "2024-04-29T22:47:59.653062Z"}], "thread_id": "Thread-3", "execution_time": 0.9854152202606201, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__entity_address", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__entity_address_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    addr1\n    \n as \n    \n    addr1\n    \n, \n    \n    \n    addr2\n    \n as \n    \n    addr2\n    \n, \n    \n    \n    addr3\n    \n as \n    \n    addr3\n    \n, \n    \n    \n    addressee\n    \n as \n    \n    addressee\n    \n, \n    \n    \n    addrphone\n    \n as \n    \n    addrphone\n    \n, \n    \n    \n    addrtext\n    \n as \n    \n    addrtext\n    \n, \n    \n    \n    attention\n    \n as \n    \n    attention\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    dropdownstate\n    \n as \n    \n    dropdownstate\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    nkey\n    \n as \n    \n    nkey\n    \n, \n    \n    \n    override\n    \n as \n    \n    override\n    \n, \n    \n    \n    recordowner\n    \n as \n    \n    recordowner\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        addr1,\n        addr2,\n        addr3,\n        addressee,\n        addrtext as full_address,\n        city,\n        country,\n        coalesce(state, dropdownstate) as state,\n        nkey,\n        zip as zipcode\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__entity_address\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:58.864045Z", "completed_at": "2024-04-29T22:47:59.651509Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:59.655638Z", "completed_at": "2024-04-29T22:47:59.655642Z"}], "thread_id": "Thread-4", "execution_time": 0.8953862190246582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__location_main_address", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__location_main_address_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    addr1\n    \n as \n    \n    addr1\n    \n, \n    \n    \n    addr2\n    \n as \n    \n    addr2\n    \n, \n    \n    \n    addr3\n    \n as \n    \n    addr3\n    \n, \n    \n    \n    addressee\n    \n as \n    \n    addressee\n    \n, \n    \n    \n    addrphone\n    \n as \n    \n    addrphone\n    \n, \n    \n    \n    addrtext\n    \n as \n    \n    addrtext\n    \n, \n    \n    \n    attention\n    \n as \n    \n    attention\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    dropdownstate\n    \n as \n    \n    dropdownstate\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    nkey\n    \n as \n    \n    nkey\n    \n, \n    \n    \n    override\n    \n as \n    \n    override\n    \n, \n    \n    \n    recordowner\n    \n as \n    \n    recordowner\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        addr1,\n        addr2,\n        addr3,\n        addressee,\n        addrtext as full_address,\n        city,\n        country,\n        coalesce(state, dropdownstate) as state,\n        nkey,\n        zip as zipcode\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__location_main_address\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:58.858349Z", "completed_at": "2024-04-29T22:47:59.653360Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:59.661703Z", "completed_at": "2024-04-29T22:47:59.661710Z"}], "thread_id": "Thread-2", "execution_time": 0.896449089050293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__jobs", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__jobs_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accountnumber\n    \n as \n    \n    accountnumber\n    \n, \n    \n    \n    actualtime\n    \n as \n    \n    actualtime\n    \n, \n    \n    \n    allowallresourcesfortasks\n    \n as \n    \n    allowallresourcesfortasks\n    \n, \n    \n    \n    allowexpenses\n    \n as \n    \n    allowexpenses\n    \n, \n    \n    \n    allowtime\n    \n as \n    \n    allowtime\n    \n, \n    \n    \n    alternatecontact\n    \n as \n    \n    alternatecontact\n    \n, \n    \n    \n    altname\n    \n as \n    \n    altname\n    \n, \n    \n    \n    billingschedule\n    \n as \n    \n    billingschedule\n    \n, \n    \n    \n    calculatedenddate\n    \n as \n    \n    calculatedenddate\n    \n, \n    \n    \n    calculatedenddatebaseline\n    \n as \n    \n    calculatedenddatebaseline\n    \n, \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    comments\n    \n as \n    \n    comments\n    \n, \n    \n    \n    companyname\n    \n as \n    \n    companyname\n    \n, \n    \n    \n    contact\n    \n as \n    \n    contact\n    \n, \n    \n    \n    contactlist\n    \n as \n    \n    contactlist\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    currencyprecision\n    \n as \n    \n    currencyprecision\n    \n, \n    \n    \n    custentity1\n    \n as \n    \n    custentity1\n    \n, \n    \n    \n    custentity4\n    \n as \n    \n    custentity4\n    \n, \n    \n    \n    custentity5\n    \n as \n    \n    custentity5\n    \n, \n    \n    \n    customer\n    \n as \n    \n    customer\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    datecreated\n    \n as \n    \n    datecreated\n    \n, \n    \n    \n    defaultbillingaddress\n    \n as \n    \n    defaultbillingaddress\n    \n, \n    \n    \n    defaultshippingaddress\n    \n as \n    \n    defaultshippingaddress\n    \n, \n    \n    \n    enddate\n    \n as \n    \n    enddate\n    \n, \n    \n    \n    entityid\n    \n as \n    \n    entityid\n    \n, \n    \n    \n    entitynumber\n    \n as \n    \n    entitynumber\n    \n, \n    \n    \n    entitystatus\n    \n as \n    \n    entitystatus\n    \n, \n    \n    \n    entitytitle\n    \n as \n    \n    entitytitle\n    \n, \n    \n    \n    estimatedcost\n    \n as \n    \n    estimatedcost\n    \n, \n    \n    \n    estimatedgrossprofit\n    \n as \n    \n    estimatedgrossprofit\n    \n, \n    \n    \n    estimatedgrossprofitpercent\n    \n as \n    \n    estimatedgrossprofitpercent\n    \n, \n    \n    \n    estimatedlaborcost\n    \n as \n    \n    estimatedlaborcost\n    \n, \n    \n    \n    estimatedlaborcostbaseline\n    \n as \n    \n    estimatedlaborcostbaseline\n    \n, \n    \n    \n    estimatedlaborrevenue\n    \n as \n    \n    estimatedlaborrevenue\n    \n, \n    \n    \n    estimatedrevenue\n    \n as \n    \n    estimatedrevenue\n    \n, \n    \n    \n    estimatedtime\n    \n as \n    \n    estimatedtime\n    \n, \n    \n    \n    estimatedtimeoverride\n    \n as \n    \n    estimatedtimeoverride\n    \n, \n    \n    \n    estimatedtimeoverridebaseline\n    \n as \n    \n    estimatedtimeoverridebaseline\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    files\n    \n as \n    \n    files\n    \n, \n    \n    \n    forecastchargerunondemand\n    \n as \n    \n    forecastchargerunondemand\n    \n, \n    \n    \n    fxrate\n    \n as \n    \n    fxrate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    includecrmtasksintotals\n    \n as \n    \n    includecrmtasksintotals\n    \n, \n    \n    \n    isexempttime\n    \n as \n    \n    isexempttime\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    isproductivetime\n    \n as \n    \n    isproductivetime\n    \n, \n    \n    \n    isutilizedtime\n    \n as \n    \n    isutilizedtime\n    \n, \n    \n    \n    jobbillingtype\n    \n as \n    \n    jobbillingtype\n    \n, \n    \n    \n    jobitem\n    \n as \n    \n    jobitem\n    \n, \n    \n    \n    jobprice\n    \n as \n    \n    jobprice\n    \n, \n    \n    \n    jobtype\n    \n as \n    \n    jobtype\n    \n, \n    \n    \n    lastbaselinedate\n    \n as \n    \n    lastbaselinedate\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    limittimetoassignees\n    \n as \n    \n    limittimetoassignees\n    \n, \n    \n    \n    materializetime\n    \n as \n    \n    materializetime\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    percentcomplete\n    \n as \n    \n    percentcomplete\n    \n, \n    \n    \n    percenttimecomplete\n    \n as \n    \n    percenttimecomplete\n    \n, \n    \n    \n    primarycontact\n    \n as \n    \n    primarycontact\n    \n, \n    \n    \n    projectedenddate\n    \n as \n    \n    projectedenddate\n    \n, \n    \n    \n    projectedenddatebaseline\n    \n as \n    \n    projectedenddatebaseline\n    \n, \n    \n    \n    projectmanager\n    \n as \n    \n    projectmanager\n    \n, \n    \n    \n    startdate\n    \n as \n    \n    startdate\n    \n, \n    \n    \n    startdatebaseline\n    \n as \n    \n    startdatebaseline\n    \n, \n    \n    \n    timeapproval\n    \n as \n    \n    timeapproval\n    \n, \n    \n    \n    timeremaining\n    \n as \n    \n    timeremaining\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        id as job_id,\n        externalid as job_external_id,\n        customer as customer_id,\n        entityid as entity_id,\n        defaultbillingaddress as billing_address_id,\n        defaultshippingaddress as shipping_address_id,\n        parent as parent_id\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__jobs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:58.759614Z", "completed_at": "2024-04-29T22:47:59.643441Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:59.654209Z", "completed_at": "2024-04-29T22:47:59.654213Z"}], "thread_id": "Thread-1", "execution_time": 1.0060629844665527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__departments", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__departments_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as department_id,\n        parent as parent_id,\n        name,\n        fullname as full_name,\n        subsidiary as subsidiary_id,\n        isinactive = 'T' as is_inactive,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your departments_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__departments\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:58.846690Z", "completed_at": "2024-04-29T22:47:59.654677Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:59.662532Z", "completed_at": "2024-04-29T22:47:59.662535Z"}], "thread_id": "Thread-7", "execution_time": 0.9093780517578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__items", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__items_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as integer) as \n    \n    alternatedemandsourceitem\n    \n , \n    cast(null as integer) as \n    \n    amortizationperiod\n    \n , \n    cast(null as integer) as \n    \n    amortizationtemplate\n    \n , \n    \n    \n    assetaccount\n    \n as \n    \n    assetaccount\n    \n, \n    cast(null as TEXT) as \n    \n    atpmethod\n    \n , \n    cast(null as TEXT) as \n    \n    autoexpandkitforrevenuemgmt\n    \n , \n    cast(null as float) as \n    \n    averagecost\n    \n , \n    cast(null as integer) as \n    \n    backwardconsumptiondays\n    \n , \n    cast(null as integer) as \n    \n    billexchratevarianceacct\n    \n , \n    cast(null as integer) as \n    \n    billingschedule\n    \n , \n    cast(null as integer) as \n    \n    billpricevarianceacct\n    \n , \n    cast(null as integer) as \n    \n    billqtyvarianceacct\n    \n , \n    cast(null as TEXT) as \n    \n    buildentireassembly\n    \n , \n    cast(null as float) as \n    \n    buildtime\n    \n , \n    \n    \n    class\n    \n as \n    \n    class\n    \n, \n    cast(null as integer) as \n    \n    consumptionunit\n    \n , \n    cast(null as TEXT) as \n    \n    copydescription\n    \n , \n    cast(null as float) as \n    \n    cost\n    \n , \n    cast(null as float) as \n    \n    costestimate\n    \n , \n    cast(null as TEXT) as \n    \n    costestimatetype\n    \n , \n    cast(null as TEXT) as \n    \n    costingmethod\n    \n , \n    cast(null as TEXT) as \n    \n    costingmethoddisplay\n    \n , \n    cast(null as TEXT) as \n    \n    countryofmanufacture\n    \n , \n    cast(null as timestamp) as \n    \n    createddate\n    \n , \n    cast(null as integer) as \n    \n    createexpenseplanson\n    \n , \n    cast(null as TEXT) as \n    \n    createjob\n    \n , \n    cast(null as integer) as \n    \n    createrevenueplanson\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    \n    \n    deferralaccount\n    \n as \n    \n    deferralaccount\n    \n, \n    cast(null as integer) as \n    \n    deferredrevenueaccount\n    \n , \n    cast(null as TEXT) as \n    \n    deferrevrec\n    \n , \n    cast(null as float) as \n    \n    demandmodifier\n    \n , \n    cast(null as TEXT) as \n    \n    demandsource\n    \n , \n    cast(null as integer) as \n    \n    demandtimefence\n    \n , \n    \n    \n    department\n    \n as \n    \n    department\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    cast(null as TEXT) as \n    \n    directrevenueposting\n    \n , \n    cast(null as TEXT) as \n    \n    displayname\n    \n , \n    cast(null as integer) as \n    \n    dropshipexpenseaccount\n    \n , \n    cast(null as TEXT) as \n    \n    enforceminqtyinternally\n    \n , \n    cast(null as TEXT) as \n    \n    excludefromsitemap\n    \n , \n    \n    \n    expenseaccount\n    \n as \n    \n    expenseaccount\n    \n, \n    cast(null as integer) as \n    \n    expenseamortizationrule\n    \n , \n    cast(null as TEXT) as \n    \n    externalid\n    \n , \n    cast(null as float) as \n    \n    fixedlotsize\n    \n , \n    cast(null as integer) as \n    \n    forwardconsumptiondays\n    \n , \n    cast(null as TEXT) as \n    \n    froogleproductfeed\n    \n , \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    cast(null as float) as \n    \n    fxcost\n    \n , \n    \n    \n    gainlossaccount\n    \n as \n    \n    gainlossaccount\n    \n, \n    cast(null as TEXT) as \n    \n    generateaccruals\n    \n , \n    cast(null as float) as \n    \n    handlingcost\n    \n , \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as TEXT) as \n    \n    includechildren\n    \n , \n    \n    \n    incomeaccount\n    \n as \n    \n    incomeaccount\n    \n, \n    cast(null as integer) as \n    \n    intercodefrevaccount\n    \n , \n    cast(null as integer) as \n    \n    intercoexpenseaccount\n    \n , \n    cast(null as integer) as \n    \n    intercoincomeaccount\n    \n , \n    cast(null as TEXT) as \n    \n    isdropshipitem\n    \n , \n    cast(null as TEXT) as \n    \n    isfulfillable\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as TEXT) as \n    \n    islotitem\n    \n , \n    cast(null as TEXT) as \n    \n    isonline\n    \n , \n    cast(null as TEXT) as \n    \n    isphantom\n    \n , \n    cast(null as TEXT) as \n    \n    isserialitem\n    \n , \n    cast(null as TEXT) as \n    \n    isspecialorderitem\n    \n , \n    cast(null as TEXT) as \n    \n    isspecialworkorderitem\n    \n , \n    cast(null as TEXT) as \n    \n    itemid\n    \n , \n    cast(null as integer) as \n    \n    itemrevenuecategory\n    \n , \n    \n    \n    itemtype\n    \n as \n    \n    itemtype\n    \n, \n    cast(null as timestamp) as \n    \n    lastmodifieddate\n    \n , \n    cast(null as float) as \n    \n    lastpurchaseprice\n    \n , \n    cast(null as integer) as \n    \n    leadtime\n    \n , \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    cast(null as TEXT) as \n    \n    manufacturer\n    \n , \n    cast(null as TEXT) as \n    \n    matchbilltoreceipt\n    \n , \n    cast(null as TEXT) as \n    \n    matrixitemnametemplate\n    \n , \n    cast(null as TEXT) as \n    \n    matrixtype\n    \n , \n    cast(null as integer) as \n    \n    maximumquantity\n    \n , \n    cast(null as integer) as \n    \n    minimumquantity\n    \n , \n    cast(null as TEXT) as \n    \n    mpn\n    \n , \n    cast(null as TEXT) as \n    \n    nextagcategory\n    \n , \n    cast(null as TEXT) as \n    \n    nextagproductfeed\n    \n , \n    cast(null as TEXT) as \n    \n    overallquantitypricingtype\n    \n , \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    cast(null as integer) as \n    \n    periodiclotsizedays\n    \n , \n    cast(null as TEXT) as \n    \n    periodiclotsizetype\n    \n , \n    cast(null as integer) as \n    \n    preferredlocation\n    \n , \n    cast(null as integer) as \n    \n    pricinggroup\n    \n , \n    cast(null as TEXT) as \n    \n    printitems\n    \n , \n    cast(null as integer) as \n    \n    prodpricevarianceacct\n    \n , \n    cast(null as integer) as \n    \n    prodqtyvarianceacct\n    \n , \n    cast(null as integer) as \n    \n    projectexpensetype\n    \n , \n    cast(null as integer) as \n    \n    projecttemplate\n    \n , \n    cast(null as TEXT) as \n    \n    purchasedescription\n    \n , \n    cast(null as float) as \n    \n    purchaseorderamount\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantity\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantitydiff\n    \n , \n    cast(null as integer) as \n    \n    purchasepricevarianceacct\n    \n , \n    cast(null as integer) as \n    \n    purchaseunit\n    \n , \n    cast(null as integer) as \n    \n    quantitypricingschedule\n    \n , \n    cast(null as float) as \n    \n    receiptamount\n    \n , \n    cast(null as float) as \n    \n    receiptquantity\n    \n , \n    cast(null as float) as \n    \n    receiptquantitydiff\n    \n , \n    cast(null as TEXT) as \n    \n    relateditemsdescription\n    \n , \n    cast(null as integer) as \n    \n    rescheduleindays\n    \n , \n    cast(null as integer) as \n    \n    rescheduleoutdays\n    \n , \n    cast(null as float) as \n    \n    residual\n    \n , \n    cast(null as integer) as \n    \n    revenueallocationgroup\n    \n , \n    cast(null as integer) as \n    \n    revenuerecognitionrule\n    \n , \n    cast(null as integer) as \n    \n    revrecforecastrule\n    \n , \n    cast(null as integer) as \n    \n    revreclassfxaccount\n    \n , \n    cast(null as TEXT) as \n    \n    roundupascomponent\n    \n , \n    cast(null as float) as \n    \n    safetystocklevel\n    \n , \n    cast(null as integer) as \n    \n    saleunit\n    \n , \n    cast(null as integer) as \n    \n    scrapacct\n    \n , \n    cast(null as TEXT) as \n    \n    searchkeywords\n    \n , \n    cast(null as TEXT) as \n    \n    seasonaldemand\n    \n , \n    cast(null as TEXT) as \n    \n    shipindividually\n    \n , \n    cast(null as integer) as \n    \n    shippackage\n    \n , \n    cast(null as float) as \n    \n    shippingcost\n    \n , \n    cast(null as TEXT) as \n    \n    shoppingdotcomcategory\n    \n , \n    cast(null as TEXT) as \n    \n    shoppingproductfeed\n    \n , \n    cast(null as integer) as \n    \n    shopzillacategoryid\n    \n , \n    cast(null as TEXT) as \n    \n    shopzillaproductfeed\n    \n , \n    cast(null as TEXT) as \n    \n    sitemappriority\n    \n , \n    cast(null as TEXT) as \n    \n    stockdescription\n    \n , \n    cast(null as integer) as \n    \n    stockunit\n    \n , \n    cast(null as TEXT) as \n    \n    storedescription\n    \n , \n    cast(null as integer) as \n    \n    storedisplayimage\n    \n , \n    cast(null as TEXT) as \n    \n    storedisplayname\n    \n , \n    cast(null as integer) as \n    \n    storedisplaythumbnail\n    \n , \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n, \n    cast(null as TEXT) as \n    \n    subtype\n    \n , \n    cast(null as TEXT) as \n    \n    supplylotsizingmethod\n    \n , \n    cast(null as TEXT) as \n    \n    supplyreplenishmentmethod\n    \n , \n    cast(null as integer) as \n    \n    supplytimefence\n    \n , \n    cast(null as TEXT) as \n    \n    supplytype\n    \n , \n    cast(null as float) as \n    \n    totalquantityonhand\n    \n , \n    cast(null as float) as \n    \n    totalvalue\n    \n , \n    cast(null as float) as \n    \n    transferprice\n    \n , \n    cast(null as integer) as \n    \n    unbuildvarianceaccount\n    \n , \n    cast(null as integer) as \n    \n    unitstype\n    \n , \n    cast(null as TEXT) as \n    \n    upccode\n    \n , \n    cast(null as TEXT) as \n    \n    usebins\n    \n , \n    cast(null as TEXT) as \n    \n    usemarginalrates\n    \n , \n    cast(null as TEXT) as \n    \n    vendorname\n    \n , \n    cast(null as integer) as \n    \n    vendreturnvarianceaccount\n    \n , \n    cast(null as TEXT) as \n    \n    vsoedelivered\n    \n , \n    cast(null as TEXT) as \n    \n    vsoepermitdiscount\n    \n , \n    cast(null as TEXT) as \n    \n    vsoesopgroup\n    \n , \n    cast(null as float) as \n    \n    weight\n    \n , \n    cast(null as integer) as \n    \n    weightunit\n    \n , \n    cast(null as TEXT) as \n    \n    weightunits\n    \n , \n    cast(null as integer) as \n    \n    wipacct\n    \n , \n    cast(null as integer) as \n    \n    wipvarianceacct\n    \n , \n    cast(null as TEXT) as \n    \n    yahooproductfeed\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as item_id,\n        fullname as name,\n        itemtype as type_name,\n        description as sales_description,\n        department as department_id,\n        class as class_id,\n        location as location_id,\n        subsidiary as subsidiary_id,\n        assetaccount as asset_account_id,\n        expenseaccount as expense_account_id,\n        gainlossaccount as gain_loss_account_id,\n        incomeaccount as income_account_id,\n        intercoexpenseaccount as interco_expense_account_id,\n        intercoincomeaccount as interco_income_account_id,\n        deferralaccount as deferred_expense_account_id,\n        deferredrevenueaccount as deferred_revenue_account_id,\n        parent as parent_item_id\n\n        --The below macro adds the fields defined within your items_pass_through_columns variable into the staging model\n        \n\n\n\n\n        \n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__items\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:58.764340Z", "completed_at": "2024-04-29T22:47:59.650445Z"}, {"name": "execute", "started_at": "2024-04-29T22:47:59.654924Z", "completed_at": "2024-04-29T22:47:59.654927Z"}], "thread_id": "Thread-5", "execution_time": 1.0070698261260986, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__customers", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__customers_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    entityid\n    \n as \n    \n    entityid\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    isperson\n    \n as \n    \n    isperson\n    \n, \n    \n    \n    companyname\n    \n as \n    \n    companyname\n    \n, \n    \n    \n    firstname\n    \n as \n    \n    firstname\n    \n, \n    \n    \n    lastname\n    \n as \n    \n    lastname\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    defaultbillingaddress\n    \n as \n    \n    defaultbillingaddress\n    \n, \n    \n    \n    defaultshippingaddress\n    \n as \n    \n    defaultshippingaddress\n    \n, \n    \n    \n    receivablesaccount\n    \n as \n    \n    receivablesaccount\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    firstorderdate\n    \n as \n    \n    firstorderdate\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as customer_id,\n        entityid as entity_id,\n        externalid as customer_external_id,\n        parent as parent_id,\n        isperson = 'T' as is_person,\n        companyname as company_name,\n        firstname as first_name,\n        lastname as last_name,\n        email as email_address,\n        phone as phone_number,\n        defaultbillingaddress as default_billing_address_id,\n        defaultshippingaddress as default_shipping_address_id,\n        receivablesaccount as receivables_account_id,\n        currency as currency_id,\n        firstorderdate as date_first_order_at\n\n        --The below macro adds the fields defined within your customers_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__customers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:59.747303Z", "completed_at": "2024-04-29T22:48:00.498451Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:00.500265Z", "completed_at": "2024-04-29T22:48:00.500279Z"}], "thread_id": "Thread-3", "execution_time": 0.8453876972198486, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__transaction_accounting_lines", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transaction_accounting_lines_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account\n    \n as \n    \n    account\n    \n, \n    \n    \n    accountingbook\n    \n as \n    \n    accountingbook\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amountlinked\n    \n as \n    \n    amountlinked\n    \n, \n    \n    \n    amountpaid\n    \n as \n    \n    amountpaid\n    \n, \n    \n    \n    amountunpaid\n    \n as \n    \n    amountunpaid\n    \n, \n    \n    \n    credit\n    \n as \n    \n    credit\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    debit\n    \n as \n    \n    debit\n    \n, \n    \n    \n    exchangerate\n    \n as \n    \n    exchangerate\n    \n, \n    \n    \n    netamount\n    \n as \n    \n    netamount\n    \n, \n    \n    \n    overheadparentitem\n    \n as \n    \n    overheadparentitem\n    \n, \n    \n    \n    paymentamountunused\n    \n as \n    \n    paymentamountunused\n    \n, \n    \n    \n    paymentamountused\n    \n as \n    \n    paymentamountused\n    \n, \n    \n    \n    posting\n    \n as \n    \n    posting\n    \n, \n    \n    \n    transaction\n    \n as \n    \n    transaction\n    \n, \n    \n    \n    transactionline\n    \n as \n    \n    transactionline\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted,\n        _fivetran_synced,\n        transaction as transaction_id,\n        transactionline as transaction_line_id,\n        accountingbook as accounting_book_id,\n        account as account_id,\n        posting = 'T' as is_posting,\n        amount,\n        credit as credit_amount,\n        debit as debit_amount,\n        netamount as net_amount,\n        amountpaid as paid_amount,\n        amountunpaid as unpaid_amount\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transaction_accounting_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:59.656202Z", "completed_at": "2024-04-29T22:48:00.498980Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:00.500735Z", "completed_at": "2024-04-29T22:48:00.500740Z"}], "thread_id": "Thread-6", "execution_time": 0.9333641529083252, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__locations", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__locations_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    mainaddress\n    \n as \n    \n    mainaddress\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as location_id,\n        name,\n        fullname as full_name,\n        mainaddress as main_address_id,\n        parent as parent_id,\n        subsidiary as subsidiary_id\n\n        --The below macro adds the fields defined within your locations_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__locations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:59.739418Z", "completed_at": "2024-04-29T22:48:00.537050Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:00.537858Z", "completed_at": "2024-04-29T22:48:00.537868Z"}], "thread_id": "Thread-8", "execution_time": 0.8621470928192139, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__subsidiaries", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__subsidiaries_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    mainaddress\n    \n as \n    \n    mainaddress\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    fiscalcalendar\n    \n as \n    \n    fiscalcalendar\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as subsidiary_id,\n        name,\n        fullname as full_name,\n        email as email_address,\n        mainaddress as main_address_id,\n        country,\n        state,\n        fiscalcalendar as fiscal_calendar_id,\n        parent as parent_id,\n        currency as currency_id\n\n        --The below macro adds the fields defined within your subsidiaries_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__subsidiaries\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:59.771364Z", "completed_at": "2024-04-29T22:48:00.693379Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:00.695256Z", "completed_at": "2024-04-29T22:48:00.695267Z"}], "thread_id": "Thread-1", "execution_time": 0.9868969917297363, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__vendor_categories", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__vendor_categories_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    istaxagency\n    \n as \n    \n    istaxagency\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as vendor_category_id,\n        name,\n        _fivetran_synced\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__vendor_categories\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:59.775626Z", "completed_at": "2024-04-29T22:48:00.695772Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:00.698464Z", "completed_at": "2024-04-29T22:48:00.698469Z"}], "thread_id": "Thread-7", "execution_time": 1.0035409927368164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__vendors", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__vendors_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accountnumber\n    \n as \n    \n    accountnumber\n    \n, \n    \n    \n    altemail\n    \n as \n    \n    altemail\n    \n, \n    \n    \n    altname\n    \n as \n    \n    altname\n    \n, \n    \n    \n    altphone\n    \n as \n    \n    altphone\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    balanceprimary\n    \n as \n    \n    balanceprimary\n    \n, \n    cast(null as integer) as \n    \n    billingclass\n    \n , \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    comments\n    \n as \n    \n    comments\n    \n, \n    \n    \n    companyname\n    \n as \n    \n    companyname\n    \n, \n    \n    \n    contact\n    \n as \n    \n    contact\n    \n, \n    \n    \n    contactlist\n    \n as \n    \n    contactlist\n    \n, \n    \n    \n    creditlimit\n    \n as \n    \n    creditlimit\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    datecreated\n    \n as \n    \n    datecreated\n    \n, \n    \n    \n    defaultbankaccount\n    \n as \n    \n    defaultbankaccount\n    \n, \n    \n    \n    defaultbillingaddress\n    \n as \n    \n    defaultbillingaddress\n    \n, \n    \n    \n    defaultshippingaddress\n    \n as \n    \n    defaultshippingaddress\n    \n, \n    \n    \n    defaultvendorpaymentaccount\n    \n as \n    \n    defaultvendorpaymentaccount\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    emailpreference\n    \n as \n    \n    emailpreference\n    \n, \n    \n    \n    emailtransactions\n    \n as \n    \n    emailtransactions\n    \n, \n    \n    \n    entityid\n    \n as \n    \n    entityid\n    \n, \n    \n    \n    entitynumber\n    \n as \n    \n    entitynumber\n    \n, \n    \n    \n    entitytitle\n    \n as \n    \n    entitytitle\n    \n, \n    \n    \n    expenseaccount\n    \n as \n    \n    expenseaccount\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    fax\n    \n as \n    \n    fax\n    \n, \n    \n    \n    faxtransactions\n    \n as \n    \n    faxtransactions\n    \n, \n    \n    \n    firstname\n    \n as \n    \n    firstname\n    \n, \n    \n    \n    giveaccess\n    \n as \n    \n    giveaccess\n    \n, \n    \n    \n    homephone\n    \n as \n    \n    homephone\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    incoterm\n    \n as \n    \n    incoterm\n    \n, \n    cast(null as TEXT) as \n    \n    isautogeneratedrepresentingentity\n    \n , \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    isjobresourcevend\n    \n as \n    \n    isjobresourcevend\n    \n, \n    \n    \n    isperson\n    \n as \n    \n    isperson\n    \n, \n    \n    \n    laborcost\n    \n as \n    \n    laborcost\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    lastname\n    \n as \n    \n    lastname\n    \n, \n    \n    \n    legalname\n    \n as \n    \n    legalname\n    \n, \n    \n    \n    middlename\n    \n as \n    \n    middlename\n    \n, \n    \n    \n    mobilephone\n    \n as \n    \n    mobilephone\n    \n, \n    \n    \n    payablesaccount\n    \n as \n    \n    payablesaccount\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    printoncheckas\n    \n as \n    \n    printoncheckas\n    \n, \n    \n    \n    printtransactions\n    \n as \n    \n    printtransactions\n    \n, \n    \n    \n    purchaseorderamount\n    \n as \n    \n    purchaseorderamount\n    \n, \n    \n    \n    purchaseorderquantity\n    \n as \n    \n    purchaseorderquantity\n    \n, \n    \n    \n    purchaseorderquantitydiff\n    \n as \n    \n    purchaseorderquantitydiff\n    \n, \n    \n    \n    receiptamount\n    \n as \n    \n    receiptamount\n    \n, \n    \n    \n    receiptquantity\n    \n as \n    \n    receiptquantity\n    \n, \n    \n    \n    receiptquantitydiff\n    \n as \n    \n    receiptquantitydiff\n    \n, \n    cast(null as integer) as \n    \n    representingsubsidiary\n    \n , \n    \n    \n    rolesforsearch\n    \n as \n    \n    rolesforsearch\n    \n, \n    \n    \n    salutation\n    \n as \n    \n    salutation\n    \n, \n    \n    \n    subsidiaryedition\n    \n as \n    \n    subsidiaryedition\n    \n, \n    \n    \n    terms\n    \n as \n    \n    terms\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    unbilledorders\n    \n as \n    \n    unbilledorders\n    \n, \n    \n    \n    unbilledordersprimary\n    \n as \n    \n    unbilledordersprimary\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n, \n    \n    \n    workcalendar\n    \n as \n    \n    workcalendar\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as vendor_id,\n        companyname as company_name,\n        datecreated as create_date_at,\n        category as vendor_category_id\n\n        --The below macro adds the fields defined within your vendors_pass_through_columns variable into the staging model\n        \n\n\n\n\n        \n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__vendors\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:59.821063Z", "completed_at": "2024-04-29T22:48:00.693741Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:00.696038Z", "completed_at": "2024-04-29T22:48:00.696045Z"}], "thread_id": "Thread-5", "execution_time": 1.0110971927642822, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__accounting_books", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounting_books_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    accounting_book_extid\n    \n , \n    \n    \n    accounting_book_id\n    \n as \n    \n    accounting_book_id\n    \n, \n    cast(null as TEXT) as \n    \n    accounting_book_name\n    \n , \n    cast(null as float) as \n    \n    base_book_id\n    \n , \n    cast(null as timestamp) as \n    \n    date_created\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as float) as \n    \n    effective_period_id\n    \n , \n    cast(null as TEXT) as \n    \n    form_template_component_id\n    \n , \n    cast(null as float) as \n    \n    form_template_id\n    \n , \n    cast(null as TEXT) as \n    \n    is_adjustment_only\n    \n , \n    cast(null as TEXT) as \n    \n    is_arrangement_level_reclass\n    \n , \n    cast(null as TEXT) as \n    \n    is_consolidated\n    \n , \n    cast(null as TEXT) as \n    \n    is_contingent_revenue_handling\n    \n , \n    cast(null as TEXT) as \n    \n    is_include_child_subsidiaries\n    \n , \n    \n    \n    is_primary\n    \n as \n    \n    is_primary\n    \n, \n    cast(null as TEXT) as \n    \n    is_two_step_revenue_allocation\n    \n , \n    cast(null as TEXT) as \n    \n    status\n    \n , \n    cast(null as TEXT) as \n    \n    unbilled_receivable_grouping\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        accounting_book_id,\n        is_primary,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounting_books\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:59.761568Z", "completed_at": "2024-04-29T22:48:00.694955Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:00.697816Z", "completed_at": "2024-04-29T22:48:00.697821Z"}], "thread_id": "Thread-4", "execution_time": 1.0138981342315674, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__transaction_lines", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transaction_lines_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    transaction\n    \n as \n    \n    transaction\n    \n, \n    \n    \n    linesequencenumber\n    \n as \n    \n    linesequencenumber\n    \n, \n    \n    \n    memo\n    \n as \n    \n    memo\n    \n, \n    \n    \n    entity\n    \n as \n    \n    entity\n    \n, \n    \n    \n    item\n    \n as \n    \n    item\n    \n, \n    \n    \n    class\n    \n as \n    \n    class\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n, \n    \n    \n    department\n    \n as \n    \n    department\n    \n, \n    \n    \n    isclosed\n    \n as \n    \n    isclosed\n    \n, \n    \n    \n    isbillable\n    \n as \n    \n    isbillable\n    \n, \n    \n    \n    iscogs\n    \n as \n    \n    iscogs\n    \n, \n    \n    \n    cleared\n    \n as \n    \n    cleared\n    \n, \n    \n    \n    commitmentfirm\n    \n as \n    \n    commitmentfirm\n    \n, \n    \n    \n    mainline\n    \n as \n    \n    mainline\n    \n, \n    \n    \n    taxline\n    \n as \n    \n    taxline\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as transaction_line_id,\n        transaction as transaction_id,\n        linesequencenumber as transaction_line_number,\n        memo,\n        entity as entity_id,\n        item as item_id,\n        class as class_id,\n        location as location_id,\n        subsidiary as subsidiary_id,\n        department as department_id,\n        isclosed = 'T' as is_closed,\n        isbillable = 'T' as is_billable,\n        iscogs = 'T' as is_cogs,\n        cleared = 'T' as is_cleared,\n        commitmentfirm = 'T' as is_commitment_firm,\n        mainline = 'T' as is_main_line,\n        taxline = 'T' as is_tax_line\n\n        --The below macro adds the fields defined within your transaction_lines_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transaction_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:47:59.767059Z", "completed_at": "2024-04-29T22:48:00.694413Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:00.696813Z", "completed_at": "2024-04-29T22:48:00.696817Z"}], "thread_id": "Thread-2", "execution_time": 1.0147759914398193, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__transactions", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transactions_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    transactionnumber\n    \n as \n    \n    transactionnumber\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    memo\n    \n as \n    \n    memo\n    \n, \n    \n    \n    trandate\n    \n as \n    \n    trandate\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    createddate\n    \n as \n    \n    createddate\n    \n, \n    \n    \n    duedate\n    \n as \n    \n    duedate\n    \n, \n    \n    \n    closedate\n    \n as \n    \n    closedate\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    entity\n    \n as \n    \n    entity\n    \n, \n    \n    \n    postingperiod\n    \n as \n    \n    postingperiod\n    \n, \n    \n    \n    posting\n    \n as \n    \n    posting\n    \n, \n    cast(null as TEXT) as \n    \n    intercoadj\n    \n , \n    \n    \n    isreversal\n    \n as \n    \n    isreversal\n    \n, \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        cast(_fivetran_synced as date) as _fivetran_synced_date,\n        id as transaction_id,\n        transactionnumber as transaction_number,\n        type as transaction_type,\n        memo,\n        trandate as transaction_date,\n        status,\n        createddate as created_at,\n        duedate as due_date_at,\n        closedate as closed_at,\n        currency as currency_id,\n        entity as entity_id,\n        postingperiod as accounting_period_id,\n        posting = 'T' as is_posting,\n        intercoadj = 'T' as is_intercompany_adjustment,\n        isreversal = 'T' as is_reversal\n\n        --The below macro adds the fields defined within your transactions_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:00.600397Z", "completed_at": "2024-04-29T22:48:01.354419Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:01.358846Z", "completed_at": "2024-04-29T22:48:01.358857Z"}], "thread_id": "Thread-6", "execution_time": 0.8350458145141602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__accounts", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounts_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    cast(null as TEXT) as \n    \n    accountnumber\n    \n , \n    \n    \n    general_rate_type\n    \n as \n    \n    general_rate_type\n    \n, \n    \n    \n    is_balancesheet\n    \n as \n    \n    is_balancesheet\n    \n, \n    \n    \n    is_leftside\n    \n as \n    \n    is_leftside\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    \n    \n    type_name\n    \n as \n    \n    type_name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        account_id,\n        parent_id,\n        name,\n        type_name,\n        accountnumber as account_number,\n        general_rate_type,\n        is_leftside,\n        is_balancesheet,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your accounts_pass_through_columns variable into the staging model\n        \n\n\n\n\n        \n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:00.589649Z", "completed_at": "2024-04-29T22:48:01.356537Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:01.359588Z", "completed_at": "2024-04-29T22:48:01.359591Z"}], "thread_id": "Thread-3", "execution_time": 0.849510908126831, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__accounting_periods", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounting_periods_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TEXT) as \n    \n    _fivetran_id\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    accounting_period_id\n    \n as \n    \n    accounting_period_id\n    \n, \n    \n    \n    closed\n    \n as \n    \n    closed\n    \n, \n    cast(null as TEXT) as \n    \n    closed_accounts_payable\n    \n , \n    cast(null as TEXT) as \n    \n    closed_accounts_receivable\n    \n , \n    cast(null as TEXT) as \n    \n    closed_all\n    \n , \n    cast(null as timestamp) as \n    \n    closed_on\n    \n , \n    cast(null as TEXT) as \n    \n    closed_payroll\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    \n    \n    ending\n    \n as \n    \n    ending\n    \n, \n    \n    \n    fiscal_calendar_id\n    \n as \n    \n    fiscal_calendar_id\n    \n, \n    cast(null as TEXT) as \n    \n    fivetran_index\n    \n , \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n, \n    \n    \n    is_adjustment\n    \n as \n    \n    is_adjustment\n    \n, \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as TEXT) as \n    \n    locked_accounts_payable\n    \n , \n    cast(null as TEXT) as \n    \n    locked_accounts_receivable\n    \n , \n    cast(null as TEXT) as \n    \n    locked_all\n    \n , \n    cast(null as TEXT) as \n    \n    locked_payroll\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as float) as \n    \n    parent_id\n    \n , \n    \n    \n    quarter\n    \n as \n    \n    quarter\n    \n, \n    \n    \n    starting\n    \n as \n    \n    starting\n    \n, \n    \n    \n    year_0\n    \n as \n    \n    year_0\n    \n, \n    \n    \n    year_id\n    \n as \n    \n    year_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        accounting_period_id,\n        name,\n        full_name,\n        fiscal_calendar_id,\n        year_id,\n        starting as starting_at,\n        ending as ending_at,\n        quarter,\n        year_0,\n        is_adjustment,\n        closed as is_closed,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounting_periods\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:00.609812Z", "completed_at": "2024-04-29T22:48:01.354815Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:01.359202Z", "completed_at": "2024-04-29T22:48:01.359206Z"}], "thread_id": "Thread-8", "execution_time": 0.8283557891845703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__consolidated_exchange_rates", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__consolidated_exchange_rates_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    accounting_book_id\n    \n as \n    \n    accounting_book_id\n    \n, \n    \n    \n    accounting_period_id\n    \n as \n    \n    accounting_period_id\n    \n, \n    cast(null as float) as \n    \n    average_budget_rate\n    \n , \n    \n    \n    average_rate\n    \n as \n    \n    average_rate\n    \n, \n    \n    \n    consolidated_exchange_rate_id\n    \n as \n    \n    consolidated_exchange_rate_id\n    \n, \n    cast(null as float) as \n    \n    current_budget_rate\n    \n , \n    \n    \n    current_rate\n    \n as \n    \n    current_rate\n    \n, \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    \n    \n    from_subsidiary_id\n    \n as \n    \n    from_subsidiary_id\n    \n, \n    cast(null as float) as \n    \n    historical_budget_rate\n    \n , \n    \n    \n    historical_rate\n    \n as \n    \n    historical_rate\n    \n, \n    \n    \n    to_subsidiary_id\n    \n as \n    \n    to_subsidiary_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        consolidated_exchange_rate_id,\n        accounting_book_id,\n        accounting_period_id,\n        average_rate,\n        current_rate,\n        historical_rate,\n        from_subsidiary_id,\n        to_subsidiary_id,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your consolidated_exchange_rates_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__consolidated_exchange_rates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:00.747734Z", "completed_at": "2024-04-29T22:48:01.507115Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:01.508745Z", "completed_at": "2024-04-29T22:48:01.508757Z"}], "thread_id": "Thread-1", "execution_time": 0.847426176071167, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__classes", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__classes_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        class_id,\n        full_name,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your classes_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__classes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:00.765691Z", "completed_at": "2024-04-29T22:48:01.507425Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:01.509864Z", "completed_at": "2024-04-29T22:48:01.509868Z"}], "thread_id": "Thread-7", "execution_time": 0.8309662342071533, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__currencies", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__currencies_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    currency_extid\n    \n , \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as TEXT) as \n    \n    is_inactive\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as float) as \n    \n    precision_0\n    \n , \n    \n    \n    symbol\n    \n as \n    \n    symbol\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        currency_id,\n        name,\n        symbol,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__currencies\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:00.776395Z", "completed_at": "2024-04-29T22:48:01.509340Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:01.511639Z", "completed_at": "2024-04-29T22:48:01.511642Z"}], "thread_id": "Thread-5", "execution_time": 0.8235130310058594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__customers", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__customers_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    cast(null as TEXT) as \n    \n    companyname\n    \n , \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    cast(null as TEXT) as \n    \n    customer_extid\n    \n , \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    date_first_order\n    \n as \n    \n    date_first_order\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    zipcode\n    \n as \n    \n    zipcode\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        customer_id,\n        companyname as company_name,\n        customer_extid as customer_external_id,\n        city,\n        state,\n        zipcode,\n        country,\n        date_first_order as date_first_order_at,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your customers_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__customers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:00.781549Z", "completed_at": "2024-04-29T22:48:01.509059Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:01.511368Z", "completed_at": "2024-04-29T22:48:01.511372Z"}], "thread_id": "Thread-4", "execution_time": 0.8245987892150879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__departments", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__departments_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        department_id,\n        name,\n        full_name,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your departments_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__departments\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:00.786414Z", "completed_at": "2024-04-29T22:48:01.508185Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:01.510867Z", "completed_at": "2024-04-29T22:48:01.510870Z"}], "thread_id": "Thread-2", "execution_time": 0.8249998092651367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__expense_accounts", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__expense_accounts_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    cast(null as TEXT) as \n    \n    comments\n    \n , \n    cast(null as float) as \n    \n    current_balance\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as TEXT) as \n    \n    desription\n    \n , \n    cast(null as TEXT) as \n    \n    expense_account_extid\n    \n , \n    \n    \n    expense_account_id\n    \n as \n    \n    expense_account_id\n    \n, \n    cast(null as TEXT) as \n    \n    full_name\n    \n , \n    cast(null as TEXT) as \n    \n    is_including_child_subs\n    \n , \n    cast(null as TEXT) as \n    \n    is_summary\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as TEXT) as \n    \n    legal_name\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        expense_account_id,\n        name,\n        parent_id,\n        account_number,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__expense_accounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:01.446705Z", "completed_at": "2024-04-29T22:48:02.215403Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.307848Z", "completed_at": "2024-04-29T22:48:02.307860Z"}], "thread_id": "Thread-8", "execution_time": 0.9507617950439453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__locations", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__locations_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        location_id,\n        name,\n        full_name,\n        city,\n        country,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your locations_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__locations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:01.426263Z", "completed_at": "2024-04-29T22:48:02.227190Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.308350Z", "completed_at": "2024-04-29T22:48:02.308358Z"}], "thread_id": "Thread-6", "execution_time": 0.9662380218505859, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__income_accounts", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__income_accounts_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    cast(null as TEXT) as \n    \n    comments\n    \n , \n    cast(null as float) as \n    \n    current_balance\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as TEXT) as \n    \n    desription\n    \n , \n    cast(null as TEXT) as \n    \n    full_name\n    \n , \n    cast(null as TEXT) as \n    \n    income_account_extid\n    \n , \n    \n    \n    income_account_id\n    \n as \n    \n    income_account_id\n    \n, \n    cast(null as TEXT) as \n    \n    is_including_child_subs\n    \n , \n    cast(null as TEXT) as \n    \n    is_summary\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as TEXT) as \n    \n    legal_name\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        income_account_id,\n        name, \n        parent_id,\n        account_number,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__income_accounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:01.440386Z", "completed_at": "2024-04-29T22:48:02.310673Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.311847Z", "completed_at": "2024-04-29T22:48:02.311852Z"}], "thread_id": "Thread-3", "execution_time": 0.972404956817627, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__items", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__items_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    allow_drop_ship\n    \n , \n    cast(null as float) as \n    \n    alt_demand_source_item_id\n    \n , \n    cast(null as float) as \n    \n    asset_account_id\n    \n , \n    cast(null as float) as \n    \n    atp_lead_time\n    \n , \n    cast(null as TEXT) as \n    \n    atp_method\n    \n , \n    cast(null as TEXT) as \n    \n    available_to_partners\n    \n , \n    cast(null as TEXT) as \n    \n    avatax_taxcode\n    \n , \n    cast(null as float) as \n    \n    averagecost\n    \n , \n    cast(null as float) as \n    \n    backward_consumption_days\n    \n , \n    cast(null as TEXT) as \n    \n    build_sub_assemblies\n    \n , \n    cast(null as float) as \n    \n    class_id\n    \n , \n    cast(null as float) as \n    \n    code_of_supply_id\n    \n , \n    cast(null as TEXT) as \n    \n    commodity_code\n    \n , \n    cast(null as float) as \n    \n    consumption_unit_id\n    \n , \n    cast(null as float) as \n    \n    cost_0\n    \n , \n    cast(null as TEXT) as \n    \n    cost_category\n    \n , \n    cast(null as TEXT) as \n    \n    cost_estimate_type\n    \n , \n    cast(null as TEXT) as \n    \n    costing_method\n    \n , \n    cast(null as TEXT) as \n    \n    country_of_manufacture\n    \n , \n    cast(null as TEXT) as \n    \n    create_plan_on_event_type\n    \n , \n    cast(null as timestamp) as \n    \n    created\n    \n , \n    cast(null as float) as \n    \n    current_on_order_count\n    \n , \n    cast(null as float) as \n    \n    custreturn_variance_account_id\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as timestamp) as \n    \n    date_of_last_transaction\n    \n , \n    cast(null as float) as \n    \n    default_return_cost\n    \n , \n    cast(null as float) as \n    \n    deferred_expense_account_id\n    \n , \n    cast(null as float) as \n    \n    deferred_revenue_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    demand_source\n    \n , \n    cast(null as float) as \n    \n    demand_time_fence\n    \n , \n    cast(null as float) as \n    \n    department_id\n    \n , \n    cast(null as TEXT) as \n    \n    deposit\n    \n , \n    cast(null as TEXT) as \n    \n    displayname\n    \n , \n    cast(null as TEXT) as \n    \n    distribution_category\n    \n , \n    cast(null as TEXT) as \n    \n    distribution_network\n    \n , \n    cast(null as float) as \n    \n    dropship_expense_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    effective_bom_control_type\n    \n , \n    cast(null as float) as \n    \n    expense_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    featureddescription\n    \n , \n    cast(null as TEXT) as \n    \n    featureditem\n    \n , \n    cast(null as float) as \n    \n    fixed_lot_size\n    \n , \n    cast(null as float) as \n    \n    forward_consumption_days\n    \n , \n    cast(null as TEXT) as \n    \n    fraud_risk\n    \n , \n    cast(null as TEXT) as \n    \n    full_name\n    \n , \n    cast(null as float) as \n    \n    fx_adjustment_account_id\n    \n , \n    cast(null as float) as \n    \n    gain_loss_account_id\n    \n , \n    cast(null as float) as \n    \n    handling_cost\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat_hazard_class\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat_id\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat_item_units\n    \n , \n    cast(null as float) as \n    \n    hazmat_item_units_qty\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat_packing_group\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat_shipping_name\n    \n , \n    cast(null as TEXT) as \n    \n    include_child_subsidiaries\n    \n , \n    cast(null as float) as \n    \n    income_account_id\n    \n , \n    cast(null as float) as \n    \n    interco_expense_account_id\n    \n , \n    cast(null as float) as \n    \n    interco_income_account_id\n    \n , \n    cast(null as float) as \n    \n    invt_count_classification\n    \n , \n    cast(null as float) as \n    \n    invt_count_interval\n    \n , \n    cast(null as TEXT) as \n    \n    is_cont_rev_handling\n    \n , \n    cast(null as TEXT) as \n    \n    is_enforce_min_qty_internally\n    \n , \n    cast(null as TEXT) as \n    \n    is_hold_rev_rec\n    \n , \n    cast(null as TEXT) as \n    \n    is_moss\n    \n , \n    cast(null as TEXT) as \n    \n    is_phantom\n    \n , \n    cast(null as TEXT) as \n    \n    is_special_order_item\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as TEXT) as \n    \n    isonline\n    \n , \n    cast(null as TEXT) as \n    \n    istaxable\n    \n , \n    cast(null as float) as \n    \n    item_defined_cost\n    \n , \n    cast(null as TEXT) as \n    \n    item_extid\n    \n , \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    cast(null as float) as \n    \n    item_image\n    \n , \n    cast(null as TEXT) as \n    \n    item_revenue_category\n    \n , \n    cast(null as float) as \n    \n    item_term_id\n    \n , \n    cast(null as timestamp) as \n    \n    last_cogs_correction\n    \n , \n    cast(null as timestamp) as \n    \n    last_invt_count_date\n    \n , \n    cast(null as float) as \n    \n    last_purchase_price\n    \n , \n    cast(null as float) as \n    \n    location_id\n    \n , \n    cast(null as TEXT) as \n    \n    lot_numbered_item\n    \n , \n    cast(null as TEXT) as \n    \n    lot_sizing_method\n    \n , \n    cast(null as TEXT) as \n    \n    manufacturer\n    \n , \n    cast(null as TEXT) as \n    \n    manufacturing_charge_item\n    \n , \n    cast(null as TEXT) as \n    \n    match_bill_to_receipt\n    \n , \n    cast(null as TEXT) as \n    \n    matrix_type\n    \n , \n    cast(null as float) as \n    \n    maximum_quantity\n    \n , \n    cast(null as float) as \n    \n    minimum_quantity\n    \n , \n    cast(null as timestamp) as \n    \n    modified\n    \n , \n    cast(null as TEXT) as \n    \n    mpn\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as float) as \n    \n    nature_of_transaction_codes_id\n    \n , \n    cast(null as timestamp) as \n    \n    next_invt_count_date\n    \n , \n    cast(null as float) as \n    \n    ng_asset_type_id\n    \n , \n    cast(null as float) as \n    \n    ns_lead_time\n    \n , \n    cast(null as TEXT) as \n    \n    offersupport\n    \n , \n    cast(null as TEXT) as \n    \n    onspecial\n    \n , \n    cast(null as TEXT) as \n    \n    overhead_type\n    \n , \n    cast(null as float) as \n    \n    parent_id\n    \n , \n    cast(null as float) as \n    \n    payment_method_id\n    \n , \n    cast(null as float) as \n    \n    periodic_lot_size_days\n    \n , \n    cast(null as TEXT) as \n    \n    periodic_lot_size_type\n    \n , \n    cast(null as float) as \n    \n    pref_purchase_tax_id\n    \n , \n    cast(null as float) as \n    \n    pref_sale_tax_id\n    \n , \n    cast(null as float) as \n    \n    pref_stock_level\n    \n , \n    cast(null as TEXT) as \n    \n    prices_include_tax\n    \n , \n    cast(null as float) as \n    \n    pricing_group_id\n    \n , \n    cast(null as TEXT) as \n    \n    print_sub_items\n    \n , \n    cast(null as float) as \n    \n    prod_price_var_account_id\n    \n , \n    cast(null as float) as \n    \n    prod_qty_var_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    prompt_payment_discount_item\n    \n , \n    cast(null as float) as \n    \n    purchase_price_var_account_id\n    \n , \n    cast(null as float) as \n    \n    purchase_unit_id\n    \n , \n    cast(null as TEXT) as \n    \n    purchasedescription\n    \n , \n    cast(null as float) as \n    \n    purchaseorderamount\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantity\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantitydiff\n    \n , \n    cast(null as float) as \n    \n    quantityavailable\n    \n , \n    cast(null as float) as \n    \n    quantitybackordered\n    \n , \n    cast(null as float) as \n    \n    quantityonhand\n    \n , \n    cast(null as float) as \n    \n    receiptamount\n    \n , \n    cast(null as float) as \n    \n    receiptquantity\n    \n , \n    cast(null as float) as \n    \n    receiptquantitydiff\n    \n , \n    cast(null as float) as \n    \n    reorder_multiple\n    \n , \n    cast(null as float) as \n    \n    reorderpoint\n    \n , \n    cast(null as TEXT) as \n    \n    replenishment_method\n    \n , \n    cast(null as TEXT) as \n    \n    resalable\n    \n , \n    cast(null as float) as \n    \n    reschedule_in_days\n    \n , \n    cast(null as float) as \n    \n    reschedule_out_days\n    \n , \n    cast(null as float) as \n    \n    rev_rec_forecast_rule_id\n    \n , \n    cast(null as float) as \n    \n    rev_rec_rule_id\n    \n , \n    cast(null as TEXT) as \n    \n    revenue_allocation_group\n    \n , \n    cast(null as TEXT) as \n    \n    round_up_as_component\n    \n , \n    cast(null as float) as \n    \n    safety_stock_days\n    \n , \n    cast(null as float) as \n    \n    safety_stock_level\n    \n , \n    cast(null as float) as \n    \n    sale_unit_id\n    \n , \n    cast(null as TEXT) as \n    \n    salesdescription\n    \n , \n    cast(null as TEXT) as \n    \n    salesforce_id\n    \n , \n    cast(null as TEXT) as \n    \n    salesprice\n    \n , \n    cast(null as float) as \n    \n    scrap_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    serialized_item\n    \n , \n    cast(null as float) as \n    \n    shippingcost\n    \n , \n    cast(null as TEXT) as \n    \n    special_work_order_item\n    \n , \n    cast(null as TEXT) as \n    \n    specialsdescription\n    \n , \n    cast(null as float) as \n    \n    stock_unit_id\n    \n , \n    cast(null as TEXT) as \n    \n    storedescription\n    \n , \n    cast(null as TEXT) as \n    \n    storedetaileddescription\n    \n , \n    cast(null as TEXT) as \n    \n    storedisplayname\n    \n , \n    cast(null as TEXT) as \n    \n    subtype\n    \n , \n    cast(null as TEXT) as \n    \n    supplementary_unit__abberviat\n    \n , \n    cast(null as float) as \n    \n    supplementary_unit_id\n    \n , \n    cast(null as float) as \n    \n    supply_time_fence\n    \n , \n    cast(null as TEXT) as \n    \n    supply_type\n    \n , \n    cast(null as float) as \n    \n    tax_item_id\n    \n , \n    cast(null as float) as \n    \n    totalvalue\n    \n , \n    cast(null as float) as \n    \n    transferprice\n    \n , \n    \n    \n    type_name\n    \n as \n    \n    type_name\n    \n, \n    cast(null as float) as \n    \n    type_of_goods_id\n    \n , \n    cast(null as TEXT) as \n    \n    udf1\n    \n , \n    cast(null as TEXT) as \n    \n    udf2\n    \n , \n    cast(null as TEXT) as \n    \n    un_number\n    \n , \n    cast(null as float) as \n    \n    unbuild_variance_account_id\n    \n , \n    cast(null as float) as \n    \n    units_type_id\n    \n , \n    cast(null as TEXT) as \n    \n    upc_code\n    \n , \n    cast(null as TEXT) as \n    \n    use_component_yield\n    \n , \n    cast(null as float) as \n    \n    vendor_id\n    \n , \n    cast(null as TEXT) as \n    \n    vendorname\n    \n , \n    cast(null as float) as \n    \n    vendreturn_variance_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    vsoe_deferral\n    \n , \n    cast(null as TEXT) as \n    \n    vsoe_delivered\n    \n , \n    cast(null as TEXT) as \n    \n    vsoe_discount\n    \n , \n    cast(null as float) as \n    \n    vsoe_price\n    \n , \n    cast(null as float) as \n    \n    weight\n    \n , \n    cast(null as float) as \n    \n    weight_in_user_defined_unit\n    \n , \n    cast(null as float) as \n    \n    weight_unit_index\n    \n , \n    cast(null as float) as \n    \n    wip_account_id\n    \n , \n    cast(null as float) as \n    \n    wip_cost_variance_account_id\n    \n , \n    cast(null as float) as \n    \n    work_order_lead_time\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        item_id,\n        name,\n        type_name,\n        salesdescription as sales_description,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your items_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__items\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.405470Z", "completed_at": "2024-04-29T22:48:02.435067Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.507206Z", "completed_at": "2024-04-29T22:48:02.507217Z"}], "thread_id": "Thread-6", "execution_time": 0.11638498306274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounting_periods_accounting_period_id.a9d8f4c6e1", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    accounting_period_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_periods\"\nwhere accounting_period_id is not null\ngroup by accounting_period_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.412735Z", "completed_at": "2024-04-29T22:48:02.453103Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.507934Z", "completed_at": "2024-04-29T22:48:02.507938Z"}], "thread_id": "Thread-3", "execution_time": 0.09847092628479004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__account_types_account_type_id.20889967ef", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_type_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__account_types\"\nwhere account_type_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.393744Z", "completed_at": "2024-04-29T22:48:02.453617Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.508250Z", "completed_at": "2024-04-29T22:48:02.508254Z"}], "thread_id": "Thread-8", "execution_time": 0.11908888816833496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounting_periods_accounting_period_id.f2db2c547c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect accounting_period_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_periods\"\nwhere accounting_period_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.520643Z", "completed_at": "2024-04-29T22:48:02.527032Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.527647Z", "completed_at": "2024-04-29T22:48:02.527653Z"}], "thread_id": "Thread-3", "execution_time": 0.013552188873291016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounting_books_accounting_book_id.1b7504d30e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect accounting_book_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_books\"\nwhere accounting_book_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.517382Z", "completed_at": "2024-04-29T22:48:02.527904Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.529854Z", "completed_at": "2024-04-29T22:48:02.529857Z"}], "thread_id": "Thread-6", "execution_time": 0.01656818389892578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__account_types_account_type_id.aaea9bec0f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_type_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__account_types\"\nwhere account_type_id is not null\ngroup by account_type_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.523637Z", "completed_at": "2024-04-29T22:48:02.528204Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.530125Z", "completed_at": "2024-04-29T22:48:02.530128Z"}], "thread_id": "Thread-8", "execution_time": 0.016034841537475586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounting_books_accounting_book_id.70d96d1230", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    accounting_book_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_books\"\nwhere accounting_book_id is not null\ngroup by accounting_book_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.540516Z", "completed_at": "2024-04-29T22:48:02.549257Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.549761Z", "completed_at": "2024-04-29T22:48:02.549766Z"}], "thread_id": "Thread-8", "execution_time": 0.013634681701660156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.09703507c6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect consolidated_exchange_rate_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__consolidated_exchange_rates\"\nwhere consolidated_exchange_rate_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.537443Z", "completed_at": "2024-04-29T22:48:02.550525Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.552238Z", "completed_at": "2024-04-29T22:48:02.552242Z"}], "thread_id": "Thread-6", "execution_time": 0.01699209213256836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounts_account_id.5a542e47a2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounts\"\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.545421Z", "completed_at": "2024-04-29T22:48:02.551981Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.556799Z", "completed_at": "2024-04-29T22:48:02.556804Z"}], "thread_id": "Thread-3", "execution_time": 0.012951135635375977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounts_account_id.23a63b3e17", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounts\"\nwhere account_id is not null\ngroup by account_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.553574Z", "completed_at": "2024-04-29T22:48:02.558900Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.563537Z", "completed_at": "2024-04-29T22:48:02.563542Z"}], "thread_id": "Thread-8", "execution_time": 0.015393972396850586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.2d4725bb7a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    consolidated_exchange_rate_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__consolidated_exchange_rates\"\nwhere consolidated_exchange_rate_id is not null\ngroup by consolidated_exchange_rate_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.563836Z", "completed_at": "2024-04-29T22:48:02.572257Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.573633Z", "completed_at": "2024-04-29T22:48:02.573638Z"}], "thread_id": "Thread-3", "execution_time": 0.01543116569519043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.ec8750b679", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect _fivetran_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_period_fiscal_cal\"\nwhere _fivetran_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.568562Z", "completed_at": "2024-04-29T22:48:02.574137Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.580284Z", "completed_at": "2024-04-29T22:48:02.580290Z"}], "thread_id": "Thread-8", "execution_time": 0.013635873794555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.d2038de348", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    _fivetran_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_period_fiscal_cal\"\nwhere _fivetran_id is not null\ngroup by _fivetran_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:01.623376Z", "completed_at": "2024-04-29T22:48:02.499822Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.511222Z", "completed_at": "2024-04-29T22:48:02.511227Z"}], "thread_id": "Thread-4", "execution_time": 0.9660069942474365, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__vendor_types", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__vendor_types_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as float) as \n    \n    parent_id\n    \n , \n    cast(null as TEXT) as \n    \n    vendor_type_extid\n    \n , \n    \n    \n    vendor_type_id\n    \n as \n    \n    vendor_type_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        vendor_type_id,\n        name,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__vendor_types\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:01.603250Z", "completed_at": "2024-04-29T22:48:02.506879Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.511963Z", "completed_at": "2024-04-29T22:48:02.511966Z"}], "thread_id": "Thread-1", "execution_time": 0.9904520511627197, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__subsidiaries", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__subsidiaries_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    address\n    \n , \n    cast(null as TEXT) as \n    \n    address1\n    \n , \n    cast(null as TEXT) as \n    \n    address2\n    \n , \n    cast(null as float) as \n    \n    base_currency_id\n    \n , \n    cast(null as TEXT) as \n    \n    branch_id\n    \n , \n    cast(null as TEXT) as \n    \n    brn\n    \n , \n    cast(null as TEXT) as \n    \n    city\n    \n , \n    cast(null as TEXT) as \n    \n    country\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as TEXT) as \n    \n    edition\n    \n , \n    cast(null as TEXT) as \n    \n    federal_number\n    \n , \n    \n    \n    fiscal_calendar_id\n    \n as \n    \n    fiscal_calendar_id\n    \n, \n    cast(null as TEXT) as \n    \n    full_name\n    \n , \n    cast(null as TEXT) as \n    \n    is_elimination\n    \n , \n    cast(null as TEXT) as \n    \n    is_moss\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive_bool\n    \n , \n    cast(null as TEXT) as \n    \n    legal_name\n    \n , \n    cast(null as float) as \n    \n    moss_nexus_id\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    cast(null as float) as \n    \n    purchaseorderamount\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantity\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantitydiff\n    \n , \n    cast(null as float) as \n    \n    receiptamount\n    \n , \n    cast(null as float) as \n    \n    receiptquantity\n    \n , \n    cast(null as float) as \n    \n    receiptquantitydiff\n    \n , \n    cast(null as TEXT) as \n    \n    return_address\n    \n , \n    cast(null as TEXT) as \n    \n    return_address1\n    \n , \n    cast(null as TEXT) as \n    \n    return_address2\n    \n , \n    cast(null as TEXT) as \n    \n    return_city\n    \n , \n    cast(null as TEXT) as \n    \n    return_country\n    \n , \n    cast(null as TEXT) as \n    \n    return_state\n    \n , \n    cast(null as TEXT) as \n    \n    return_zipcode\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address1\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address2\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_city\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_country\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_state\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_zipcode\n    \n , \n    cast(null as TEXT) as \n    \n    state\n    \n , \n    cast(null as TEXT) as \n    \n    state_tax_number\n    \n , \n    cast(null as float) as \n    \n    subnav__searchable_subsidiary\n    \n , \n    cast(null as TEXT) as \n    \n    subsidiary_extid\n    \n , \n    \n    \n    subsidiary_id\n    \n as \n    \n    subsidiary_id\n    \n, \n    cast(null as float) as \n    \n    taxonomy_reference_id\n    \n , \n    cast(null as TEXT) as \n    \n    tran_num_prefix\n    \n , \n    cast(null as TEXT) as \n    \n    uen\n    \n , \n    cast(null as TEXT) as \n    \n    url\n    \n , \n    cast(null as TEXT) as \n    \n    zipcode\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        subsidiary_id,\n        fiscal_calendar_id,\n        full_name,\n        name,\n        parent_id,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your subsidiaries_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__subsidiaries\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:01.617787Z", "completed_at": "2024-04-29T22:48:02.508850Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.513987Z", "completed_at": "2024-04-29T22:48:02.513992Z"}], "thread_id": "Thread-5", "execution_time": 0.9869260787963867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__transaction_lines", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__transaction_lines_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    company_id\n    \n as \n    \n    company_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    memo\n    \n as \n    \n    memo\n    \n, \n    \n    \n    non_posting_line\n    \n as \n    \n    non_posting_line\n    \n, \n    \n    \n    subsidiary_id\n    \n as \n    \n    subsidiary_id\n    \n, \n    \n    \n    transaction_id\n    \n as \n    \n    transaction_id\n    \n, \n    \n    \n    transaction_line_id\n    \n as \n    \n    transaction_line_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        transaction_id,\n        transaction_line_id,\n        subsidiary_id,\n        account_id,\n        company_id,\n        item_id,\n        amount,\n        non_posting_line,\n        class_id,\n        location_id,\n        department_id,\n        memo\n\n        --The below macro adds the fields defined within your transaction_lines_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__transaction_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:01.610216Z", "completed_at": "2024-04-29T22:48:02.507620Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.512489Z", "completed_at": "2024-04-29T22:48:02.512492Z"}], "thread_id": "Thread-7", "execution_time": 0.990800142288208, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__transactions", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__transactions_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    accounting_period_id\n    \n as \n    \n    accounting_period_id\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    is_advanced_intercompany\n    \n as \n    \n    is_advanced_intercompany\n    \n, \n    \n    \n    is_intercompany\n    \n as \n    \n    is_intercompany\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    cast(null as timestamp) as \n    \n    trandate\n    \n , \n    \n    \n    transaction_id\n    \n as \n    \n    transaction_id\n    \n, \n    \n    \n    transaction_type\n    \n as \n    \n    transaction_type\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        transaction_id,\n        status,\n        trandate as transaction_date,\n        currency_id,\n        accounting_period_id,\n        due_date as due_date_at,\n        transaction_type,\n        is_intercompany,\n        is_advanced_intercompany,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your transactions_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:01.628595Z", "completed_at": "2024-04-29T22:48:02.511481Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.515932Z", "completed_at": "2024-04-29T22:48:02.515935Z"}], "thread_id": "Thread-2", "execution_time": 0.9736011028289795, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__vendors", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__vendors_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    account_owner\n    \n , \n    cast(null as TEXT) as \n    \n    accountnumber\n    \n , \n    cast(null as TEXT) as \n    \n    accounts_email\n    \n , \n    cast(null as float) as \n    \n    annual_revenue\n    \n , \n    cast(null as TEXT) as \n    \n    auto_renewals\n    \n , \n    cast(null as TEXT) as \n    \n    auto_send_statements\n    \n , \n    cast(null as TEXT) as \n    \n    billaddress\n    \n , \n    cast(null as float) as \n    \n    billing_class_id\n    \n , \n    cast(null as TEXT) as \n    \n    city\n    \n , \n    cast(null as TEXT) as \n    \n    comments\n    \n , \n    cast(null as TEXT) as \n    \n    companyname\n    \n , \n    cast(null as TEXT) as \n    \n    country\n    \n , \n    \n    \n    create_date\n    \n as \n    \n    create_date\n    \n, \n    cast(null as float) as \n    \n    creditlimit\n    \n , \n    cast(null as float) as \n    \n    currency_id\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as TEXT) as \n    \n    dic\n    \n , \n    cast(null as TEXT) as \n    \n    email\n    \n , \n    cast(null as TEXT) as \n    \n    email_bill_payment_vouchers\n    \n , \n    cast(null as TEXT) as \n    \n    email_cash_sales\n    \n , \n    cast(null as TEXT) as \n    \n    email_credit_notes\n    \n , \n    cast(null as TEXT) as \n    \n    email_invoices\n    \n , \n    cast(null as TEXT) as \n    \n    email_item_fulfilments\n    \n , \n    cast(null as TEXT) as \n    \n    email_purchase_orders\n    \n , \n    cast(null as TEXT) as \n    \n    email_quotes\n    \n , \n    cast(null as TEXT) as \n    \n    email_sales_orders\n    \n , \n    cast(null as TEXT) as \n    \n    email_statements\n    \n , \n    cast(null as TEXT) as \n    \n    employee_number\n    \n , \n    cast(null as TEXT) as \n    \n    exemption_certificate_no\n    \n , \n    cast(null as float) as \n    \n    expense_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    fax\n    \n , \n    cast(null as TEXT) as \n    \n    full_name\n    \n , \n    cast(null as TEXT) as \n    \n    home_phone\n    \n , \n    cast(null as TEXT) as \n    \n    hris_id\n    \n , \n    cast(null as TEXT) as \n    \n    ico\n    \n , \n    cast(null as TEXT) as \n    \n    id_number_in_the_country_of_r\n    \n , \n    cast(null as float) as \n    \n    id_type_in_the_country_of_r_id\n    \n , \n    cast(null as float) as \n    \n    in_transit_balance\n    \n , \n    cast(null as TEXT) as \n    \n    incoterm\n    \n , \n    cast(null as float) as \n    \n    industry_id\n    \n , \n    cast(null as TEXT) as \n    \n    invoice_via_procurement_syste\n    \n , \n    cast(null as TEXT) as \n    \n    invoicing_details\n    \n , \n    cast(null as TEXT) as \n    \n    is1099eligible\n    \n , \n    cast(null as TEXT) as \n    \n    is_partner\n    \n , \n    cast(null as TEXT) as \n    \n    is_person\n    \n , \n    cast(null as TEXT) as \n    \n    isemailhtml\n    \n , \n    cast(null as TEXT) as \n    \n    isemailpdf\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as float) as \n    \n    labor_cost\n    \n , \n    cast(null as timestamp) as \n    \n    last_modified_date\n    \n , \n    cast(null as timestamp) as \n    \n    last_sales_activity\n    \n , \n    cast(null as TEXT) as \n    \n    line1\n    \n , \n    cast(null as TEXT) as \n    \n    line2\n    \n , \n    cast(null as TEXT) as \n    \n    line3\n    \n , \n    cast(null as TEXT) as \n    \n    loginaccess\n    \n , \n    cast(null as TEXT) as \n    \n    lsa_link\n    \n , \n    cast(null as TEXT) as \n    \n    lsa_link_name\n    \n , \n    cast(null as TEXT) as \n    \n    mobile_phone\n    \n , \n    cast(null as timestamp) as \n    \n    msa_effective_date\n    \n , \n    cast(null as TEXT) as \n    \n    name\n    \n , \n    cast(null as float) as \n    \n    no__of_employees\n    \n , \n    cast(null as float) as \n    \n    openbalance\n    \n , \n    cast(null as float) as \n    \n    openbalance_foreign\n    \n , \n    cast(null as float) as \n    \n    payables_account_id\n    \n , \n    cast(null as float) as \n    \n    payment_terms_id\n    \n , \n    cast(null as TEXT) as \n    \n    phone\n    \n , \n    cast(null as float) as \n    \n    prepayment_balance\n    \n , \n    cast(null as TEXT) as \n    \n    printoncheckas\n    \n , \n    cast(null as float) as \n    \n    purchaseorderamount\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantity\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantitydiff\n    \n , \n    cast(null as TEXT) as \n    \n    purchases_email\n    \n , \n    cast(null as float) as \n    \n    receiptamount\n    \n , \n    cast(null as float) as \n    \n    receiptquantity\n    \n , \n    cast(null as float) as \n    \n    receiptquantitydiff\n    \n , \n    cast(null as float) as \n    \n    represents_subsidiary_id\n    \n , \n    cast(null as TEXT) as \n    \n    restrict_access_to_expensify\n    \n , \n    cast(null as TEXT) as \n    \n    salesforce_id\n    \n , \n    cast(null as TEXT) as \n    \n    shipaddress\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_email\n    \n , \n    cast(null as TEXT) as \n    \n    state\n    \n , \n    cast(null as float) as \n    \n    subsidiary\n    \n , \n    cast(null as TEXT) as \n    \n    tax_contact_first_name\n    \n , \n    cast(null as float) as \n    \n    tax_contact_id\n    \n , \n    cast(null as TEXT) as \n    \n    tax_contact_last_name\n    \n , \n    cast(null as TEXT) as \n    \n    tax_contact_middle_name\n    \n , \n    cast(null as TEXT) as \n    \n    tax_number\n    \n , \n    cast(null as TEXT) as \n    \n    taxidnum\n    \n , \n    cast(null as float) as \n    \n    time_approver_id\n    \n , \n    cast(null as TEXT) as \n    \n    transactions_need_approval\n    \n , \n    cast(null as TEXT) as \n    \n    uen\n    \n , \n    cast(null as float) as \n    \n    unbilled_orders\n    \n , \n    cast(null as float) as \n    \n    unbilled_orders_foreign\n    \n , \n    cast(null as TEXT) as \n    \n    url\n    \n , \n    cast(null as TEXT) as \n    \n    vat_registration_no\n    \n , \n    cast(null as TEXT) as \n    \n    vendor_extid\n    \n , \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n, \n    \n    \n    vendor_type_id\n    \n as \n    \n    vendor_type_id\n    \n, \n    cast(null as TEXT) as \n    \n    zipcode\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        vendor_id,\n        companyname as company_name,\n        create_date as create_date_at,\n        vendor_type_id,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your vendors_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__vendors\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.574908Z", "completed_at": "2024-04-29T22:48:02.582403Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.590569Z", "completed_at": "2024-04-29T22:48:02.590573Z"}], "thread_id": "Thread-6", "execution_time": 0.019944190979003906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.76e6e71411", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect _fivetran_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_book_subsidiaries\"\nwhere _fivetran_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.584133Z", "completed_at": "2024-04-29T22:48:02.591991Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.602048Z", "completed_at": "2024-04-29T22:48:02.602053Z"}], "thread_id": "Thread-3", "execution_time": 0.029893875122070312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.27ddb08396", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    _fivetran_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_book_subsidiaries\"\nwhere _fivetran_id is not null\ngroup by _fivetran_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.596707Z", "completed_at": "2024-04-29T22:48:02.602534Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.618684Z", "completed_at": "2024-04-29T22:48:02.618690Z"}], "thread_id": "Thread-4", "execution_time": 0.03599715232849121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__classes_class_id.d069e30c98", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    class_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__classes\"\nwhere class_id is not null\ngroup by class_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.593501Z", "completed_at": "2024-04-29T22:48:02.602790Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.618972Z", "completed_at": "2024-04-29T22:48:02.618976Z"}], "thread_id": "Thread-8", "execution_time": 0.03707480430603027, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__classes_class_id.799b01ffba", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect class_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__classes\"\nwhere class_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.603634Z", "completed_at": "2024-04-29T22:48:02.618166Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.625415Z", "completed_at": "2024-04-29T22:48:02.625419Z"}], "thread_id": "Thread-1", "execution_time": 0.031138896942138672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__currencies_currency_id.7eff9f9c1c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__currencies\"\nwhere currency_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.606681Z", "completed_at": "2024-04-29T22:48:02.618437Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.625680Z", "completed_at": "2024-04-29T22:48:02.625684Z"}], "thread_id": "Thread-5", "execution_time": 0.03131604194641113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__currencies_currency_id.50d9c37c78", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    currency_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__currencies\"\nwhere currency_id is not null\ngroup by currency_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.610869Z", "completed_at": "2024-04-29T22:48:02.619255Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.627038Z", "completed_at": "2024-04-29T22:48:02.627041Z"}], "thread_id": "Thread-7", "execution_time": 0.03276491165161133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__entities_entity_id.f22c18cfa2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect entity_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__entities\"\nwhere entity_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.614147Z", "completed_at": "2024-04-29T22:48:02.623630Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.631489Z", "completed_at": "2024-04-29T22:48:02.631497Z"}], "thread_id": "Thread-2", "execution_time": 0.03355693817138672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__entities_entity_id.f9acd04f50", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    entity_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__entities\"\nwhere entity_id is not null\ngroup by entity_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.619558Z", "completed_at": "2024-04-29T22:48:02.626483Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.634922Z", "completed_at": "2024-04-29T22:48:02.634925Z"}], "thread_id": "Thread-6", "execution_time": 0.03808307647705078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__jobs_job_id.d7b5b06b33", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect job_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__jobs\"\nwhere job_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.627293Z", "completed_at": "2024-04-29T22:48:02.635459Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.646588Z", "completed_at": "2024-04-29T22:48:02.646593Z"}], "thread_id": "Thread-3", "execution_time": 0.031992197036743164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__jobs_job_id.c294ea849c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    job_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__jobs\"\nwhere job_id is not null\ngroup by job_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.636958Z", "completed_at": "2024-04-29T22:48:02.653325Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.663493Z", "completed_at": "2024-04-29T22:48:02.663498Z"}], "thread_id": "Thread-4", "execution_time": 0.037322998046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__departments_department_id.7395bbfe71", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect department_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__departments\"\nwhere department_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.641690Z", "completed_at": "2024-04-29T22:48:02.653591Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.663800Z", "completed_at": "2024-04-29T22:48:02.663804Z"}], "thread_id": "Thread-8", "execution_time": 0.037069082260131836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__departments_department_id.13e4897f0b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    department_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__departments\"\nwhere department_id is not null\ngroup by department_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.650586Z", "completed_at": "2024-04-29T22:48:02.662597Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.670515Z", "completed_at": "2024-04-29T22:48:02.670519Z"}], "thread_id": "Thread-5", "execution_time": 0.03658294677734375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__customers_customer_id.65a5ae302a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__customers\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.654997Z", "completed_at": "2024-04-29T22:48:02.664121Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.672119Z", "completed_at": "2024-04-29T22:48:02.672122Z"}], "thread_id": "Thread-7", "execution_time": 0.036772966384887695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__items_item_id.e216b5b06a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__items\"\nwhere item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.658558Z", "completed_at": "2024-04-29T22:48:02.668364Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.673217Z", "completed_at": "2024-04-29T22:48:02.673221Z"}], "thread_id": "Thread-2", "execution_time": 0.0369260311126709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__customers_customer_id.05ca0360f2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.665199Z", "completed_at": "2024-04-29T22:48:02.671866Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.683633Z", "completed_at": "2024-04-29T22:48:02.683637Z"}], "thread_id": "Thread-6", "execution_time": 0.04237103462219238, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__items_item_id.3fcafd9eee", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    item_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__items\"\nwhere item_id is not null\ngroup by item_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.673474Z", "completed_at": "2024-04-29T22:48:02.687403Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.699609Z", "completed_at": "2024-04-29T22:48:02.699619Z"}], "thread_id": "Thread-3", "execution_time": 0.03890490531921387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_accounting_lines_transaction_id__transaction_line_id__accounting_book_id.ac47a8ecc1", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, transaction_line_id, accounting_book_id\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transaction_accounting_lines\"\n    group by transaction_id, transaction_line_id, accounting_book_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.684324Z", "completed_at": "2024-04-29T22:48:02.698555Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.711607Z", "completed_at": "2024-04-29T22:48:02.711612Z"}], "thread_id": "Thread-1", "execution_time": 0.04141998291015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_id.f28afbfa25", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transaction_accounting_lines\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.688364Z", "completed_at": "2024-04-29T22:48:02.703640Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.713328Z", "completed_at": "2024-04-29T22:48:02.713331Z"}], "thread_id": "Thread-4", "execution_time": 0.03851175308227539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_line_id.0f72869807", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transaction_accounting_lines\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.699963Z", "completed_at": "2024-04-29T22:48:02.712138Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.719731Z", "completed_at": "2024-04-29T22:48:02.719735Z"}], "thread_id": "Thread-5", "execution_time": 0.034374237060546875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__locations_location_id.c335a5985e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__locations\"\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.704556Z", "completed_at": "2024-04-29T22:48:02.713035Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.720519Z", "completed_at": "2024-04-29T22:48:02.720526Z"}], "thread_id": "Thread-7", "execution_time": 0.0330049991607666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__locations_location_id.f1469a5149", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    location_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__locations\"\nwhere location_id is not null\ngroup by location_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.708417Z", "completed_at": "2024-04-29T22:48:02.718546Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.730468Z", "completed_at": "2024-04-29T22:48:02.730478Z"}], "thread_id": "Thread-2", "execution_time": 0.03477883338928223, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__subsidiaries_subsidiary_id.0ab6516626", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subsidiary_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__subsidiaries\"\nwhere subsidiary_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.714110Z", "completed_at": "2024-04-29T22:48:02.720779Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.732275Z", "completed_at": "2024-04-29T22:48:02.732280Z"}], "thread_id": "Thread-6", "execution_time": 0.03380084037780762, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__subsidiaries_subsidiary_id.8edc974229", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    subsidiary_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__subsidiaries\"\nwhere subsidiary_id is not null\ngroup by subsidiary_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.726834Z", "completed_at": "2024-04-29T22:48:02.733343Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.743701Z", "completed_at": "2024-04-29T22:48:02.743706Z"}], "thread_id": "Thread-8", "execution_time": 0.03351998329162598, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__vendor_categories_vendor_category_id.874da088c6", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    vendor_category_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__vendor_categories\"\nwhere vendor_category_id is not null\ngroup by vendor_category_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.722376Z", "completed_at": "2024-04-29T22:48:02.736781Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.744004Z", "completed_at": "2024-04-29T22:48:02.744008Z"}], "thread_id": "Thread-3", "execution_time": 0.034516096115112305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__vendor_categories_vendor_category_id.60acd9acb2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_category_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__vendor_categories\"\nwhere vendor_category_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.733605Z", "completed_at": "2024-04-29T22:48:02.743340Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.758789Z", "completed_at": "2024-04-29T22:48:02.758795Z"}], "thread_id": "Thread-1", "execution_time": 0.04267311096191406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__vendors_vendor_id.777b758daf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__vendors\"\nwhere vendor_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.738577Z", "completed_at": "2024-04-29T22:48:02.750556Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.763583Z", "completed_at": "2024-04-29T22:48:02.763587Z"}], "thread_id": "Thread-4", "execution_time": 0.03592491149902344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__vendors_vendor_id.415829ac1d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    vendor_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__vendors\"\nwhere vendor_id is not null\ngroup by vendor_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.744301Z", "completed_at": "2024-04-29T22:48:02.759680Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.768301Z", "completed_at": "2024-04-29T22:48:02.768305Z"}], "thread_id": "Thread-5", "execution_time": 0.039628028869628906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__accounting_books_accounting_book_id.12972ee6fc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect accounting_book_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounting_books\"\nwhere accounting_book_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.747413Z", "completed_at": "2024-04-29T22:48:02.759917Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.768580Z", "completed_at": "2024-04-29T22:48:02.768583Z"}], "thread_id": "Thread-7", "execution_time": 0.03973817825317383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__accounting_books_accounting_book_id.22e0106417", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    accounting_book_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounting_books\"\nwhere accounting_book_id is not null\ngroup by accounting_book_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.760195Z", "completed_at": "2024-04-29T22:48:02.768023Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.778518Z", "completed_at": "2024-04-29T22:48:02.778523Z"}], "thread_id": "Thread-6", "execution_time": 0.033492088317871094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_lines_transaction_id__transaction_line_id.07b823514f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, transaction_line_id\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transaction_lines\"\n    group by transaction_id, transaction_line_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.773369Z", "completed_at": "2024-04-29T22:48:02.779418Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.790891Z", "completed_at": "2024-04-29T22:48:02.790899Z"}], "thread_id": "Thread-3", "execution_time": 0.03717398643493652, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_line_id.a82e70adc1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transaction_lines\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.770018Z", "completed_at": "2024-04-29T22:48:02.779685Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.791294Z", "completed_at": "2024-04-29T22:48:02.791299Z"}], "thread_id": "Thread-8", "execution_time": 0.03826904296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_id.267b150890", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transaction_lines\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.780537Z", "completed_at": "2024-04-29T22:48:02.794491Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.805862Z", "completed_at": "2024-04-29T22:48:02.805866Z"}], "thread_id": "Thread-1", "execution_time": 0.04134392738342285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transactions_transaction_id.b4f6c6a72b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transactions\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.785589Z", "completed_at": "2024-04-29T22:48:02.803276Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.810496Z", "completed_at": "2024-04-29T22:48:02.810500Z"}], "thread_id": "Thread-4", "execution_time": 0.03527498245239258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__transactions_transaction_id.af3d15dce4", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transactions\"\nwhere transaction_id is not null\ngroup by transaction_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.791589Z", "completed_at": "2024-04-29T22:48:02.804822Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.811796Z", "completed_at": "2024-04-29T22:48:02.811800Z"}], "thread_id": "Thread-2", "execution_time": 0.0410008430480957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__accounts_account_id.f03cddbace", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounts\"\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.795353Z", "completed_at": "2024-04-29T22:48:02.805143Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.812331Z", "completed_at": "2024-04-29T22:48:02.812334Z"}], "thread_id": "Thread-5", "execution_time": 0.037645816802978516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__accounts_account_id.e94563d281", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounts\"\nwhere account_id is not null\ngroup by account_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.798549Z", "completed_at": "2024-04-29T22:48:02.805390Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.812583Z", "completed_at": "2024-04-29T22:48:02.812587Z"}], "thread_id": "Thread-7", "execution_time": 0.03775310516357422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__accounting_periods_accounting_period_id__fiscal_calendar_id.43005ecb69", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        accounting_period_id, fiscal_calendar_id\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounting_periods\"\n    group by accounting_period_id, fiscal_calendar_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.806136Z", "completed_at": "2024-04-29T22:48:02.812084Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.823745Z", "completed_at": "2024-04-29T22:48:02.823752Z"}], "thread_id": "Thread-6", "execution_time": 0.03154802322387695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__accounting_periods_accounting_period_id.5c1c46821c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect accounting_period_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounting_periods\"\nwhere accounting_period_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.817761Z", "completed_at": "2024-04-29T22:48:02.824401Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.832412Z", "completed_at": "2024-04-29T22:48:02.832416Z"}], "thread_id": "Thread-8", "execution_time": 0.03440427780151367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.83de8c8e97", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect consolidated_exchange_rate_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__consolidated_exchange_rates\"\nwhere consolidated_exchange_rate_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.813641Z", "completed_at": "2024-04-29T22:48:02.824668Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.832682Z", "completed_at": "2024-04-29T22:48:02.832686Z"}], "thread_id": "Thread-3", "execution_time": 0.0354461669921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__accounting_periods_fiscal_calendar_id.8d75190563", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fiscal_calendar_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounting_periods\"\nwhere fiscal_calendar_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.828162Z", "completed_at": "2024-04-29T22:48:02.844836Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.855611Z", "completed_at": "2024-04-29T22:48:02.855616Z"}], "thread_id": "Thread-1", "execution_time": 0.03501534461975098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.2ca94ecb54", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    consolidated_exchange_rate_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__consolidated_exchange_rates\"\nwhere consolidated_exchange_rate_id is not null\ngroup by consolidated_exchange_rate_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.836271Z", "completed_at": "2024-04-29T22:48:02.849498Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.856377Z", "completed_at": "2024-04-29T22:48:02.856380Z"}], "thread_id": "Thread-2", "execution_time": 0.03851485252380371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__classes_class_id.c63c54840b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    class_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__classes\"\nwhere class_id is not null\ngroup by class_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.833173Z", "completed_at": "2024-04-29T22:48:02.849758Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.857108Z", "completed_at": "2024-04-29T22:48:02.857111Z"}], "thread_id": "Thread-4", "execution_time": 0.040221214294433594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__classes_class_id.462bfda765", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect class_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__classes\"\nwhere class_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.839783Z", "completed_at": "2024-04-29T22:48:02.850052Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.857358Z", "completed_at": "2024-04-29T22:48:02.857362Z"}], "thread_id": "Thread-5", "execution_time": 0.03919792175292969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__currencies_currency_id.e8b331ffb3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__currencies\"\nwhere currency_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.845228Z", "completed_at": "2024-04-29T22:48:02.854856Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.864950Z", "completed_at": "2024-04-29T22:48:02.864954Z"}], "thread_id": "Thread-7", "execution_time": 0.039890289306640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__currencies_currency_id.09ab867f2c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    currency_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__currencies\"\nwhere currency_id is not null\ngroup by currency_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.850589Z", "completed_at": "2024-04-29T22:48:02.856641Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.866903Z", "completed_at": "2024-04-29T22:48:02.866907Z"}], "thread_id": "Thread-6", "execution_time": 0.030379056930541992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__customers_customer_id.bbb9eed2dc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__customers\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.858116Z", "completed_at": "2024-04-29T22:48:02.867778Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.873118Z", "completed_at": "2024-04-29T22:48:02.873123Z"}], "thread_id": "Thread-8", "execution_time": 0.028269052505493164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__customers_customer_id.7c9debe8d9", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.861158Z", "completed_at": "2024-04-29T22:48:02.868028Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.873407Z", "completed_at": "2024-04-29T22:48:02.873410Z"}], "thread_id": "Thread-3", "execution_time": 0.028316259384155273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__departments_department_id.6d96b00002", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect department_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__departments\"\nwhere department_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.878362Z", "completed_at": "2024-04-29T22:48:02.892414Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.901086Z", "completed_at": "2024-04-29T22:48:02.901092Z"}], "thread_id": "Thread-2", "execution_time": 0.03964400291442871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__expense_accounts_expense_account_id.4de138ed23", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect expense_account_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__expense_accounts\"\nwhere expense_account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.874140Z", "completed_at": "2024-04-29T22:48:02.892768Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.901351Z", "completed_at": "2024-04-29T22:48:02.901355Z"}], "thread_id": "Thread-1", "execution_time": 0.04053807258605957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__departments_department_id.2df16a9aa1", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    department_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__departments\"\nwhere department_id is not null\ngroup by department_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.882862Z", "completed_at": "2024-04-29T22:48:02.897850Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.905010Z", "completed_at": "2024-04-29T22:48:02.905014Z"}], "thread_id": "Thread-4", "execution_time": 0.03922009468078613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__expense_accounts_expense_account_id.5e813830ff", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    expense_account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__expense_accounts\"\nwhere expense_account_id is not null\ngroup by expense_account_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.885565Z", "completed_at": "2024-04-29T22:48:02.898632Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.908387Z", "completed_at": "2024-04-29T22:48:02.908391Z"}], "thread_id": "Thread-5", "execution_time": 0.03957986831665039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__locations_location_id.9f68ecaa6b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__locations\"\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.888718Z", "completed_at": "2024-04-29T22:48:02.899497Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.909667Z", "completed_at": "2024-04-29T22:48:02.909670Z"}], "thread_id": "Thread-7", "execution_time": 0.03988194465637207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__locations_location_id.3857e2cac2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    location_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__locations\"\nwhere location_id is not null\ngroup by location_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.893098Z", "completed_at": "2024-04-29T22:48:02.900591Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.910501Z", "completed_at": "2024-04-29T22:48:02.910505Z"}], "thread_id": "Thread-6", "execution_time": 0.032054901123046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__income_accounts_income_account_id.a38311d5f9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect income_account_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__income_accounts\"\nwhere income_account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.901833Z", "completed_at": "2024-04-29T22:48:02.911596Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.916605Z", "completed_at": "2024-04-29T22:48:02.916609Z"}], "thread_id": "Thread-8", "execution_time": 0.024482011795043945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__income_accounts_income_account_id.28b4166a07", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    income_account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__income_accounts\"\nwhere income_account_id is not null\ngroup by income_account_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.905299Z", "completed_at": "2024-04-29T22:48:02.911876Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.916880Z", "completed_at": "2024-04-29T22:48:02.916883Z"}], "thread_id": "Thread-3", "execution_time": 0.024147987365722656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__items_item_id.ba322d7da3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__items\"\nwhere item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.918510Z", "completed_at": "2024-04-29T22:48:02.957255Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.962459Z", "completed_at": "2024-04-29T22:48:02.962463Z"}], "thread_id": "Thread-2", "execution_time": 0.05946707725524902, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__items_item_id.760a674654", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    item_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__items\"\nwhere item_id is not null\ngroup by item_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.946127Z", "completed_at": "2024-04-29T22:48:02.959132Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.972846Z", "completed_at": "2024-04-29T22:48:02.972857Z"}], "thread_id": "Thread-5", "execution_time": 0.05943799018859863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__vendor_types_vendor_type_id.faed6fe0e9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_type_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__vendor_types\"\nwhere vendor_type_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.950007Z", "completed_at": "2024-04-29T22:48:02.961380Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.974550Z", "completed_at": "2024-04-29T22:48:02.974555Z"}], "thread_id": "Thread-7", "execution_time": 0.0599210262298584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__vendor_types_vendor_type_id.6ba4f59b69", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    vendor_type_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__vendor_types\"\nwhere vendor_type_id is not null\ngroup by vendor_type_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.968441Z", "completed_at": "2024-04-29T22:48:02.975745Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:02.985904Z", "completed_at": "2024-04-29T22:48:02.985909Z"}], "thread_id": "Thread-3", "execution_time": 0.03241395950317383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__transaction_lines_transaction_id__transaction_line_id.651bc3120d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, transaction_line_id\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__transaction_lines\"\n    group by transaction_id, transaction_line_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.982632Z", "completed_at": "2024-04-29T22:48:02.995615Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:03.008105Z", "completed_at": "2024-04-29T22:48:03.008114Z"}], "thread_id": "Thread-4", "execution_time": 0.03535175323486328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_id.e8055d67bc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__transaction_lines\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.979257Z", "completed_at": "2024-04-29T22:48:02.996152Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:03.008931Z", "completed_at": "2024-04-29T22:48:03.008935Z"}], "thread_id": "Thread-1", "execution_time": 0.03759312629699707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__subsidiaries_subsidiary_id.9aa9c2d015", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subsidiary_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__subsidiaries\"\nwhere subsidiary_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.986691Z", "completed_at": "2024-04-29T22:48:03.000915Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:03.011036Z", "completed_at": "2024-04-29T22:48:03.011039Z"}], "thread_id": "Thread-6", "execution_time": 0.039804935455322266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_line_id.420bd8637c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__transaction_lines\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:02.991012Z", "completed_at": "2024-04-29T22:48:03.004591Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:03.012024Z", "completed_at": "2024-04-29T22:48:03.012027Z"}], "thread_id": "Thread-2", "execution_time": 0.03913688659667969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__subsidiaries_subsidiary_id.7d0dfe64f0", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    subsidiary_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__subsidiaries\"\nwhere subsidiary_id is not null\ngroup by subsidiary_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:03.001218Z", "completed_at": "2024-04-29T22:48:03.009696Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:03.017920Z", "completed_at": "2024-04-29T22:48:03.017927Z"}], "thread_id": "Thread-7", "execution_time": 0.030810117721557617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__transactions_transaction_id.9439fe1532", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__transactions\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:03.005294Z", "completed_at": "2024-04-29T22:48:03.011302Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:03.019256Z", "completed_at": "2024-04-29T22:48:03.019260Z"}], "thread_id": "Thread-8", "execution_time": 0.0264737606048584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__transactions_transaction_id.fd6bd3af79", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__transactions\"\nwhere transaction_id is not null\ngroup by transaction_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:03.012293Z", "completed_at": "2024-04-29T22:48:03.019557Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:03.033240Z", "completed_at": "2024-04-29T22:48:03.033246Z"}], "thread_id": "Thread-3", "execution_time": 0.04171013832092285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__vendors_vendor_id.15978cc531", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__vendors\"\nwhere vendor_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:03.022298Z", "completed_at": "2024-04-29T22:48:03.047991Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:03.048519Z", "completed_at": "2024-04-29T22:48:03.048523Z"}], "thread_id": "Thread-4", "execution_time": 0.030682086944580078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__vendors_vendor_id.a981580d39", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    vendor_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__vendors\"\nwhere vendor_id is not null\ngroup by vendor_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:03.077596Z", "completed_at": "2024-04-29T22:48:03.215309Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:03.215883Z", "completed_at": "2024-04-29T22:48:03.215891Z"}], "thread_id": "Thread-8", "execution_time": 0.1394028663635254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.netsuite__income_statement", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_netsuite__transaction_lines_w_accounting_period as (\n\n\nwith transactions as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__transactions\"\n), \n\ntransaction_lines as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__transaction_lines\"\n),\n\ntransaction_lines_w_accounting_period as ( -- transaction line totals, by accounts, accounting period and subsidiary\n  select\n    transaction_lines.transaction_id,\n    transaction_lines.transaction_line_id,\n    transaction_lines.subsidiary_id,\n    transaction_lines.account_id,\n    transactions.accounting_period_id as transaction_accounting_period_id,\n    coalesce(transaction_lines.amount, 0) as unconverted_amount\n  from transaction_lines\n\n  join transactions on transactions.transaction_id = transaction_lines.transaction_id\n\n  where lower(transactions.transaction_type) != 'revenue arrangement'\n    and lower(non_posting_line) != 'yes'\n)\n\nselect * \nfrom transaction_lines_w_accounting_period\n),  __dbt__cte__int_netsuite__accountxperiod_exchange_rate_map as (\n\n\nwith accounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounts\"\n), \n\naccounting_books as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounting_books\"\n), \n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__subsidiaries\"\n),\n\nconsolidated_exchange_rates as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__consolidated_exchange_rates\"\n),\n\nperiod_exchange_rate_map as ( -- exchange rates used, by accounting period, to convert to parent subsidiary\n  select\n    consolidated_exchange_rates.accounting_period_id,\n    consolidated_exchange_rates.average_rate,\n    consolidated_exchange_rates.current_rate,\n    consolidated_exchange_rates.historical_rate,\n    consolidated_exchange_rates.from_subsidiary_id,\n    consolidated_exchange_rates.to_subsidiary_id\n  from consolidated_exchange_rates\n\n  where consolidated_exchange_rates.to_subsidiary_id in (select subsidiary_id from subsidiaries where parent_id is null)  -- constrait - only the primary subsidiary has no parent\n    and consolidated_exchange_rates.accounting_book_id in (select accounting_book_id from accounting_books where lower(is_primary) = 'yes')\n), \n\naccountxperiod_exchange_rate_map as ( -- account table with exchange rate details by accounting period\n  select\n    period_exchange_rate_map.accounting_period_id,\n    period_exchange_rate_map.from_subsidiary_id,\n    period_exchange_rate_map.to_subsidiary_id,\n    accounts.account_id,\n    case \n      when lower(accounts.general_rate_type) = 'historical' then period_exchange_rate_map.historical_rate\n      when lower(accounts.general_rate_type) = 'current' then period_exchange_rate_map.current_rate\n      when lower(accounts.general_rate_type) = 'average' then period_exchange_rate_map.average_rate\n      else null\n        end as exchange_rate\n  from accounts\n  \n  cross join period_exchange_rate_map\n)\n\nselect * \nfrom accountxperiod_exchange_rate_map\n),  __dbt__cte__int_netsuite__transaction_and_reporting_periods as (\n\n\nwith accounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounting_periods\"\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__subsidiaries\"\n),\n\ntransaction_and_reporting_periods as ( \n  select\n    base.accounting_period_id as accounting_period_id,\n    multiplier.accounting_period_id as reporting_accounting_period_id\n  from accounting_periods as base\n\n  join accounting_periods as multiplier\n    on multiplier.starting_at >= base.starting_at\n      and multiplier.quarter = base.quarter\n      and multiplier.year_0 = base.year_0\n      and multiplier.fiscal_calendar_id = base.fiscal_calendar_id\n      and cast(multiplier.starting_at as timestamp) <= now() \n\n  where lower(base.quarter) = 'no'\n    and lower(base.year_0) = 'no'\n    and base.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null) -- fiscal calendar will align with parent subsidiary's default calendar\n)\n\nselect * \nfrom transaction_and_reporting_periods\n),  __dbt__cte__int_netsuite__transactions_with_converted_amounts as (\n\n\nwith transaction_lines_w_accounting_period as (\n    select * \n    from __dbt__cte__int_netsuite__transaction_lines_w_accounting_period\n), \n\naccountxperiod_exchange_rate_map as (\n    select * \n    from __dbt__cte__int_netsuite__accountxperiod_exchange_rate_map\n), \n\ntransaction_and_reporting_periods as (\n    select * \n    from __dbt__cte__int_netsuite__transaction_and_reporting_periods\n), \n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounts\"\n),\n\ntransactions_in_every_calculation_period_w_exchange_rates as (\n  select\n    transaction_lines_w_accounting_period.*,\n    reporting_accounting_period_id,\n    exchange_reporting_period.exchange_rate as exchange_rate_reporting_period,\n    exchange_transaction_period.exchange_rate as exchange_rate_transaction_period\n  from transaction_lines_w_accounting_period\n\n  join transaction_and_reporting_periods \n    on transaction_and_reporting_periods.accounting_period_id = transaction_lines_w_accounting_period.transaction_accounting_period_id \n\n  join accountxperiod_exchange_rate_map as exchange_reporting_period\n    on exchange_reporting_period.accounting_period_id = transaction_and_reporting_periods.reporting_accounting_period_id\n      and exchange_reporting_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_reporting_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n      \n  join accountxperiod_exchange_rate_map as exchange_transaction_period\n    on exchange_transaction_period.accounting_period_id = transaction_and_reporting_periods.accounting_period_id\n      and exchange_transaction_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_transaction_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n), \n\ntransactions_with_converted_amounts as (\n  select\n    transactions_in_every_calculation_period_w_exchange_rates.*,\n    unconverted_amount * exchange_rate_transaction_period as converted_amount_using_transaction_accounting_period,\n    unconverted_amount * exchange_rate_reporting_period as converted_amount_using_reporting_month,\n    case\n      when lower(accounts.type_name) in ('income','other income','expense','other expense','other income','cost of goods sold') then true\n      else false \n        end as is_income_statement,\n    case\n      when lower(accounts.type_name) in ('accounts receivable', 'bank', 'deferred expense', 'fixed asset', 'other asset', 'other current asset', 'unbilled receivable', 'prepaid expense') then 'Asset'\n      when lower(accounts.type_name) in ('cost of goods sold', 'expense', 'other expense') then 'Expense'\n      when lower(accounts.type_name) in ('income', 'other income') then 'Income'\n      when lower(accounts.type_name) in ('accounts payable', 'credit card', 'deferred revenue', 'long term liability', 'other current liability') then 'Liability'\n      when lower(accounts.type_name) in ('equity', 'retained earnings', 'net income') then 'Equity'\n      when lower(accounts.type_name) in ('non posting', 'statistical') then 'Other'\n      else null \n        end as account_category\n  from transactions_in_every_calculation_period_w_exchange_rates\n\n  left join accounts \n    on accounts.account_id = transactions_in_every_calculation_period_w_exchange_rates.account_id \n)\n\nselect * \nfrom transactions_with_converted_amounts\n), transactions_with_converted_amounts as (\n    select * \n    from __dbt__cte__int_netsuite__transactions_with_converted_amounts\n), \n\n--Below is only used if income statement transaction detail columns are specified dbt_project.yml file.\n\n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounts\"\n), \n\naccounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounting_periods\"\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__subsidiaries\"\n),\n\ntransaction_lines as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__transaction_lines\"\n),\n\nclasses as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__classes\"\n),\n\nlocations as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__locations\"\n),\n\ndepartments as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__departments\"\n),\n\nincome_statement as (\n    select\n        transactions_with_converted_amounts.transaction_id,\n        transactions_with_converted_amounts.transaction_line_id,\n        reporting_accounting_periods.accounting_period_id as accounting_period_id,\n        reporting_accounting_periods.ending_at as accounting_period_ending,\n        reporting_accounting_periods.full_name as accounting_period_full_name,\n        reporting_accounting_periods.name as accounting_period_name,\n        lower(reporting_accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n        lower(reporting_accounting_periods.is_closed) = 'yes' as is_accounting_period_closed,\n        accounts.name as account_name,\n        accounts.type_name as account_type_name,\n        accounts.account_id as account_id,\n        accounts.account_number,\n        subsidiaries.subsidiary_id,\n        subsidiaries.full_name as subsidiary_full_name,\n        subsidiaries.name as subsidiary_name\n\n        --The below script allows for accounts table pass through columns.\n        \n\n\n\n,\n\n        accounts.account_number || '-' || accounts.name as account_number_and_name,\n        classes.full_name as class_full_name\n\n        --The below script allows for classes table pass through columns.\n        \n\n\n\n,\n\n        locations.full_name as location_full_name,\n        departments.full_name as department_full_name\n\n        --The below script allows for departments table pass through columns.\n        \n\n\n\n,\n\n        -converted_amount_using_transaction_accounting_period as converted_amount,\n        transactions_with_converted_amounts.account_category as account_category,\n        case when lower(accounts.type_name) = 'income' then 1\n            when lower(accounts.type_name) = 'cost of goods sold' then 2\n            when lower(accounts.type_name) = 'expense' then 3\n            when lower(accounts.type_name) = 'other income' then 4\n            when lower(accounts.type_name) = 'other expense' then 5\n            else null\n            end as income_statement_sort_helper\n\n        --Below is only used if income statement transaction detail columns are specified dbt_project.yml file.\n        \n    \n        \n    from transactions_with_converted_amounts\n\n    join transaction_lines as transaction_lines\n        on transaction_lines.transaction_line_id = transactions_with_converted_amounts.transaction_line_id\n            and transaction_lines.transaction_id = transactions_with_converted_amounts.transaction_id\n\n    left join classes \n        on classes.class_id = transaction_lines.class_id\n\n    left join locations\n        on locations.location_id = transaction_lines.location_id\n\n    left join departments \n        on departments.department_id = transaction_lines.department_id\n    join accounts on accounts.account_id = transactions_with_converted_amounts.account_id\n\n    join accounting_periods as reporting_accounting_periods \n        on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n    \n    join subsidiaries\n        on transactions_with_converted_amounts.subsidiary_id = subsidiaries.subsidiary_id\n\n    --Below is only used if income statement transaction detail columns are specified dbt_project.yml file.\n    \n\n    where reporting_accounting_periods.fiscal_calendar_id  = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n        and transactions_with_converted_amounts.transaction_accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n        and transactions_with_converted_amounts.is_income_statement\n)\n\nselect *\nfrom income_statement", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite__income_statement\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:03.070868Z", "completed_at": "2024-04-29T22:48:03.216974Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:03.217461Z", "completed_at": "2024-04-29T22:48:03.217465Z"}], "thread_id": "Thread-7", "execution_time": 0.14765596389770508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.netsuite__balance_sheet", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_netsuite__transaction_lines_w_accounting_period as (\n\n\nwith transactions as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__transactions\"\n), \n\ntransaction_lines as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__transaction_lines\"\n),\n\ntransaction_lines_w_accounting_period as ( -- transaction line totals, by accounts, accounting period and subsidiary\n  select\n    transaction_lines.transaction_id,\n    transaction_lines.transaction_line_id,\n    transaction_lines.subsidiary_id,\n    transaction_lines.account_id,\n    transactions.accounting_period_id as transaction_accounting_period_id,\n    coalesce(transaction_lines.amount, 0) as unconverted_amount\n  from transaction_lines\n\n  join transactions on transactions.transaction_id = transaction_lines.transaction_id\n\n  where lower(transactions.transaction_type) != 'revenue arrangement'\n    and lower(non_posting_line) != 'yes'\n)\n\nselect * \nfrom transaction_lines_w_accounting_period\n),  __dbt__cte__int_netsuite__accountxperiod_exchange_rate_map as (\n\n\nwith accounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounts\"\n), \n\naccounting_books as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounting_books\"\n), \n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__subsidiaries\"\n),\n\nconsolidated_exchange_rates as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__consolidated_exchange_rates\"\n),\n\nperiod_exchange_rate_map as ( -- exchange rates used, by accounting period, to convert to parent subsidiary\n  select\n    consolidated_exchange_rates.accounting_period_id,\n    consolidated_exchange_rates.average_rate,\n    consolidated_exchange_rates.current_rate,\n    consolidated_exchange_rates.historical_rate,\n    consolidated_exchange_rates.from_subsidiary_id,\n    consolidated_exchange_rates.to_subsidiary_id\n  from consolidated_exchange_rates\n\n  where consolidated_exchange_rates.to_subsidiary_id in (select subsidiary_id from subsidiaries where parent_id is null)  -- constrait - only the primary subsidiary has no parent\n    and consolidated_exchange_rates.accounting_book_id in (select accounting_book_id from accounting_books where lower(is_primary) = 'yes')\n), \n\naccountxperiod_exchange_rate_map as ( -- account table with exchange rate details by accounting period\n  select\n    period_exchange_rate_map.accounting_period_id,\n    period_exchange_rate_map.from_subsidiary_id,\n    period_exchange_rate_map.to_subsidiary_id,\n    accounts.account_id,\n    case \n      when lower(accounts.general_rate_type) = 'historical' then period_exchange_rate_map.historical_rate\n      when lower(accounts.general_rate_type) = 'current' then period_exchange_rate_map.current_rate\n      when lower(accounts.general_rate_type) = 'average' then period_exchange_rate_map.average_rate\n      else null\n        end as exchange_rate\n  from accounts\n  \n  cross join period_exchange_rate_map\n)\n\nselect * \nfrom accountxperiod_exchange_rate_map\n),  __dbt__cte__int_netsuite__transaction_and_reporting_periods as (\n\n\nwith accounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounting_periods\"\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__subsidiaries\"\n),\n\ntransaction_and_reporting_periods as ( \n  select\n    base.accounting_period_id as accounting_period_id,\n    multiplier.accounting_period_id as reporting_accounting_period_id\n  from accounting_periods as base\n\n  join accounting_periods as multiplier\n    on multiplier.starting_at >= base.starting_at\n      and multiplier.quarter = base.quarter\n      and multiplier.year_0 = base.year_0\n      and multiplier.fiscal_calendar_id = base.fiscal_calendar_id\n      and cast(multiplier.starting_at as timestamp) <= now() \n\n  where lower(base.quarter) = 'no'\n    and lower(base.year_0) = 'no'\n    and base.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null) -- fiscal calendar will align with parent subsidiary's default calendar\n)\n\nselect * \nfrom transaction_and_reporting_periods\n),  __dbt__cte__int_netsuite__transactions_with_converted_amounts as (\n\n\nwith transaction_lines_w_accounting_period as (\n    select * \n    from __dbt__cte__int_netsuite__transaction_lines_w_accounting_period\n), \n\naccountxperiod_exchange_rate_map as (\n    select * \n    from __dbt__cte__int_netsuite__accountxperiod_exchange_rate_map\n), \n\ntransaction_and_reporting_periods as (\n    select * \n    from __dbt__cte__int_netsuite__transaction_and_reporting_periods\n), \n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounts\"\n),\n\ntransactions_in_every_calculation_period_w_exchange_rates as (\n  select\n    transaction_lines_w_accounting_period.*,\n    reporting_accounting_period_id,\n    exchange_reporting_period.exchange_rate as exchange_rate_reporting_period,\n    exchange_transaction_period.exchange_rate as exchange_rate_transaction_period\n  from transaction_lines_w_accounting_period\n\n  join transaction_and_reporting_periods \n    on transaction_and_reporting_periods.accounting_period_id = transaction_lines_w_accounting_period.transaction_accounting_period_id \n\n  join accountxperiod_exchange_rate_map as exchange_reporting_period\n    on exchange_reporting_period.accounting_period_id = transaction_and_reporting_periods.reporting_accounting_period_id\n      and exchange_reporting_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_reporting_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n      \n  join accountxperiod_exchange_rate_map as exchange_transaction_period\n    on exchange_transaction_period.accounting_period_id = transaction_and_reporting_periods.accounting_period_id\n      and exchange_transaction_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_transaction_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n), \n\ntransactions_with_converted_amounts as (\n  select\n    transactions_in_every_calculation_period_w_exchange_rates.*,\n    unconverted_amount * exchange_rate_transaction_period as converted_amount_using_transaction_accounting_period,\n    unconverted_amount * exchange_rate_reporting_period as converted_amount_using_reporting_month,\n    case\n      when lower(accounts.type_name) in ('income','other income','expense','other expense','other income','cost of goods sold') then true\n      else false \n        end as is_income_statement,\n    case\n      when lower(accounts.type_name) in ('accounts receivable', 'bank', 'deferred expense', 'fixed asset', 'other asset', 'other current asset', 'unbilled receivable', 'prepaid expense') then 'Asset'\n      when lower(accounts.type_name) in ('cost of goods sold', 'expense', 'other expense') then 'Expense'\n      when lower(accounts.type_name) in ('income', 'other income') then 'Income'\n      when lower(accounts.type_name) in ('accounts payable', 'credit card', 'deferred revenue', 'long term liability', 'other current liability') then 'Liability'\n      when lower(accounts.type_name) in ('equity', 'retained earnings', 'net income') then 'Equity'\n      when lower(accounts.type_name) in ('non posting', 'statistical') then 'Other'\n      else null \n        end as account_category\n  from transactions_in_every_calculation_period_w_exchange_rates\n\n  left join accounts \n    on accounts.account_id = transactions_in_every_calculation_period_w_exchange_rates.account_id \n)\n\nselect * \nfrom transactions_with_converted_amounts\n), transactions_with_converted_amounts as (\n    select * \n    from __dbt__cte__int_netsuite__transactions_with_converted_amounts\n), \n\n--Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n\n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounts\"\n), \n\naccounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounting_periods\"\n), \n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__subsidiaries\"\n),\n\nbalance_sheet as ( \n  select\n    transactions_with_converted_amounts.transaction_id,\n    transactions_with_converted_amounts.transaction_line_id,\n    reporting_accounting_periods.accounting_period_id as accounting_period_id,\n    reporting_accounting_periods.ending_at as accounting_period_ending,\n    reporting_accounting_periods.full_name as accounting_period_full_name,\n    reporting_accounting_periods.name as accounting_period_name,\n    lower(reporting_accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n    lower(reporting_accounting_periods.is_closed) = 'yes' as is_accounting_period_closed,\n    transactions_with_converted_amounts.account_category as account_category,\n    case\n      when (lower(accounts.is_balancesheet) = 'f' and reporting_accounting_periods.year_id = transaction_accounting_periods.year_id) then 'Net Income'\n      when lower(accounts.is_balancesheet) = 'f' then 'Retained Earnings'\n      else accounts.name\n        end as account_name,\n    case\n      when (lower(accounts.is_balancesheet) = 'f' and reporting_accounting_periods.year_id = transaction_accounting_periods.year_id) then 'Net Income'\n      when lower(accounts.is_balancesheet) = 'f' then 'Retained Earnings'\n      else accounts.type_name\n        end as account_type_name,\n    case\n      when lower(accounts.is_balancesheet) = 'f' then null\n      else accounts.account_id\n        end as account_id,\n    case\n      when lower(accounts.is_balancesheet) = 'f' then null\n      else accounts.account_number\n        end as account_number\n    \n    --The below script allows for accounts table pass through columns.\n    \n\n\n\n,\n\n    case\n      when lower(accounts.is_balancesheet) = 'f' and lower(accounts.general_rate_type) in ('historical', 'average') then -converted_amount_using_transaction_accounting_period\n      when lower(accounts.is_balancesheet) = 'f' then -converted_amount_using_reporting_month\n      when lower(accounts.is_balancesheet) = 't' and lower(accounts.is_leftside) = 'f' and lower(accounts.general_rate_type) in ('historical', 'average') then -converted_amount_using_transaction_accounting_period\n      when lower(accounts.is_balancesheet) = 't' and lower(accounts.is_leftside) = 't' and lower(accounts.general_rate_type) in ('historical', 'average') then converted_amount_using_transaction_accounting_period\n      when lower(accounts.is_balancesheet) = 't' and lower(accounts.is_leftside) = 'f' then -converted_amount_using_reporting_month\n      when lower(accounts.is_balancesheet) = 't' and lower(accounts.is_leftside) = 't' then converted_amount_using_reporting_month\n      else 0\n        end as converted_amount,\n        \n    case\n      when lower(accounts.type_name) = 'bank' then 1\n      when lower(accounts.type_name) = 'accounts receivable' then 2\n      when lower(accounts.type_name) = 'unbilled receivable' then 3\n      when lower(accounts.type_name) = 'other current asset' then 4\n      when lower(accounts.type_name) = 'fixed asset' then 5\n      when lower(accounts.type_name) = 'other asset' then 6\n      when lower(accounts.type_name) = 'deferred expense' then 7\n      when lower(accounts.type_name) = 'accounts payable' then 8\n      when lower(accounts.type_name) = 'credit card' then 9\n      when lower(accounts.type_name) = 'other current liability' then 10\n      when lower(accounts.type_name) = 'long term liability' then 11\n      when lower(accounts.type_name) = 'deferred revenue' then 12\n      when lower(accounts.type_name) = 'equity' then 13\n      when (lower(accounts.is_balancesheet) = 'f' and reporting_accounting_periods.year_id = transaction_accounting_periods.year_id) then 15\n      when lower(accounts.is_balancesheet) = 'f' then 14\n      else null\n        end as balance_sheet_sort_helper\n    \n    --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n    \n\n  from transactions_with_converted_amounts\n  \n  --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n  \n\n\n  left join accounts \n    on accounts.account_id = transactions_with_converted_amounts.account_id\n\n  left join accounting_periods as reporting_accounting_periods \n    on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n\n  left join accounting_periods as transaction_accounting_periods \n    on transaction_accounting_periods.accounting_period_id = transactions_with_converted_amounts.transaction_accounting_period_id\n\n  where reporting_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n    and transaction_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n    and (lower(accounts.is_balancesheet) = 't'\n      or transactions_with_converted_amounts.is_income_statement)\n\n  union all\n\n  select\n    transactions_with_converted_amounts.transaction_id,\n    transactions_with_converted_amounts.transaction_line_id,\n    reporting_accounting_periods.accounting_period_id as accounting_period_id,\n    reporting_accounting_periods.ending_at as accounting_period_ending,\n    reporting_accounting_periods.full_name as accounting_period_full_name,\n    reporting_accounting_periods.name as accounting_period_name,\n    lower(reporting_accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n    lower(reporting_accounting_periods.is_closed) = 'yes' as is_accounting_period_closed,\n    'Equity' as account_category,\n    'Cumulative Translation Adjustment' as account_name,\n    'Cumulative Translation Adjustment' as account_type_name,\n    null as account_id,\n    null as account_number,\n\n    \n\n    case\n      when lower(account_category) = 'equity' or is_income_statement then converted_amount_using_transaction_accounting_period\n      else converted_amount_using_reporting_month\n        end as converted_amount,\n    16 as balance_sheet_sort_helper\n\n    --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n    \n\n  from transactions_with_converted_amounts\n\n  --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n  \n\n  left join accounts\n    on accounts.account_id = transactions_with_converted_amounts.account_id\n\n  left join accounting_periods as reporting_accounting_periods \n    on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n    \n  where reporting_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n    and (lower(accounts.is_balancesheet) = 't'\n      or transactions_with_converted_amounts.is_income_statement)\n)\n\nselect *\nfrom balance_sheet", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite__balance_sheet\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:03.110067Z", "completed_at": "2024-04-29T22:48:03.218424Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:03.221425Z", "completed_at": "2024-04-29T22:48:03.221430Z"}], "thread_id": "Thread-3", "execution_time": 0.11446094512939453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.netsuite__transaction_details", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_netsuite__transaction_lines_w_accounting_period as (\n\n\nwith transactions as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__transactions\"\n), \n\ntransaction_lines as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__transaction_lines\"\n),\n\ntransaction_lines_w_accounting_period as ( -- transaction line totals, by accounts, accounting period and subsidiary\n  select\n    transaction_lines.transaction_id,\n    transaction_lines.transaction_line_id,\n    transaction_lines.subsidiary_id,\n    transaction_lines.account_id,\n    transactions.accounting_period_id as transaction_accounting_period_id,\n    coalesce(transaction_lines.amount, 0) as unconverted_amount\n  from transaction_lines\n\n  join transactions on transactions.transaction_id = transaction_lines.transaction_id\n\n  where lower(transactions.transaction_type) != 'revenue arrangement'\n    and lower(non_posting_line) != 'yes'\n)\n\nselect * \nfrom transaction_lines_w_accounting_period\n),  __dbt__cte__int_netsuite__accountxperiod_exchange_rate_map as (\n\n\nwith accounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounts\"\n), \n\naccounting_books as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounting_books\"\n), \n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__subsidiaries\"\n),\n\nconsolidated_exchange_rates as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__consolidated_exchange_rates\"\n),\n\nperiod_exchange_rate_map as ( -- exchange rates used, by accounting period, to convert to parent subsidiary\n  select\n    consolidated_exchange_rates.accounting_period_id,\n    consolidated_exchange_rates.average_rate,\n    consolidated_exchange_rates.current_rate,\n    consolidated_exchange_rates.historical_rate,\n    consolidated_exchange_rates.from_subsidiary_id,\n    consolidated_exchange_rates.to_subsidiary_id\n  from consolidated_exchange_rates\n\n  where consolidated_exchange_rates.to_subsidiary_id in (select subsidiary_id from subsidiaries where parent_id is null)  -- constrait - only the primary subsidiary has no parent\n    and consolidated_exchange_rates.accounting_book_id in (select accounting_book_id from accounting_books where lower(is_primary) = 'yes')\n), \n\naccountxperiod_exchange_rate_map as ( -- account table with exchange rate details by accounting period\n  select\n    period_exchange_rate_map.accounting_period_id,\n    period_exchange_rate_map.from_subsidiary_id,\n    period_exchange_rate_map.to_subsidiary_id,\n    accounts.account_id,\n    case \n      when lower(accounts.general_rate_type) = 'historical' then period_exchange_rate_map.historical_rate\n      when lower(accounts.general_rate_type) = 'current' then period_exchange_rate_map.current_rate\n      when lower(accounts.general_rate_type) = 'average' then period_exchange_rate_map.average_rate\n      else null\n        end as exchange_rate\n  from accounts\n  \n  cross join period_exchange_rate_map\n)\n\nselect * \nfrom accountxperiod_exchange_rate_map\n),  __dbt__cte__int_netsuite__transaction_and_reporting_periods as (\n\n\nwith accounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounting_periods\"\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__subsidiaries\"\n),\n\ntransaction_and_reporting_periods as ( \n  select\n    base.accounting_period_id as accounting_period_id,\n    multiplier.accounting_period_id as reporting_accounting_period_id\n  from accounting_periods as base\n\n  join accounting_periods as multiplier\n    on multiplier.starting_at >= base.starting_at\n      and multiplier.quarter = base.quarter\n      and multiplier.year_0 = base.year_0\n      and multiplier.fiscal_calendar_id = base.fiscal_calendar_id\n      and cast(multiplier.starting_at as timestamp) <= now() \n\n  where lower(base.quarter) = 'no'\n    and lower(base.year_0) = 'no'\n    and base.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null) -- fiscal calendar will align with parent subsidiary's default calendar\n)\n\nselect * \nfrom transaction_and_reporting_periods\n),  __dbt__cte__int_netsuite__transactions_with_converted_amounts as (\n\n\nwith transaction_lines_w_accounting_period as (\n    select * \n    from __dbt__cte__int_netsuite__transaction_lines_w_accounting_period\n), \n\naccountxperiod_exchange_rate_map as (\n    select * \n    from __dbt__cte__int_netsuite__accountxperiod_exchange_rate_map\n), \n\ntransaction_and_reporting_periods as (\n    select * \n    from __dbt__cte__int_netsuite__transaction_and_reporting_periods\n), \n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounts\"\n),\n\ntransactions_in_every_calculation_period_w_exchange_rates as (\n  select\n    transaction_lines_w_accounting_period.*,\n    reporting_accounting_period_id,\n    exchange_reporting_period.exchange_rate as exchange_rate_reporting_period,\n    exchange_transaction_period.exchange_rate as exchange_rate_transaction_period\n  from transaction_lines_w_accounting_period\n\n  join transaction_and_reporting_periods \n    on transaction_and_reporting_periods.accounting_period_id = transaction_lines_w_accounting_period.transaction_accounting_period_id \n\n  join accountxperiod_exchange_rate_map as exchange_reporting_period\n    on exchange_reporting_period.accounting_period_id = transaction_and_reporting_periods.reporting_accounting_period_id\n      and exchange_reporting_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_reporting_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n      \n  join accountxperiod_exchange_rate_map as exchange_transaction_period\n    on exchange_transaction_period.accounting_period_id = transaction_and_reporting_periods.accounting_period_id\n      and exchange_transaction_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_transaction_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n), \n\ntransactions_with_converted_amounts as (\n  select\n    transactions_in_every_calculation_period_w_exchange_rates.*,\n    unconverted_amount * exchange_rate_transaction_period as converted_amount_using_transaction_accounting_period,\n    unconverted_amount * exchange_rate_reporting_period as converted_amount_using_reporting_month,\n    case\n      when lower(accounts.type_name) in ('income','other income','expense','other expense','other income','cost of goods sold') then true\n      else false \n        end as is_income_statement,\n    case\n      when lower(accounts.type_name) in ('accounts receivable', 'bank', 'deferred expense', 'fixed asset', 'other asset', 'other current asset', 'unbilled receivable', 'prepaid expense') then 'Asset'\n      when lower(accounts.type_name) in ('cost of goods sold', 'expense', 'other expense') then 'Expense'\n      when lower(accounts.type_name) in ('income', 'other income') then 'Income'\n      when lower(accounts.type_name) in ('accounts payable', 'credit card', 'deferred revenue', 'long term liability', 'other current liability') then 'Liability'\n      when lower(accounts.type_name) in ('equity', 'retained earnings', 'net income') then 'Equity'\n      when lower(accounts.type_name) in ('non posting', 'statistical') then 'Other'\n      else null \n        end as account_category\n  from transactions_in_every_calculation_period_w_exchange_rates\n\n  left join accounts \n    on accounts.account_id = transactions_in_every_calculation_period_w_exchange_rates.account_id \n)\n\nselect * \nfrom transactions_with_converted_amounts\n), transactions_with_converted_amounts as (\n    select * \n    from __dbt__cte__int_netsuite__transactions_with_converted_amounts\n),\n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounts\"\n),\n\naccounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__accounting_periods\"\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__subsidiaries\"\n),\n\ntransaction_lines as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__transaction_lines\"\n),\n\ntransactions as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__transactions\"\n),\n\nincome_accounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__income_accounts\"\n),\n\nexpense_accounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__expense_accounts\"\n),\n\ncustomers as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__customers\"\n),\n\nitems as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__items\"\n),\n\nlocations as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__locations\"\n),\n\nvendors as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__vendors\"\n),\n\nvendor_types as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__vendor_types\"\n),\n\ndepartments as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__departments\"\n),\n\ncurrencies as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__currencies\"\n),\n\nclasses as (\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite__classes\"\n),\n\ntransaction_details as (\n  select\n    transaction_lines.transaction_line_id,\n    transaction_lines.memo as transaction_memo,\n    lower(transaction_lines.non_posting_line) = 'yes' as is_transaction_non_posting,\n    transactions.transaction_id,\n    transactions.status as transaction_status,\n    transactions.transaction_date,\n    transactions.due_date_at as transaction_due_date,\n    transactions.transaction_type as transaction_type,\n    (lower(transactions.is_advanced_intercompany) = 'yes' or lower(transactions.is_intercompany) = 'yes') as is_transaction_intercompany\n\n    --The below script allows for transactions table pass through columns.\n    \n\n\n\n    \n\n    --The below script allows for transaction lines table pass through columns.\n    \n\n\n\n,\n\n    accounting_periods.ending_at as accounting_period_ending,\n    accounting_periods.full_name as accounting_period_full_name,\n    accounting_periods.name as accounting_period_name,\n    lower(accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n    lower(accounting_periods.is_closed) = 'yes' as is_accounting_period_closed,\n    accounts.name as account_name,\n    accounts.type_name as account_type_name,\n    accounts.account_id as account_id,\n    accounts.account_number\n\n    --The below script allows for accounts table pass through columns.\n    \n\n\n\n,\n\n    lower(accounts.is_leftside) = 't' as is_account_leftside,\n    lower(accounts.type_name) like 'accounts payable%' as is_accounts_payable,\n    lower(accounts.type_name) like 'accounts receivable%' as is_accounts_receivable,\n    lower(accounts.name) like '%intercompany%' as is_account_intercompany,\n    coalesce(parent_account.name, accounts.name) as parent_account_name,\n    income_accounts.income_account_id is not null as is_income_account,\n    expense_accounts.expense_account_id is not null as is_expense_account,\n    customers.company_name,\n    customers.city as customer_city,\n    customers.state as customer_state,\n    customers.zipcode as customer_zipcode,\n    customers.country as customer_country,\n    customers.date_first_order_at as customer_date_first_order,\n    customers.customer_external_id,\n    classes.full_name as class_full_name,\n    items.name as item_name,\n    items.type_name as item_type_name,\n    items.sales_description,\n    locations.name as location_name,\n    locations.city as location_city,\n    locations.country as location_country,\n    vendor_types.name as vendor_type_name,\n    vendors.company_name as vendor_name,\n    vendors.create_date_at as vendor_create_date,\n    currencies.name as currency_name,\n    currencies.symbol as currency_symbol,\n    departments.name as department_name\n\n    --The below script allows for departments table pass through columns.\n    \n\n\n\n,\n\n    subsidiaries.name as subsidiary_name,\n    case\n      when lower(accounts.type_name) = 'income' or lower(accounts.type_name) = 'other income' then -converted_amount_using_transaction_accounting_period\n      else converted_amount_using_transaction_accounting_period\n        end as converted_amount,\n    case\n      when lower(accounts.type_name) = 'income' or lower(accounts.type_name) = 'other income' then -transaction_lines.amount\n      else transaction_lines.amount\n        end as transaction_amount\n  from transaction_lines\n\n  join transactions\n    on transactions.transaction_id = transaction_lines.transaction_id\n\n  left join transactions_with_converted_amounts as transactions_with_converted_amounts\n    on transactions_with_converted_amounts.transaction_line_id = transaction_lines.transaction_line_id\n      and transactions_with_converted_amounts.transaction_id = transaction_lines.transaction_id\n      and transactions_with_converted_amounts.transaction_accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n\n  left join accounts \n    on accounts.account_id = transaction_lines.account_id\n\n  left join accounts as parent_account \n    on parent_account.account_id = accounts.parent_id\n\n  left join accounting_periods \n    on accounting_periods.accounting_period_id = transactions.accounting_period_id\n  left join income_accounts \n    on income_accounts.income_account_id = accounts.account_id\n\n  left join expense_accounts \n    on expense_accounts.expense_account_id = accounts.account_id\n\n  left join customers \n    on customers.customer_id = transaction_lines.company_id\n  \n  left join classes\n    on classes.class_id = transaction_lines.class_id\n\n  left join items \n    on items.item_id = transaction_lines.item_id\n\n  left join locations \n    on locations.location_id = transaction_lines.location_id\n\n  left join vendors \n    on vendors.vendor_id = transaction_lines.company_id\n\n  left join vendor_types \n    on vendor_types.vendor_type_id = vendors.vendor_type_id\n\n  left join currencies \n    on currencies.currency_id = transactions.currency_id\n\n  left join departments \n    on departments.department_id = transaction_lines.department_id\n\n  join subsidiaries \n    on subsidiaries.subsidiary_id = transaction_lines.subsidiary_id\n    \n  where (accounting_periods.fiscal_calendar_id is null\n    or accounting_periods.fiscal_calendar_id  = (select fiscal_calendar_id from subsidiaries where parent_id is null))\n)\n\nselect *\nfrom transaction_details", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite__transaction_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:03.224390Z", "completed_at": "2024-04-29T22:48:03.244366Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:03.259116Z", "completed_at": "2024-04-29T22:48:03.259126Z"}], "thread_id": "Thread-5", "execution_time": 0.041374921798706055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.dbt_utils_unique_combination_of_columns_netsuite__income_statement_transaction_line_id__transaction_id__accounting_period_id__account_name.8ee630c641", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_line_id, transaction_id, accounting_period_id, account_name\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite__income_statement\"\n    group by transaction_line_id, transaction_id, accounting_period_id, account_name\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:03.231650Z", "completed_at": "2024-04-29T22:48:03.244828Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:03.260320Z", "completed_at": "2024-04-29T22:48:03.260326Z"}], "thread_id": "Thread-1", "execution_time": 0.04101085662841797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite__income_statement_transaction_line_id.00136bcf80", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite__income_statement\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:03.228765Z", "completed_at": "2024-04-29T22:48:03.245165Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:03.260636Z", "completed_at": "2024-04-29T22:48:03.260645Z"}], "thread_id": "Thread-2", "execution_time": 0.04220318794250488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite__income_statement_transaction_id.12be020c7d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite__income_statement\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:03.235394Z", "completed_at": "2024-04-29T22:48:03.246354Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:03.261652Z", "completed_at": "2024-04-29T22:48:03.261655Z"}], "thread_id": "Thread-4", "execution_time": 0.04193115234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.dbt_utils_unique_combination_of_columns_netsuite__balance_sheet_transaction_line_id__transaction_id__accounting_period_id__account_name.7d7c0ea1da", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_line_id, transaction_id, accounting_period_id, account_name\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite__balance_sheet\"\n    group by transaction_line_id, transaction_id, accounting_period_id, account_name\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:03.240818Z", "completed_at": "2024-04-29T22:48:03.246639Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:03.261961Z", "completed_at": "2024-04-29T22:48:03.261965Z"}], "thread_id": "Thread-7", "execution_time": 0.04174017906188965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite__balance_sheet_transaction_line_id.2467dc5a32", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite__balance_sheet\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:03.238131Z", "completed_at": "2024-04-29T22:48:03.246927Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:03.262261Z", "completed_at": "2024-04-29T22:48:03.262264Z"}], "thread_id": "Thread-8", "execution_time": 0.042565345764160156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite__balance_sheet_transaction_id.bb54ae3b9e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite__balance_sheet\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:03.247671Z", "completed_at": "2024-04-29T22:48:03.263532Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:03.267624Z", "completed_at": "2024-04-29T22:48:03.267628Z"}], "thread_id": "Thread-3", "execution_time": 0.024968385696411133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.accepted_values_netsuite__transaction_details_account_type_name__Accounts_Receivable__Bank__Deferred_Expense__Fixed_Asset__Other_Asset__Other_Current_Asset__Unbilled_Receivable__Prepaid_Expense__Cost_of_Goods_Sold__Expense__Other_Expense__Income__Other_Income__Accounts_Payable__Credit_Card__Deferred_Revenue__Long_Term_Liability__Other_Current_Liability__Equity__Retained_Earnings__Net_Income__Non_Posting__Statistical.fd03652096", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        account_type_name as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite__transaction_details\"\n    group by account_type_name\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Accounts Receivable','Bank','Deferred Expense','Fixed Asset','Other Asset','Other Current Asset','Unbilled Receivable','Prepaid Expense','Cost of Goods Sold','Expense','Other Expense','Income','Other Income','Accounts Payable','Credit Card','Deferred Revenue','Long Term Liability','Other Current Liability','Equity','Retained Earnings','Net Income','Non Posting','Statistical'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:03.273123Z", "completed_at": "2024-04-29T22:48:03.278789Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:03.279294Z", "completed_at": "2024-04-29T22:48:03.279302Z"}], "thread_id": "Thread-1", "execution_time": 0.012834787368774414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite__transaction_details_transaction_id.a65a8e2f58", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite__transaction_details\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:03.269110Z", "completed_at": "2024-04-29T22:48:03.280079Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:03.280896Z", "completed_at": "2024-04-29T22:48:03.280899Z"}], "thread_id": "Thread-5", "execution_time": 0.015202999114990234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.dbt_utils_unique_combination_of_columns_netsuite__transaction_details_transaction_line_id__transaction_id.5613fa3400", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_line_id, transaction_id\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite__transaction_details\"\n    group by transaction_line_id, transaction_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:03.275759Z", "completed_at": "2024-04-29T22:48:03.280635Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:03.281883Z", "completed_at": "2024-04-29T22:48:03.281886Z"}], "thread_id": "Thread-2", "execution_time": 0.015095949172973633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite__transaction_details_transaction_line_id.1662f317e3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite__transaction_details\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:03.051315Z", "completed_at": "2024-04-29T22:48:03.748379Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:03.749255Z", "completed_at": "2024-04-29T22:48:03.749266Z"}], "thread_id": "Thread-6", "execution_time": 0.7003200054168701, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.int_netsuite2__tran_with_converted_amounts", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_netsuite2__transaction_lines as (\n\n\nwith transaction_lines as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transaction_lines\"\n),\n\ntransaction_accounting_lines as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transaction_accounting_lines\"\n),\n\n\naccounting_books as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_books\"\n), \n\n\njoined as (\n\n    select \n        transaction_lines.*,\n        transaction_accounting_lines.account_id,\n\n        \n        transaction_accounting_lines.accounting_book_id,\n        accounting_books.accounting_book_name,\n        \n        \n        transaction_accounting_lines.amount,\n        transaction_accounting_lines.credit_amount,\n        transaction_accounting_lines.debit_amount,\n        transaction_accounting_lines.paid_amount,\n        transaction_accounting_lines.unpaid_amount,\n        transaction_accounting_lines.is_posting\n\n    from transaction_lines\n    left join transaction_accounting_lines\n        on transaction_lines.transaction_line_id = transaction_accounting_lines.transaction_line_id\n        and transaction_lines.transaction_id = transaction_accounting_lines.transaction_id\n        \n    \n    left join accounting_books\n        on accounting_books.accounting_book_id = transaction_accounting_lines.accounting_book_id\n\n    union all\n\n    select\n        transaction_lines.*,\n        transaction_accounting_lines.account_id,\n        accounting_books.accounting_book_id,\n        accounting_books.accounting_book_name,\n        transaction_accounting_lines.amount,\n        transaction_accounting_lines.credit_amount,\n        transaction_accounting_lines.debit_amount,\n        transaction_accounting_lines.paid_amount,\n        transaction_accounting_lines.unpaid_amount,\n        transaction_accounting_lines.is_posting\n\n    from transaction_lines\n    left join transaction_accounting_lines\n        on transaction_lines.transaction_line_id = transaction_accounting_lines.transaction_line_id\n        and transaction_lines.transaction_id = transaction_accounting_lines.transaction_id\n    left join accounting_books\n        on accounting_books.base_book_id = transaction_accounting_lines.accounting_book_id\n    where accounting_books.base_book_id is not null\n    \n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__tran_lines_w_accounting_period as (\n\n\nwith transactions as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transactions\"\n), \n\ntransaction_lines as (\n    select * \n    from __dbt__cte__int_netsuite2__transaction_lines\n),\n\ntransaction_lines_w_accounting_period as ( -- transaction line totals, by accounts, accounting period and subsidiary\n  select\n    transaction_lines.transaction_id,\n    transaction_lines.transaction_line_id,\n    transaction_lines.subsidiary_id,\n    transaction_lines.account_id,\n\n    \n    transaction_lines.accounting_book_id,\n    transaction_lines.accounting_book_name,\n    \n    \n    transactions.accounting_period_id as transaction_accounting_period_id,\n    coalesce(transaction_lines.amount, 0) as unconverted_amount,\n    transactions._fivetran_synced_date\n  from transaction_lines\n\n  join transactions on transactions.transaction_id = transaction_lines.transaction_id\n\n  where lower(transactions.transaction_type) != 'revenue arrangement'\n    and transaction_lines.is_posting\n)\n\nselect * \nfrom transaction_lines_w_accounting_period\n),  __dbt__cte__int_netsuite2__accounts as (\n\n\nwith accounts as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounts\"\n),\n\naccount_types as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__account_types\"\n),\n\njoined as (\n\n    select \n        accounts.*,\n        account_types.type_name,\n        account_types.is_balancesheet,\n        account_types.is_leftside\n\n    from accounts\n    left join account_types\n        on accounts.account_type_id = account_types.account_type_id\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__acctxperiod_exchange_rate_map as (\n\n\nwith accounts as (\n    select * \n    from __dbt__cte__int_netsuite2__accounts\n), \n\n\naccounting_books as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_books\"\n),\n\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__subsidiaries\"\n),\n\nconsolidated_exchange_rates as (\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__consolidated_exchange_rates\"\n),\n\ncurrencies as (\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__currencies\"\n),\n\nperiod_exchange_rate_map as ( -- exchange rates used, by accounting period, to convert to parent subsidiary\n  select\n    consolidated_exchange_rates.accounting_period_id,\n\n    \n    consolidated_exchange_rates.accounting_book_id,\n    \n\n    consolidated_exchange_rates.average_rate,\n    consolidated_exchange_rates.current_rate,\n    consolidated_exchange_rates.historical_rate,\n    consolidated_exchange_rates.from_subsidiary_id,\n    consolidated_exchange_rates.to_subsidiary_id,\n    to_subsidiaries.name as to_subsidiary_name,\n    currencies.symbol as to_subsidiary_currency_symbol\n  from consolidated_exchange_rates\n  \n  left join subsidiaries as to_subsidiaries\n    on consolidated_exchange_rates.to_subsidiary_id = to_subsidiaries.subsidiary_id\n\n  left join currencies\n    on currencies.currency_id = to_subsidiaries.currency_id\n\n  \n), \n\naccountxperiod_exchange_rate_map as ( -- account table with exchange rate details by accounting period\n  select\n    period_exchange_rate_map.accounting_period_id,\n\n    \n    period_exchange_rate_map.accounting_book_id,\n    \n    \n    period_exchange_rate_map.from_subsidiary_id,\n    period_exchange_rate_map.to_subsidiary_id,\n    period_exchange_rate_map.to_subsidiary_name,\n    period_exchange_rate_map.to_subsidiary_currency_symbol,\n    accounts.account_id,\n    case \n      when lower(accounts.general_rate_type) = 'historical' then period_exchange_rate_map.historical_rate\n      when lower(accounts.general_rate_type) = 'current' then period_exchange_rate_map.current_rate\n      when lower(accounts.general_rate_type) = 'average' then period_exchange_rate_map.average_rate\n      else null\n        end as exchange_rate\n  from accounts\n  \n  cross join period_exchange_rate_map\n)\n\nselect *\nfrom accountxperiod_exchange_rate_map\n),  __dbt__cte__int_netsuite2__accounting_periods as (\n\n\nwith accounting_periods as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_periods\"\n),\n\naccounting_period_fiscal_calendars as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_period_fiscal_cal\"\n),\n\njoined as (\n\n    select \n        accounting_periods.*,\n        accounting_period_fiscal_calendars.fiscal_calendar_id\n\n    from accounting_periods\n    left join accounting_period_fiscal_calendars\n        on accounting_periods.accounting_period_id = accounting_period_fiscal_calendars.accounting_period_id\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__tran_and_reporting_periods as (\n\n\nwith accounting_periods as (\n    select * \n    from __dbt__cte__int_netsuite2__accounting_periods\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__subsidiaries\"\n),\n\ntransaction_and_reporting_periods as ( \n  select\n    base.accounting_period_id as accounting_period_id,\n    multiplier.accounting_period_id as reporting_accounting_period_id\n  from accounting_periods as base\n\n  join accounting_periods as multiplier\n    on multiplier.starting_at >= base.starting_at\n      and multiplier.is_quarter = base.is_quarter\n      and multiplier.is_year = base.is_year -- this was year_0 in netsuite1\n      and multiplier.fiscal_calendar_id = base.fiscal_calendar_id\n      and cast(multiplier.starting_at as timestamp) <= now() \n\n  where not base.is_quarter\n    and not base.is_year\n    and base.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null) -- fiscal calendar will align with parent subsidiary's default calendar\n)\n\nselect * \nfrom transaction_and_reporting_periods\n), transaction_lines_w_accounting_period as (\n  select * \n  from __dbt__cte__int_netsuite2__tran_lines_w_accounting_period\n\n  \n  where _fivetran_synced_date >= \n\n\n\n    \n\n    \n\n    cast('2010-01-01' as date) + ((interval '1 day') * (-3))\n\n\n\n\n  \n), \n\n\naccountxperiod_exchange_rate_map as (\n  select * \n  from __dbt__cte__int_netsuite2__acctxperiod_exchange_rate_map\n), \n\n\ntransaction_and_reporting_periods as (\n  select * \n  from __dbt__cte__int_netsuite2__tran_and_reporting_periods\n), \n\naccounts as (\n  select * \n  from __dbt__cte__int_netsuite2__accounts\n),\n\ntransactions_in_every_calculation_period_w_exchange_rates as (\n  select\n    transaction_lines_w_accounting_period.*,\n    reporting_accounting_period_id\n    \n    \n    , exchange_reporting_period.exchange_rate as exchange_rate_reporting_period\n    , exchange_transaction_period.exchange_rate as exchange_rate_transaction_period\n    \n\n    \n    , exchange_reporting_period.to_subsidiary_id\n    , exchange_reporting_period.to_subsidiary_name\n    , exchange_reporting_period.to_subsidiary_currency_symbol\n    \n\n  from transaction_lines_w_accounting_period\n\n  left join transaction_and_reporting_periods \n    on transaction_and_reporting_periods.accounting_period_id = transaction_lines_w_accounting_period.transaction_accounting_period_id \n\n  \n  left join accountxperiod_exchange_rate_map as exchange_reporting_period\n    on exchange_reporting_period.accounting_period_id = transaction_and_reporting_periods.reporting_accounting_period_id\n      and exchange_reporting_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_reporting_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n\n      \n      and exchange_reporting_period.accounting_book_id = transaction_lines_w_accounting_period.accounting_book_id\n      \n      \n  left join accountxperiod_exchange_rate_map as exchange_transaction_period\n    on exchange_transaction_period.accounting_period_id = transaction_and_reporting_periods.accounting_period_id\n      and exchange_transaction_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_transaction_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n      \n      \n      and exchange_transaction_period.accounting_book_id = transaction_lines_w_accounting_period.accounting_book_id\n      \n\n      \n      and exchange_transaction_period.to_subsidiary_id = exchange_reporting_period.to_subsidiary_id\n      \n  \n), \n\ntransactions_with_converted_amounts as (\n  select\n    transactions_in_every_calculation_period_w_exchange_rates.*,\n    \n    unconverted_amount * exchange_rate_transaction_period as converted_amount_using_transaction_accounting_period,\n    unconverted_amount * exchange_rate_reporting_period as converted_amount_using_reporting_month,\n    \n    case\n      when lower(accounts.account_type_id) in ('income','othincome','expense','othexpense','cogs') then true\n      else false \n        end as is_income_statement,\n    case\n      when lower(accounts.account_type_id) in ('acctrec', 'bank', 'deferexpense', 'fixedasset', 'othasset', 'othcurrasset', 'unbilledrec') then 'Asset'\n      when lower(accounts.account_type_id) in ('cogs', 'expense', 'othexpense') then 'Expense'\n      when lower(accounts.account_type_id) in ('income', 'othincome') then 'Income'\n      when lower(accounts.account_type_id) in ('acctpay', 'credcard', 'deferrevenue', 'longtermliab', 'othcurrliab') then 'Liability'\n      when lower(accounts.account_type_id) in ('equity', 'retained_earnings', 'net_income') then 'Equity'\n      when lower(accounts.account_type_id) in ('nonposting', 'stat') then 'Other'\n      else null \n        end as account_category\n  from transactions_in_every_calculation_period_w_exchange_rates\n\n  left join accounts\n    on accounts.account_id = transactions_in_every_calculation_period_w_exchange_rates.account_id \n),\n\nsurrogate_key as ( \n   -- add 'source_relation' when combining with union schema\n  \n  \n\n  select \n    *,\n    md5(cast(coalesce(cast(transaction_line_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transaction_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(reporting_accounting_period_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(to_subsidiary_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(accounting_book_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as tran_with_converted_amounts_id\n\n  from transactions_with_converted_amounts\n)\n\nselect * \nfrom surrogate_key", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"int_netsuite2__tran_with_converted_amounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:03.780505Z", "completed_at": "2024-04-29T22:48:04.445845Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:04.452848Z", "completed_at": "2024-04-29T22:48:04.452857Z"}], "thread_id": "Thread-8", "execution_time": 0.7066411972045898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.netsuite2__transaction_details", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_netsuite2__accounts as (\n\n\nwith accounts as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounts\"\n),\n\naccount_types as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__account_types\"\n),\n\njoined as (\n\n    select \n        accounts.*,\n        account_types.type_name,\n        account_types.is_balancesheet,\n        account_types.is_leftside\n\n    from accounts\n    left join account_types\n        on accounts.account_type_id = account_types.account_type_id\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__accounting_periods as (\n\n\nwith accounting_periods as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_periods\"\n),\n\naccounting_period_fiscal_calendars as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_period_fiscal_cal\"\n),\n\njoined as (\n\n    select \n        accounting_periods.*,\n        accounting_period_fiscal_calendars.fiscal_calendar_id\n\n    from accounting_periods\n    left join accounting_period_fiscal_calendars\n        on accounting_periods.accounting_period_id = accounting_period_fiscal_calendars.accounting_period_id\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__transaction_lines as (\n\n\nwith transaction_lines as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transaction_lines\"\n),\n\ntransaction_accounting_lines as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transaction_accounting_lines\"\n),\n\n\naccounting_books as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_books\"\n), \n\n\njoined as (\n\n    select \n        transaction_lines.*,\n        transaction_accounting_lines.account_id,\n\n        \n        transaction_accounting_lines.accounting_book_id,\n        accounting_books.accounting_book_name,\n        \n        \n        transaction_accounting_lines.amount,\n        transaction_accounting_lines.credit_amount,\n        transaction_accounting_lines.debit_amount,\n        transaction_accounting_lines.paid_amount,\n        transaction_accounting_lines.unpaid_amount,\n        transaction_accounting_lines.is_posting\n\n    from transaction_lines\n    left join transaction_accounting_lines\n        on transaction_lines.transaction_line_id = transaction_accounting_lines.transaction_line_id\n        and transaction_lines.transaction_id = transaction_accounting_lines.transaction_id\n        \n    \n    left join accounting_books\n        on accounting_books.accounting_book_id = transaction_accounting_lines.accounting_book_id\n\n    union all\n\n    select\n        transaction_lines.*,\n        transaction_accounting_lines.account_id,\n        accounting_books.accounting_book_id,\n        accounting_books.accounting_book_name,\n        transaction_accounting_lines.amount,\n        transaction_accounting_lines.credit_amount,\n        transaction_accounting_lines.debit_amount,\n        transaction_accounting_lines.paid_amount,\n        transaction_accounting_lines.unpaid_amount,\n        transaction_accounting_lines.is_posting\n\n    from transaction_lines\n    left join transaction_accounting_lines\n        on transaction_lines.transaction_line_id = transaction_accounting_lines.transaction_line_id\n        and transaction_lines.transaction_id = transaction_accounting_lines.transaction_id\n    left join accounting_books\n        on accounting_books.base_book_id = transaction_accounting_lines.accounting_book_id\n    where accounting_books.base_book_id is not null\n    \n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__customers as (\n\n\nwith customers as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__customers\"\n),\n\nentity_address as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__entity_address\"\n),\n\njoined as (\n\n    select \n        customers.*,\n        entity_address.city,\n        entity_address.state,\n        entity_address.zipcode,\n        entity_address.country\n\n    from customers\n    left join entity_address\n        on coalesce(customers.default_billing_address_id, customers.default_shipping_address_id) = entity_address.nkey\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__locations as (\n\n\nwith locations as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__locations\"\n),\n\nlocation_main_address as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__location_main_address\"\n),\n\njoined as (\n\n    select \n        locations.*,\n        location_main_address.city,\n        location_main_address.state,\n        location_main_address.zipcode,\n        location_main_address.country\n\n    from locations\n    left join location_main_address\n        on locations.main_address_id = location_main_address.nkey\n)\n\nselect *\nfrom joined\n), transactions_with_converted_amounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"int_netsuite2__tran_with_converted_amounts\"\n\n    \n    where _fivetran_synced_date >= \n\n\n\n    \n\n    \n\n    cast('2010-01-01' as date) + ((interval '1 day') * (-3))\n\n\n\n\n    \n),\n\naccounts as (\n    select * \n    from __dbt__cte__int_netsuite2__accounts\n),\n\naccounting_periods as (\n    select * \n    from __dbt__cte__int_netsuite2__accounting_periods\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__subsidiaries\"\n),\n\ntransaction_lines as (\n    select * \n    from __dbt__cte__int_netsuite2__transaction_lines\n),\n\ntransactions as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transactions\"\n\n    \n    where _fivetran_synced_date >= \n\n\n\n    \n\n    \n\n    cast('2010-01-01' as date) + ((interval '1 day') * (-3))\n\n\n\n\n    \n),\n\ncustomers as (\n    select * \n    from __dbt__cte__int_netsuite2__customers\n),\n\nitems as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__items\"\n),\n\nlocations as (\n    select * \n    from __dbt__cte__int_netsuite2__locations\n),\n\nvendors as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__vendors\"\n),\n\n\nvendor_categories as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__vendor_categories\"\n),\n\n\ndepartments as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__departments\"\n),\n\ncurrencies as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__currencies\"\n),\n\nclasses as (\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__classes\"\n),\n\ntransaction_details as (\n  select\n\n    \n    transaction_lines.accounting_book_id,\n    transaction_lines.accounting_book_name,\n    \n\n    \n    transactions_with_converted_amounts.to_subsidiary_id,\n    transactions_with_converted_amounts.to_subsidiary_name,\n    transactions_with_converted_amounts.to_subsidiary_currency_symbol,\n    \n    \n    transaction_lines.transaction_line_id,\n    transaction_lines.memo as transaction_memo,\n    not transaction_lines.is_posting as is_transaction_non_posting,\n    transaction_lines.is_main_line,\n    transaction_lines.is_tax_line,\n    transaction_lines.is_closed,\n    transactions.transaction_id,\n    transactions.status as transaction_status,\n    transactions.transaction_date,\n    transactions.due_date_at as transaction_due_date,\n    transactions.transaction_type as transaction_type,\n    transactions._fivetran_synced_date,\n    transactions.transaction_number,\n    coalesce(transaction_lines.entity_id, transactions.entity_id) as entity_id,\n    transactions.is_intercompany_adjustment as is_transaction_intercompany_adjustment\n\n    --The below script allows for transactions table pass through columns.\n    \n\n\n\n\n\n    --The below script allows for transaction lines table pass through columns.\n    \n\n\n\n,\n\n    accounting_periods.ending_at as accounting_period_ending,\n    accounting_periods.name as accounting_period_name,\n    accounting_periods.accounting_period_id as accounting_period_id,\n    accounting_periods.is_adjustment as is_accounting_period_adjustment,\n    accounting_periods.is_closed as is_accounting_period_closed,\n    accounts.name as account_name,\n    accounts.type_name as account_type_name,\n    accounts.account_type_id,\n    accounts.account_id as account_id,\n    accounts.account_number\n\n    --The below script allows for accounts table pass through columns.\n    \n\n\n\n,\n\n    accounts.is_leftside as is_account_leftside,\n    lower(accounts.account_type_id) = 'acctpay' as is_accounts_payable,\n    lower(accounts.account_type_id) = 'acctrec' as is_accounts_receivable,\n    accounts.is_eliminate as is_account_intercompany,\n    coalesce(parent_account.name, accounts.name) as parent_account_name,\n    lower(accounts.account_type_id) in ('expense', 'othexpense', 'deferexpense') as is_expense_account,\n    lower(accounts.account_type_id) in ('income', 'othincome') as is_income_account,\n    customers.company_name,\n    customers.city as customer_city,\n    customers.state as customer_state,\n    customers.zipcode as customer_zipcode,\n    customers.country as customer_country,\n    customers.date_first_order_at as customer_date_first_order,\n    customers.customer_external_id,\n    classes.full_name as class_full_name,\n    transaction_lines.item_id,\n    items.name as item_name,\n    items.type_name as item_type_name,\n    items.sales_description,\n    locations.name as location_name,\n    locations.city as location_city,\n    locations.country as location_country,\n    \n    vendor_categories.name as vendor_category_name,\n    \n    vendors.company_name as vendor_name,\n    vendors.create_date_at as vendor_create_date,\n    currencies.name as currency_name,\n    currencies.symbol as currency_symbol,\n    transaction_lines.department_id,\n    departments.name as department_name\n\n    --The below script allows for departments table pass through columns.\n    \n\n\n\n,\n\n    subsidiaries.subsidiary_id,\n    subsidiaries.name as subsidiary_name,\n    case\n      when lower(accounts.account_type_id) in ('income', 'othincome') then -transactions_with_converted_amounts.converted_amount_using_transaction_accounting_period\n      else transactions_with_converted_amounts.converted_amount_using_transaction_accounting_period\n        end as converted_amount,\n    case\n      when lower(accounts.account_type_id) in ('income', 'othincome') then -transaction_lines.amount\n      else transaction_lines.amount\n        end as transaction_amount\n  from transaction_lines\n\n  join transactions\n    on transactions.transaction_id = transaction_lines.transaction_id\n\n  left join transactions_with_converted_amounts\n    on transactions_with_converted_amounts.transaction_line_id = transaction_lines.transaction_line_id\n      and transactions_with_converted_amounts.transaction_id = transaction_lines.transaction_id\n      and transactions_with_converted_amounts.transaction_accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n      \n      \n      and transactions_with_converted_amounts.accounting_book_id = transaction_lines.accounting_book_id\n      \n\n  left join accounts \n    on accounts.account_id = transaction_lines.account_id\n\n  left join accounts as parent_account \n    on parent_account.account_id = accounts.parent_id\n\n  left join accounting_periods \n    on accounting_periods.accounting_period_id = transactions.accounting_period_id\n\n  left join customers \n    on customers.customer_id = coalesce(transaction_lines.entity_id, transactions.entity_id)\n  \n  left join classes\n    on classes.class_id = transaction_lines.class_id\n\n  left join items \n    on items.item_id = transaction_lines.item_id\n\n  left join locations \n    on locations.location_id = transaction_lines.location_id\n\n  left join vendors \n    on vendors.vendor_id = coalesce(transaction_lines.entity_id, transactions.entity_id)\n\n  \n  left join vendor_categories \n    on vendor_categories.vendor_category_id = vendors.vendor_category_id\n  \n\n  left join currencies \n    on currencies.currency_id = transactions.currency_id\n\n  left join departments \n    on departments.department_id = transaction_lines.department_id\n\n  join subsidiaries \n    on subsidiaries.subsidiary_id = transaction_lines.subsidiary_id\n    \n  where (accounting_periods.fiscal_calendar_id is null\n    or accounting_periods.fiscal_calendar_id  = (select fiscal_calendar_id from subsidiaries where parent_id is null))\n),\n\nsurrogate_key as ( \n    \n    \n    \n\n    select \n        *,\n        md5(cast(coalesce(cast(transaction_line_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transaction_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(to_subsidiary_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(accounting_book_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as transaction_details_id\n\n    from transaction_details\n)\n\nselect *\nfrom surrogate_key", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite2__transaction_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:03.762130Z", "completed_at": "2024-04-29T22:48:04.459274Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:04.461302Z", "completed_at": "2024-04-29T22:48:04.461306Z"}], "thread_id": "Thread-7", "execution_time": 0.7101919651031494, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.netsuite2__income_statement", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_netsuite2__accounts as (\n\n\nwith accounts as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounts\"\n),\n\naccount_types as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__account_types\"\n),\n\njoined as (\n\n    select \n        accounts.*,\n        account_types.type_name,\n        account_types.is_balancesheet,\n        account_types.is_leftside\n\n    from accounts\n    left join account_types\n        on accounts.account_type_id = account_types.account_type_id\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__accounting_periods as (\n\n\nwith accounting_periods as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_periods\"\n),\n\naccounting_period_fiscal_calendars as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_period_fiscal_cal\"\n),\n\njoined as (\n\n    select \n        accounting_periods.*,\n        accounting_period_fiscal_calendars.fiscal_calendar_id\n\n    from accounting_periods\n    left join accounting_period_fiscal_calendars\n        on accounting_periods.accounting_period_id = accounting_period_fiscal_calendars.accounting_period_id\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__transaction_lines as (\n\n\nwith transaction_lines as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transaction_lines\"\n),\n\ntransaction_accounting_lines as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__transaction_accounting_lines\"\n),\n\n\naccounting_books as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_books\"\n), \n\n\njoined as (\n\n    select \n        transaction_lines.*,\n        transaction_accounting_lines.account_id,\n\n        \n        transaction_accounting_lines.accounting_book_id,\n        accounting_books.accounting_book_name,\n        \n        \n        transaction_accounting_lines.amount,\n        transaction_accounting_lines.credit_amount,\n        transaction_accounting_lines.debit_amount,\n        transaction_accounting_lines.paid_amount,\n        transaction_accounting_lines.unpaid_amount,\n        transaction_accounting_lines.is_posting\n\n    from transaction_lines\n    left join transaction_accounting_lines\n        on transaction_lines.transaction_line_id = transaction_accounting_lines.transaction_line_id\n        and transaction_lines.transaction_id = transaction_accounting_lines.transaction_id\n        \n    \n    left join accounting_books\n        on accounting_books.accounting_book_id = transaction_accounting_lines.accounting_book_id\n\n    union all\n\n    select\n        transaction_lines.*,\n        transaction_accounting_lines.account_id,\n        accounting_books.accounting_book_id,\n        accounting_books.accounting_book_name,\n        transaction_accounting_lines.amount,\n        transaction_accounting_lines.credit_amount,\n        transaction_accounting_lines.debit_amount,\n        transaction_accounting_lines.paid_amount,\n        transaction_accounting_lines.unpaid_amount,\n        transaction_accounting_lines.is_posting\n\n    from transaction_lines\n    left join transaction_accounting_lines\n        on transaction_lines.transaction_line_id = transaction_accounting_lines.transaction_line_id\n        and transaction_lines.transaction_id = transaction_accounting_lines.transaction_id\n    left join accounting_books\n        on accounting_books.base_book_id = transaction_accounting_lines.accounting_book_id\n    where accounting_books.base_book_id is not null\n    \n\n)\n\nselect *\nfrom joined\n), transactions_with_converted_amounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"int_netsuite2__tran_with_converted_amounts\"\n\n    \n    where _fivetran_synced_date >= \n\n\n\n    \n\n    \n\n    cast('2010-01-01' as date) + ((interval '1 day') * (-3))\n\n\n\n\n    \n), \n\n--Below is only used if income statement transaction detail columns are specified dbt_project.yml file.\n\n\naccounts as (\n    select * \n    from __dbt__cte__int_netsuite2__accounts\n), \n\naccounting_periods as (\n    select * \n    from __dbt__cte__int_netsuite2__accounting_periods\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__subsidiaries\"\n),\n\ntransaction_lines as (\n    select * \n    from __dbt__cte__int_netsuite2__transaction_lines\n),\n\nclasses as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__classes\"\n),\n\nlocations as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__locations\"\n),\n\ndepartments as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__departments\"\n),\n\nincome_statement as (\n    select\n        transactions_with_converted_amounts.transaction_id,\n        transactions_with_converted_amounts.transaction_line_id,\n        transactions_with_converted_amounts._fivetran_synced_date,\n\n        \n        transactions_with_converted_amounts.accounting_book_id,\n        transactions_with_converted_amounts.accounting_book_name,\n        \n\n        \n        transactions_with_converted_amounts.to_subsidiary_id,\n        transactions_with_converted_amounts.to_subsidiary_name,\n        transactions_with_converted_amounts.to_subsidiary_currency_symbol,\n        \n\n        reporting_accounting_periods.accounting_period_id as accounting_period_id,\n        reporting_accounting_periods.ending_at as accounting_period_ending,\n        reporting_accounting_periods.name as accounting_period_name,\n        reporting_accounting_periods.is_adjustment as is_accounting_period_adjustment,\n        reporting_accounting_periods.is_closed as is_accounting_period_closed,\n        accounts.name as account_name,\n        accounts.type_name as account_type_name,\n        accounts.account_type_id,\n        accounts.account_id as account_id,\n        accounts.account_number,\n        subsidiaries.subsidiary_id,\n        subsidiaries.full_name as subsidiary_full_name,\n        subsidiaries.name as subsidiary_name\n\n        --The below script allows for accounts table pass through columns.\n        \n\n\n\n,\n\n        accounts.account_number || '-' || accounts.name as account_number_and_name,\n        classes.full_name as class_full_name\n\n        --The below script allows for accounts table pass through columns.\n        \n\n\n\n,\n\n        locations.full_name as location_full_name,\n        departments.full_name as department_full_name\n\n        --The below script allows for departments table pass through columns.\n        \n\n\n\n,\n\n        transactions_with_converted_amounts.account_category as account_category,\n        case when lower(accounts.account_type_id) = 'income' then 1\n            when lower(accounts.account_type_id) = 'cogs' then 2\n            when lower(accounts.account_type_id) = 'expense' then 3\n            when lower(accounts.account_type_id) = 'othincome' then 4\n            when lower(accounts.account_type_id) = 'othexpense' then 5\n            else null\n            end as income_statement_sort_helper\n\n        --Below is only used if income statement transaction detail columns are specified dbt_project.yml file.\n        \n\n        , -converted_amount_using_transaction_accounting_period as converted_amount\n        \n    from transactions_with_converted_amounts\n\n    join transaction_lines as transaction_lines\n        on transaction_lines.transaction_line_id = transactions_with_converted_amounts.transaction_line_id\n            and transaction_lines.transaction_id = transactions_with_converted_amounts.transaction_id\n\n            \n            and transaction_lines.accounting_book_id = transactions_with_converted_amounts.accounting_book_id\n            \n\n    left join departments \n        on departments.department_id = transaction_lines.department_id\n    \n    left join accounts \n        on accounts.account_id = transactions_with_converted_amounts.account_id\n\n    left join locations\n        on locations.location_id = transaction_lines.location_id\n\n    left join classes \n        on classes.class_id = transaction_lines.class_id\n\n    left join accounting_periods as reporting_accounting_periods \n        on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n    \n    left join subsidiaries\n        on transactions_with_converted_amounts.subsidiary_id = subsidiaries.subsidiary_id\n\n    --Below is only used if income statement transaction detail columns are specified dbt_project.yml file.\n    \n\n    where reporting_accounting_periods.fiscal_calendar_id  = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n        and transactions_with_converted_amounts.transaction_accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n        and transactions_with_converted_amounts.is_income_statement\n),\n\nsurrogate_key as ( \n    \n    \n    \n\n    select \n        *,\n        md5(cast(coalesce(cast(transaction_line_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transaction_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(accounting_period_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(account_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(to_subsidiary_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(accounting_book_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as income_statement_id\n\n    from income_statement\n)\n\nselect *\nfrom surrogate_key", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite2__income_statement\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:03.755825Z", "completed_at": "2024-04-29T22:48:04.464268Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:04.473709Z", "completed_at": "2024-04-29T22:48:04.473715Z"}], "thread_id": "Thread-4", "execution_time": 0.7344379425048828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.netsuite2__balance_sheet", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_netsuite2__accounts as (\n\n\nwith accounts as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounts\"\n),\n\naccount_types as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__account_types\"\n),\n\njoined as (\n\n    select \n        accounts.*,\n        account_types.type_name,\n        account_types.is_balancesheet,\n        account_types.is_leftside\n\n    from accounts\n    left join account_types\n        on accounts.account_type_id = account_types.account_type_id\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__accounting_periods as (\n\n\nwith accounting_periods as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_periods\"\n),\n\naccounting_period_fiscal_calendars as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__accounting_period_fiscal_cal\"\n),\n\njoined as (\n\n    select \n        accounting_periods.*,\n        accounting_period_fiscal_calendars.fiscal_calendar_id\n\n    from accounting_periods\n    left join accounting_period_fiscal_calendars\n        on accounting_periods.accounting_period_id = accounting_period_fiscal_calendars.accounting_period_id\n)\n\nselect *\nfrom joined\n), transactions_with_converted_amounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"int_netsuite2__tran_with_converted_amounts\"\n\n    \n    where _fivetran_synced_date >= \n\n\n\n    \n\n    \n\n    cast('2010-01-01' as date) + ((interval '1 day') * (-3))\n\n\n\n\n    \n), \n\n--Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n\n\naccounts as (\n    select * \n    from __dbt__cte__int_netsuite2__accounts\n), \n\naccounting_periods as (\n    select * \n    from __dbt__cte__int_netsuite2__accounting_periods\n), \n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"stg_netsuite2__subsidiaries\"\n),\n\nbalance_sheet as ( \n    select\n        transactions_with_converted_amounts.transaction_id,\n        transactions_with_converted_amounts.transaction_line_id,\n        transactions_with_converted_amounts.subsidiary_id,\n        transactions_with_converted_amounts._fivetran_synced_date,\n        subsidiaries.name as subsidiary_name,\n\n        \n        transactions_with_converted_amounts.accounting_book_id,\n        transactions_with_converted_amounts.accounting_book_name,\n        \n        \n        \n        transactions_with_converted_amounts.to_subsidiary_id,\n        transactions_with_converted_amounts.to_subsidiary_name,\n        transactions_with_converted_amounts.to_subsidiary_currency_symbol,\n        \n\n        reporting_accounting_periods.accounting_period_id as accounting_period_id,\n        reporting_accounting_periods.ending_at as accounting_period_ending,\n        reporting_accounting_periods.name as accounting_period_name,\n        reporting_accounting_periods.is_adjustment as is_accounting_period_adjustment,\n        reporting_accounting_periods.is_closed as is_accounting_period_closed,\n        transactions_with_converted_amounts.account_category as account_category,\n        case\n        when (not accounts.is_balancesheet \n                and date_trunc('year', reporting_accounting_periods.starting_at) = date_trunc('year', transaction_accounting_periods.starting_at) \n                and reporting_accounting_periods.fiscal_calendar_id = transaction_accounting_periods.fiscal_calendar_id) then 'Net Income'\n        when not accounts.is_balancesheet then 'Retained Earnings'\n        else accounts.name\n            end as account_name,\n        case\n        when (not accounts.is_balancesheet \n                and date_trunc('year', reporting_accounting_periods.starting_at) = date_trunc('year', transaction_accounting_periods.starting_at) \n                and reporting_accounting_periods.fiscal_calendar_id = transaction_accounting_periods.fiscal_calendar_id) then 'Net Income'\n        when not accounts.is_balancesheet then 'Retained Earnings'\n        when lower(accounts.special_account_type_id) = 'retearnings' then 'Retained Earnings'\n        when lower(accounts.special_account_type_id) in ('cta-e', 'cumultransadj') then 'Cumulative Translation Adjustment'\n        else accounts.type_name\n            end as account_type_name,\n        case\n        when (not accounts.is_balancesheet \n                and date_trunc('year', reporting_accounting_periods.starting_at) = date_trunc('year', transaction_accounting_periods.starting_at) \n                and reporting_accounting_periods.fiscal_calendar_id = transaction_accounting_periods.fiscal_calendar_id) then 'net_income'\n        when not accounts.is_balancesheet then 'retained_earnings'\n        when lower(accounts.special_account_type_id) = 'retearnings' then 'retained_earnings'\n        when lower(accounts.special_account_type_id) in ('cta-e', 'cumultransadj') then 'cumulative_translation_adjustment'\n        else accounts.account_type_id\n            end as account_type_id,\n        case\n        when not accounts.is_balancesheet then null\n        else accounts.account_id\n            end as account_id,\n        case\n        when not accounts.is_balancesheet then null\n        else accounts.account_number\n            end as account_number\n        \n        --The below script allows for accounts table pass through columns.\n        \n\n\n\n,\n\n        case\n        when not accounts.is_balancesheet and lower(accounts.general_rate_type) in ('historical', 'average') then -converted_amount_using_transaction_accounting_period\n        when not accounts.is_balancesheet then -converted_amount_using_reporting_month\n        when accounts.is_balancesheet and not accounts.is_leftside and lower(accounts.general_rate_type) in ('historical', 'average') then -converted_amount_using_transaction_accounting_period\n        when accounts.is_balancesheet and accounts.is_leftside and lower(accounts.general_rate_type) in ('historical', 'average') then converted_amount_using_transaction_accounting_period\n        when accounts.is_balancesheet and not accounts.is_leftside then -converted_amount_using_reporting_month\n        when accounts.is_balancesheet and accounts.is_leftside then converted_amount_using_reporting_month\n        else 0\n            end as converted_amount,\n\n        case\n        when lower(accounts.account_type_id) = 'bank' then 1\n        when lower(accounts.account_type_id) = 'acctrec' then 2\n        when lower(accounts.account_type_id) = 'unbilledrec' then 3\n        when lower(accounts.account_type_id) = 'othcurrasset' then 4\n        when lower(accounts.account_type_id) = 'fixedasset' then 5\n        when lower(accounts.account_type_id) = 'othasset' then 6\n        when lower(accounts.account_type_id) = 'deferexpense' then 7\n        when lower(accounts.account_type_id) = 'acctpay' then 8\n        when lower(accounts.account_type_id) = 'credcard' then 9\n        when lower(accounts.account_type_id) = 'othcurrliab' then 10\n        when lower(accounts.account_type_id) = 'longtermliab' then 11\n        when lower(accounts.account_type_id) = 'deferrevenue' then 12\n        when lower(accounts.special_account_type_id) = 'retearnings' then 14\n        when lower(accounts.special_account_type_id) in ('cta-e', 'cumultransadj') then 16\n        when lower(accounts.account_type_id) = 'equity' then 13\n        when (not accounts.is_balancesheet \n                and date_trunc('year', reporting_accounting_periods.starting_at) = date_trunc('year', transaction_accounting_periods.starting_at) \n                and reporting_accounting_periods.fiscal_calendar_id = transaction_accounting_periods.fiscal_calendar_id) then 15\n        when not accounts.is_balancesheet then 14\n        else null\n            end as balance_sheet_sort_helper\n\n    --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n    \n\n    from transactions_with_converted_amounts\n    \n    --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n    \n\n\n    left join accounts \n        on accounts.account_id = transactions_with_converted_amounts.account_id\n\n    left join accounting_periods as reporting_accounting_periods \n        on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n\n    left join accounting_periods as transaction_accounting_periods \n        on transaction_accounting_periods.accounting_period_id = transactions_with_converted_amounts.transaction_accounting_period_id\n\n    left join subsidiaries\n        on subsidiaries.subsidiary_id = transactions_with_converted_amounts.subsidiary_id\n\n    where reporting_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n        and transaction_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n        and (accounts.is_balancesheet\n        or transactions_with_converted_amounts.is_income_statement)\n\n    union all\n\n    select\n        transactions_with_converted_amounts.transaction_id,\n        transactions_with_converted_amounts.transaction_line_id,\n        transactions_with_converted_amounts.subsidiary_id,\n        transactions_with_converted_amounts._fivetran_synced_date,\n        subsidiaries.name as subsidiary_name,\n\n        \n        transactions_with_converted_amounts.accounting_book_id,\n        transactions_with_converted_amounts.accounting_book_name,\n        \n\n        \n        transactions_with_converted_amounts.to_subsidiary_id,\n        transactions_with_converted_amounts.to_subsidiary_name,\n        transactions_with_converted_amounts.to_subsidiary_currency_symbol,\n        \n        \n        reporting_accounting_periods.accounting_period_id as accounting_period_id,\n        reporting_accounting_periods.ending_at as accounting_period_ending,\n        reporting_accounting_periods.name as accounting_period_name,\n        reporting_accounting_periods.is_adjustment as is_accounting_period_adjustment,\n        reporting_accounting_periods.is_closed as is_accounting_period_closed,\n        'Equity' as account_category,\n        'Cumulative Translation Adjustment' as account_name,\n        'Cumulative Translation Adjustment' as account_type_name,\n        'cumulative_translation_adjustment' as account_type_id,\n        null as account_id,\n        null as account_number,\n\n        \n\n        case\n        when lower(accounts.general_rate_type) in ('historical', 'average') then converted_amount_using_transaction_accounting_period\n        else converted_amount_using_reporting_month\n            end as converted_amount,\n        16 as balance_sheet_sort_helper\n\n        --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n        \n\n    from transactions_with_converted_amounts\n\n    --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n    \n\n    left join accounts\n        on accounts.account_id = transactions_with_converted_amounts.account_id\n\n    left join accounting_periods as reporting_accounting_periods \n        on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n\n    left join subsidiaries\n        on subsidiaries.subsidiary_id = transactions_with_converted_amounts.subsidiary_id\n\n    where reporting_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n        and (accounts.is_balancesheet\n        or transactions_with_converted_amounts.is_income_statement)\n    ),\n\n    surrogate_key as ( \n    \n    \n    \n\n    select \n        *,\n        md5(cast(coalesce(cast(transaction_line_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transaction_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(accounting_period_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(account_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(to_subsidiary_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(accounting_book_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as balance_sheet_id\n\n    from balance_sheet\n)\n\nselect *\nfrom surrogate_key", "relation_name": "\"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite2__balance_sheet\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:04.466345Z", "completed_at": "2024-04-29T22:48:04.482134Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:04.495472Z", "completed_at": "2024-04-29T22:48:04.495477Z"}], "thread_id": "Thread-1", "execution_time": 0.03541994094848633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__transaction_details_transaction_details_id.a24a6eb6c0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_details_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite2__transaction_details\"\nwhere transaction_details_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:04.470580Z", "completed_at": "2024-04-29T22:48:04.482678Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:04.496441Z", "completed_at": "2024-04-29T22:48:04.496446Z"}], "thread_id": "Thread-5", "execution_time": 0.0357661247253418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__transaction_details_transaction_id.e9ee05db79", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite2__transaction_details\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:04.475538Z", "completed_at": "2024-04-29T22:48:04.488360Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:04.498497Z", "completed_at": "2024-04-29T22:48:04.498501Z"}], "thread_id": "Thread-2", "execution_time": 0.036106109619140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__transaction_details_transaction_line_id.12a67b5f36", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite2__transaction_details\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:04.478798Z", "completed_at": "2024-04-29T22:48:04.491772Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:04.498766Z", "completed_at": "2024-04-29T22:48:04.498770Z"}], "thread_id": "Thread-6", "execution_time": 0.036195993423461914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.unique_netsuite2__transaction_details_transaction_details_id.cb70f22d04", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_details_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite2__transaction_details\"\nwhere transaction_details_id is not null\ngroup by transaction_details_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:04.483287Z", "completed_at": "2024-04-29T22:48:04.496713Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:04.501907Z", "completed_at": "2024-04-29T22:48:04.501910Z"}], "thread_id": "Thread-8", "execution_time": 0.03311920166015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__income_statement_income_statement_id.4c1a7c959e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect income_statement_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite2__income_statement\"\nwhere income_statement_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:04.488632Z", "completed_at": "2024-04-29T22:48:04.497017Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:04.502162Z", "completed_at": "2024-04-29T22:48:04.502165Z"}], "thread_id": "Thread-3", "execution_time": 0.03310680389404297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__income_statement_transaction_id.0ecd59a9ef", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite2__income_statement\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:04.492311Z", "completed_at": "2024-04-29T22:48:04.498226Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:04.505761Z", "completed_at": "2024-04-29T22:48:04.505765Z"}], "thread_id": "Thread-7", "execution_time": 0.0332636833190918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__income_statement_transaction_line_id.8fdd5b1706", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite2__income_statement\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:04.502422Z", "completed_at": "2024-04-29T22:48:04.509730Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:04.523881Z", "completed_at": "2024-04-29T22:48:04.523888Z"}], "thread_id": "Thread-4", "execution_time": 0.027826309204101562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.unique_netsuite2__income_statement_income_statement_id.20a530fc68", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    income_statement_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite2__income_statement\"\nwhere income_statement_id is not null\ngroup by income_statement_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:04.510090Z", "completed_at": "2024-04-29T22:48:04.524283Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:04.526691Z", "completed_at": "2024-04-29T22:48:04.526694Z"}], "thread_id": "Thread-1", "execution_time": 0.02244710922241211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__balance_sheet_balance_sheet_id.0e299c6c01", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect balance_sheet_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite2__balance_sheet\"\nwhere balance_sheet_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:04.513962Z", "completed_at": "2024-04-29T22:48:04.524610Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:04.527165Z", "completed_at": "2024-04-29T22:48:04.527170Z"}], "thread_id": "Thread-5", "execution_time": 0.02198314666748047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__balance_sheet_transaction_id.4e0a408da1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite2__balance_sheet\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:04.518285Z", "completed_at": "2024-04-29T22:48:04.525470Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:04.527410Z", "completed_at": "2024-04-29T22:48:04.527413Z"}], "thread_id": "Thread-2", "execution_time": 0.020415067672729492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__balance_sheet_transaction_line_id.dd5f702ec9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite2__balance_sheet\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-29T22:48:04.521042Z", "completed_at": "2024-04-29T22:48:04.525960Z"}, {"name": "execute", "started_at": "2024-04-29T22:48:04.528131Z", "completed_at": "2024-04-29T22:48:04.528134Z"}], "thread_id": "Thread-6", "execution_time": 0.020569801330566406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.unique_netsuite2__balance_sheet_balance_sheet_id.8bb14ebf4a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    balance_sheet_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_25_netsuite\".\"netsuite2__balance_sheet\"\nwhere balance_sheet_id is not null\ngroup by balance_sheet_id\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 9.853172063827515, "args": {"select": [], "show_resource_report": false, "version_check": true, "vars": {}, "use_colors": true, "which": "generate", "write_json": true, "indirect_selection": "eager", "populate_cache": true, "print": true, "static_parser": true, "printer_width": 80, "partial_parse": true, "invocation_command": "dbt docs generate", "log_level_file": "debug", "log_file_max_bytes": 10485760, "compile": true, "warn_error_options": {"include": [], "exclude": []}, "log_format_file": "debug", "partial_parse_file_diff": true, "defer": false, "quiet": false, "send_anonymous_usage_stats": true, "empty_catalog": false, "project_dir": "/Users/catherinefritz/Documents/dbt_packages/netsuite/dbt_netsuite/integration_tests", "exclude": [], "log_format": "default", "strict_mode": false, "log_path": "/Users/catherinefritz/Documents/dbt_packages/netsuite/dbt_netsuite/integration_tests/logs", "log_level": "info", "enable_legacy_logger": false, "use_colors_file": true, "profiles_dir": "/Users/catherinefritz/.dbt", "favor_state": false, "static": false, "macro_debugging": false, "cache_selected_only": false, "introspect": true}}