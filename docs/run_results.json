{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.18", "generated_at": "2024-09-05T21:07:42.253715Z", "invocation_id": "92cdc9cd-5a62-4109-99b0-ff77ee43b0e4", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.602253Z", "completed_at": "2024-09-05T21:07:37.617626Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.619275Z", "completed_at": "2024-09-05T21:07:37.619296Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02090597152709961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__account_types_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_account_type_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__account_types_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.608949Z", "completed_at": "2024-09-05T21:07:37.618085Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.620183Z", "completed_at": "2024-09-05T21:07:37.620186Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0210721492767334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_accounting_book_sub_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_book_subsidiaries_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.612014Z", "completed_at": "2024-09-05T21:07:37.618650Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.621248Z", "completed_at": "2024-09-05T21:07:37.621251Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.021600008010864258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_books_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_accounting_book_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_books_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.615083Z", "completed_at": "2024-09-05T21:07:37.619641Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.622367Z", "completed_at": "2024-09-05T21:07:37.622374Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02235889434814453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_accounting_period_fiscal_cal_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_period_fiscal_cal_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.626232Z", "completed_at": "2024-09-05T21:07:37.638738Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.640514Z", "completed_at": "2024-09-05T21:07:37.640519Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018280982971191406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_periods_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_accounting_period_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_periods_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.629791Z", "completed_at": "2024-09-05T21:07:37.639161Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.641012Z", "completed_at": "2024-09-05T21:07:37.641015Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01782393455505371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounts_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_account_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounts_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.632550Z", "completed_at": "2024-09-05T21:07:37.639757Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.642014Z", "completed_at": "2024-09-05T21:07:37.642017Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017914772033691406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__classes_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_classification_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__classes_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.635392Z", "completed_at": "2024-09-05T21:07:37.640262Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.642767Z", "completed_at": "2024-09-05T21:07:37.642770Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015164852142333984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_consolidated_exchange_rate_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__consolidated_exchange_rates_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.647374Z", "completed_at": "2024-09-05T21:07:37.658260Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.659903Z", "completed_at": "2024-09-05T21:07:37.659908Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016446828842163086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__currencies_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_currency_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__currencies_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.650300Z", "completed_at": "2024-09-05T21:07:37.658647Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.660399Z", "completed_at": "2024-09-05T21:07:37.660403Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01651310920715332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__customers_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_customer_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__customers_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.653131Z", "completed_at": "2024-09-05T21:07:37.659202Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.661448Z", "completed_at": "2024-09-05T21:07:37.661451Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016675710678100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__departments_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_department_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__departments_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.655694Z", "completed_at": "2024-09-05T21:07:37.659660Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.662201Z", "completed_at": "2024-09-05T21:07:37.662204Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01669907569885254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__entities_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_entities_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__entities_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.666437Z", "completed_at": "2024-09-05T21:07:37.707566Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.709300Z", "completed_at": "2024-09-05T21:07:37.709305Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04648399353027344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__entity_address_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_entity_address_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__entity_address_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.699363Z", "completed_at": "2024-09-05T21:07:37.707982Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.709564Z", "completed_at": "2024-09-05T21:07:37.709567Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04633903503417969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__items_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_item_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__items_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.702232Z", "completed_at": "2024-09-05T21:07:37.708783Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.711310Z", "completed_at": "2024-09-05T21:07:37.711313Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.047100067138671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__jobs_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_job_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__jobs_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.704989Z", "completed_at": "2024-09-05T21:07:37.709030Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.711574Z", "completed_at": "2024-09-05T21:07:37.711577Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.047006845474243164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__location_main_address_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_location_main_address_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__location_main_address_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.715953Z", "completed_at": "2024-09-05T21:07:37.727294Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.728703Z", "completed_at": "2024-09-05T21:07:37.728708Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016452789306640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__locations_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_location_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__locations_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.718592Z", "completed_at": "2024-09-05T21:07:37.727653Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.729211Z", "completed_at": "2024-09-05T21:07:37.729214Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016793012619018555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__subsidiaries_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_subsidiary_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__subsidiaries_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.722345Z", "completed_at": "2024-09-05T21:07:37.728428Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.730904Z", "completed_at": "2024-09-05T21:07:37.730907Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016982078552246094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__transaction_accounting_lines_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_tran_acct_line_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transaction_accounting_lines_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.724880Z", "completed_at": "2024-09-05T21:07:37.728945Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.731490Z", "completed_at": "2024-09-05T21:07:37.731493Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01756000518798828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__transaction_lines_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_transaction_line_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transaction_lines_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.738124Z", "completed_at": "2024-09-05T21:07:37.746840Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.748492Z", "completed_at": "2024-09-05T21:07:37.748497Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016124963760375977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__vendor_categories_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_vendor_category_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__vendor_categories_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.735252Z", "completed_at": "2024-09-05T21:07:37.747096Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.748752Z", "completed_at": "2024-09-05T21:07:37.748755Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017550230026245117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__transactions_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_transaction_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transactions_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.743625Z", "completed_at": "2024-09-05T21:07:37.747976Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.750366Z", "completed_at": "2024-09-05T21:07:37.750369Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013873815536499023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__accounting_books_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_accounting_books_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounting_books_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.741219Z", "completed_at": "2024-09-05T21:07:37.748214Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.750625Z", "completed_at": "2024-09-05T21:07:37.750629Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017193078994750977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__vendors_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite2_vendor_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__vendors_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.757363Z", "completed_at": "2024-09-05T21:07:37.765243Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.765748Z", "completed_at": "2024-09-05T21:07:37.765754Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013438940048217773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__accounts_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_accounts_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounts_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.754903Z", "completed_at": "2024-09-05T21:07:37.770487Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.772411Z", "completed_at": "2024-09-05T21:07:37.772416Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.021221160888671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__accounting_periods_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_accounting_periods_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounting_periods_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.760281Z", "completed_at": "2024-09-05T21:07:37.770824Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.772691Z", "completed_at": "2024-09-05T21:07:37.772694Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019916057586669922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__classes_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_classes_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__classes_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.762780Z", "completed_at": "2024-09-05T21:07:37.771138Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.773167Z", "completed_at": "2024-09-05T21:07:37.773170Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020285367965698242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__consolidated_exchange_rates_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_consolidated_exchange_rates_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__consolidated_exchange_rates_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.767313Z", "completed_at": "2024-09-05T21:07:37.771885Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.774392Z", "completed_at": "2024-09-05T21:07:37.774395Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00910186767578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__currencies_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_currencies_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__currencies_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.781551Z", "completed_at": "2024-09-05T21:07:37.788877Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.790154Z", "completed_at": "2024-09-05T21:07:37.790158Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014453649520874023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__departments_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_departments_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__departments_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.778865Z", "completed_at": "2024-09-05T21:07:37.789166Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.790609Z", "completed_at": "2024-09-05T21:07:37.790611Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015490055084228516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__customers_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_customers_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__customers_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.784132Z", "completed_at": "2024-09-05T21:07:37.789926Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.792278Z", "completed_at": "2024-09-05T21:07:37.792281Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016173124313354492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__expense_accounts_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_expense_accounts_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__expense_accounts_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.786492Z", "completed_at": "2024-09-05T21:07:37.790375Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.792892Z", "completed_at": "2024-09-05T21:07:37.792896Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016423940658569336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__income_accounts_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_income_accounts_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__income_accounts_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.800864Z", "completed_at": "2024-09-05T21:07:37.808786Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.810441Z", "completed_at": "2024-09-05T21:07:37.810451Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016381263732910156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__locations_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_locations_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__locations_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.797041Z", "completed_at": "2024-09-05T21:07:37.809052Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.810931Z", "completed_at": "2024-09-05T21:07:37.810933Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.018232107162475586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__items_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_items_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__items_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.803823Z", "completed_at": "2024-09-05T21:07:37.809704Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.811907Z", "completed_at": "2024-09-05T21:07:37.811910Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01675891876220703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__subsidiaries_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_subsidiaries_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__subsidiaries_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.806265Z", "completed_at": "2024-09-05T21:07:37.810181Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.812667Z", "completed_at": "2024-09-05T21:07:37.812671Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013778209686279297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__transaction_lines_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_transaction_lines_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__transaction_lines_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.826375Z", "completed_at": "2024-09-05T21:07:37.827368Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.829148Z", "completed_at": "2024-09-05T21:07:37.829155Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013501882553100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_account_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.817311Z", "completed_at": "2024-09-05T21:07:37.827644Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.829470Z", "completed_at": "2024-09-05T21:07:37.829474Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01631617546081543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__transactions_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_transactions_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__transactions_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.820328Z", "completed_at": "2024-09-05T21:07:37.827958Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.830003Z", "completed_at": "2024-09-05T21:07:37.830005Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01633596420288086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__vendor_types_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_vendor_types_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__vendor_types_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.823880Z", "completed_at": "2024-09-05T21:07:37.828661Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.831224Z", "completed_at": "2024-09-05T21:07:37.831227Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016417980194091797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__vendors_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"netsuite_integration_tests_5\".\"netsuite_vendors_data\"", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__vendors_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.835724Z", "completed_at": "2024-09-05T21:07:37.836818Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.842437Z", "completed_at": "2024-09-05T21:07:37.842442Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010336160659790039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_account_type_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.837124Z", "completed_at": "2024-09-05T21:07:37.838045Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.842703Z", "completed_at": "2024-09-05T21:07:37.842706Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010441064834594727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_accounting_book_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.838557Z", "completed_at": "2024-09-05T21:07:37.839476Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.843193Z", "completed_at": "2024-09-05T21:07:37.843195Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010540962219238281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_accounting_book_sub_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.840221Z", "completed_at": "2024-09-05T21:07:37.841941Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.844381Z", "completed_at": "2024-09-05T21:07:37.844384Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010626792907714844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_accounting_period_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.848609Z", "completed_at": "2024-09-05T21:07:37.849660Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.854272Z", "completed_at": "2024-09-05T21:07:37.854276Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009034872055053711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_accounting_period_fiscal_cal_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.849940Z", "completed_at": "2024-09-05T21:07:37.850827Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.854523Z", "completed_at": "2024-09-05T21:07:37.854526Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009194135665893555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_classification_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.851288Z", "completed_at": "2024-09-05T21:07:37.852141Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.854968Z", "completed_at": "2024-09-05T21:07:37.854971Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009360313415527344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_consolidated_exchange_rate_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.852856Z", "completed_at": "2024-09-05T21:07:37.853770Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.856222Z", "completed_at": "2024-09-05T21:07:37.856225Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009564876556396484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_currency_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.860480Z", "completed_at": "2024-09-05T21:07:37.862303Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.866901Z", "completed_at": "2024-09-05T21:07:37.866905Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009826183319091797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_customer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.862594Z", "completed_at": "2024-09-05T21:07:37.863479Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.867134Z", "completed_at": "2024-09-05T21:07:37.867137Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009891748428344727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_department_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.863960Z", "completed_at": "2024-09-05T21:07:37.864830Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.867579Z", "completed_at": "2024-09-05T21:07:37.867581Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009965896606445312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_entities_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.865545Z", "completed_at": "2024-09-05T21:07:37.866433Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.868729Z", "completed_at": "2024-09-05T21:07:37.868733Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010119199752807617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_entity_address_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.872836Z", "completed_at": "2024-09-05T21:07:37.873883Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.879328Z", "completed_at": "2024-09-05T21:07:37.879333Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0098876953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.874179Z", "completed_at": "2024-09-05T21:07:37.875067Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.879581Z", "completed_at": "2024-09-05T21:07:37.879583Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009977102279663086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_job_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.875557Z", "completed_at": "2024-09-05T21:07:37.877237Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.880034Z", "completed_at": "2024-09-05T21:07:37.880036Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010074138641357422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_location_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.877958Z", "completed_at": "2024-09-05T21:07:37.878840Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.881212Z", "completed_at": "2024-09-05T21:07:37.881215Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010324954986572266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_location_main_address_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.885702Z", "completed_at": "2024-09-05T21:07:37.886626Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.892004Z", "completed_at": "2024-09-05T21:07:37.892009Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009945154190063477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_subsidiary_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.886875Z", "completed_at": "2024-09-05T21:07:37.887743Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.892270Z", "completed_at": "2024-09-05T21:07:37.892272Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010008811950683594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_tran_acct_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.888218Z", "completed_at": "2024-09-05T21:07:37.889127Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.892722Z", "completed_at": "2024-09-05T21:07:37.892725Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01001286506652832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_transaction_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.889831Z", "completed_at": "2024-09-05T21:07:37.891517Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.893884Z", "completed_at": "2024-09-05T21:07:37.893887Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010162830352783203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_transaction_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.897965Z", "completed_at": "2024-09-05T21:07:37.899012Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.903557Z", "completed_at": "2024-09-05T21:07:37.903561Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008875846862792969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_vendor_category_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.899280Z", "completed_at": "2024-09-05T21:07:37.900172Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.903795Z", "completed_at": "2024-09-05T21:07:37.903797Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008960723876953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite2_vendor_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.900663Z", "completed_at": "2024-09-05T21:07:37.901567Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.904226Z", "completed_at": "2024-09-05T21:07:37.904228Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009070158004760742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_accounting_books_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.902239Z", "completed_at": "2024-09-05T21:07:37.903096Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.905347Z", "completed_at": "2024-09-05T21:07:37.905350Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009251117706298828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_accounting_periods_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.909437Z", "completed_at": "2024-09-05T21:07:37.910441Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.915692Z", "completed_at": "2024-09-05T21:07:37.915696Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009627103805541992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_accounts_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.910695Z", "completed_at": "2024-09-05T21:07:37.912339Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.915932Z", "completed_at": "2024-09-05T21:07:37.915934Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009716987609863281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_classes_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.912802Z", "completed_at": "2024-09-05T21:07:37.913673Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.916373Z", "completed_at": "2024-09-05T21:07:37.916376Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00980997085571289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_consolidated_exchange_rates_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.914347Z", "completed_at": "2024-09-05T21:07:37.915230Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.917572Z", "completed_at": "2024-09-05T21:07:37.917574Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009989023208618164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_currencies_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.921699Z", "completed_at": "2024-09-05T21:07:37.922699Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.928116Z", "completed_at": "2024-09-05T21:07:37.928120Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00979304313659668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_customers_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.922957Z", "completed_at": "2024-09-05T21:07:37.923812Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.928359Z", "completed_at": "2024-09-05T21:07:37.928362Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009895086288452148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_departments_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.924288Z", "completed_at": "2024-09-05T21:07:37.926010Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.928803Z", "completed_at": "2024-09-05T21:07:37.928806Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009992837905883789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_expense_accounts_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.926754Z", "completed_at": "2024-09-05T21:07:37.927642Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.929961Z", "completed_at": "2024-09-05T21:07:37.929964Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010124683380126953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_income_accounts_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.934490Z", "completed_at": "2024-09-05T21:07:37.935658Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.940801Z", "completed_at": "2024-09-05T21:07:37.940806Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01040196418762207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_items_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.935939Z", "completed_at": "2024-09-05T21:07:37.936878Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.941132Z", "completed_at": "2024-09-05T21:07:37.941136Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010575056076049805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_locations_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.937384Z", "completed_at": "2024-09-05T21:07:37.938270Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.941694Z", "completed_at": "2024-09-05T21:07:37.941698Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01061105728149414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_subsidiaries_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.938977Z", "completed_at": "2024-09-05T21:07:37.940074Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.943079Z", "completed_at": "2024-09-05T21:07:37.943082Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010611772537231445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_transaction_lines_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.947367Z", "completed_at": "2024-09-05T21:07:37.949469Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.959312Z", "completed_at": "2024-09-05T21:07:37.959317Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01540994644165039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_transactions_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.949771Z", "completed_at": "2024-09-05T21:07:37.950644Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.959580Z", "completed_at": "2024-09-05T21:07:37.959582Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015489816665649414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_vendor_types_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.951130Z", "completed_at": "2024-09-05T21:07:37.951992Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:37.960095Z", "completed_at": "2024-09-05T21:07:37.960097Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015548229217529297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_integration_tests.netsuite_vendors_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.952667Z", "completed_at": "2024-09-05T21:07:38.213414Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:38.213965Z", "completed_at": "2024-09-05T21:07:38.213972Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2975471019744873, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__account_types", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__account_types_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    balancesheet\n    \n as \n    \n    balancesheet\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    defaultcashflowratetype\n    \n as \n    \n    defaultcashflowratetype\n    \n, \n    \n    \n    defaultgeneralratetype\n    \n as \n    \n    defaultgeneralratetype\n    \n, \n    \n    \n    eliminationalgo\n    \n as \n    \n    eliminationalgo\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    includeinrevaldefault\n    \n as \n    \n    includeinrevaldefault\n    \n, \n    \n    \n    internalid\n    \n as \n    \n    internalid\n    \n, \n    \n    \n        \n            \n            \"left\"\n            \n        \n    \n as \n    \n        \n            \n            \"left\"\n            \n        \n    \n, \n    \n    \n    longname\n    \n as \n    \n    longname\n    \n, \n    \n    \n    seqnum\n    \n as \n    \n    seqnum\n    \n, \n    \n    \n    usercanchangerevaloption\n    \n as \n    \n    usercanchangerevaloption\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted,\n        _fivetran_synced,\n        id as account_type_id,\n        balancesheet = 'T' as is_balancesheet,\"left\"= 'T' as is_leftside,\n        longname as type_name\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__account_types\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.964505Z", "completed_at": "2024-09-05T21:07:38.222175Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:38.222654Z", "completed_at": "2024-09-05T21:07:38.222657Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.288222074508667, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_book_subsidiaries_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accountingbook\n    \n as \n    \n    accountingbook\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        _fivetran_synced,\n        accountingbook as accounting_book_id,\n        status,\n        subsidiary as subsidiary_id\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_book_subsidiaries\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.969384Z", "completed_at": "2024-09-05T21:07:38.242202Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:38.242717Z", "completed_at": "2024-09-05T21:07:38.242721Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3054671287536621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_books", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_books_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    basebook\n    \n as \n    \n    basebook\n    \n, \n    cast(null as TEXT) as \n    \n    contingentrevenuehandling\n    \n , \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    effectiveperiod\n    \n as \n    \n    effectiveperiod\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isadjustmentonly\n    \n as \n    \n    isadjustmentonly\n    \n, \n    \n    \n    isconsolidated\n    \n as \n    \n    isconsolidated\n    \n, \n    \n    \n    isprimary\n    \n as \n    \n    isprimary\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    subsidiariesstring\n    \n as \n    \n    subsidiariesstring\n    \n, \n    cast(null as TEXT) as \n    \n    twosteprevenueallocation\n    \n , \n    cast(null as TEXT) as \n    \n    unbilledreceivablegrouping\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as accounting_book_id,\n        name as accounting_book_name,\n        basebook as base_book_id,\n        effectiveperiod as effective_period_id,\n        isadjustmentonly = 'T' as is_adjustment_only,\n        isconsolidated = 'T' as is_consolidated,\n        contingentrevenuehandling as is_contingent_revenue_handling,\n        isprimary = 'T' as is_primary,\n        twosteprevenueallocation as is_two_step_revenue_allocation\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_books\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:37.973638Z", "completed_at": "2024-09-05T21:07:38.243196Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:38.243705Z", "completed_at": "2024-09-05T21:07:38.243708Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.31158995628356934, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_period_fiscal_cal_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accountingperiod\n    \n as \n    \n    accountingperiod\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    fiscalcalendar\n    \n as \n    \n    fiscalcalendar\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        _fivetran_synced,\n        accountingperiod as accounting_period_id,\n        fiscalcalendar as fiscal_calendar_id,\n        parent as parent_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_period_fiscal_cal\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:38.245684Z", "completed_at": "2024-09-05T21:07:38.495577Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:38.496086Z", "completed_at": "2024-09-05T21:07:38.496092Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2769620418548584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounting_periods", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_periods_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    alllocked\n    \n as \n    \n    alllocked\n    \n, \n    \n    \n    allownonglchanges\n    \n as \n    \n    allownonglchanges\n    \n, \n    \n    \n    aplocked\n    \n as \n    \n    aplocked\n    \n, \n    \n    \n    arlocked\n    \n as \n    \n    arlocked\n    \n, \n    \n    \n    closed\n    \n as \n    \n    closed\n    \n, \n    \n    \n    closedondate\n    \n as \n    \n    closedondate\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    enddate\n    \n as \n    \n    enddate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isadjust\n    \n as \n    \n    isadjust\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    isposting\n    \n as \n    \n    isposting\n    \n, \n    \n    \n    isquarter\n    \n as \n    \n    isquarter\n    \n, \n    \n    \n    isyear\n    \n as \n    \n    isyear\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    periodname\n    \n as \n    \n    periodname\n    \n, \n    \n    \n    startdate\n    \n as \n    \n    startdate\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as accounting_period_id,\n        parent as parent_id, \n        periodname as name,\n        startdate as starting_at,\n        enddate as ending_at,\n        closedondate as closed_at,\n        isquarter = 'T' as is_quarter,\n        isyear = 'T' as is_year,\n        isadjust = 'T' as is_adjustment,\n        isposting = 'T' as is_posting,\n        closed = 'T' as is_closed,\n        alllocked = 'T' as is_all_locked,\n        arlocked = 'T' as is_ar_locked,\n        aplocked = 'T' as is_ap_locked\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_periods\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:38.269827Z", "completed_at": "2024-09-05T21:07:38.520961Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:38.522297Z", "completed_at": "2024-09-05T21:07:38.522300Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.27751588821411133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__classes", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__classes_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as class_id,\n        externalid as class_external_id,\n        name,\n        fullname as full_name,\n        isinactive = 'T' as is_inactive,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your classes_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__classes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:38.252399Z", "completed_at": "2024-09-05T21:07:38.521467Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:38.523407Z", "completed_at": "2024-09-05T21:07:38.523410Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.30124998092651367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__accounts", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounts_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    acctnumber\n    \n as \n    \n    acctnumber\n    \n, \n    \n    \n    accttype\n    \n as \n    \n    accttype\n    \n, \n    \n    \n    sspecacct\n    \n as \n    \n    sspecacct\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    deferralacct\n    \n as \n    \n    deferralacct\n    \n, \n    \n    \n    cashflowrate\n    \n as \n    \n    cashflowrate\n    \n, \n    \n    \n    generalrate\n    \n as \n    \n    generalrate\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    class\n    \n as \n    \n    class\n    \n, \n    \n    \n    department\n    \n as \n    \n    department\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    includechildren\n    \n as \n    \n    includechildren\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    issummary\n    \n as \n    \n    issummary\n    \n, \n    \n    \n    eliminate\n    \n as \n    \n    eliminate\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as account_id, \n        externalid as account_external_id,\n        parent as parent_id,\n        acctnumber as account_number,\n        accttype as account_type_id,\n        sspecacct as special_account_type_id,\n        fullname as name,\n        description as account_description,\n        deferralacct as deferral_account_id,\n        cashflowrate as cash_flow_rate_type,\n        generalrate as general_rate_type,\n        currency as currency_id,\n        class as class_id,\n        department as department_id,\n        location as location_id,\n        includechildren = 'T' as is_including_child_subs,\n        isinactive = 'T' as is_inactive,\n        issummary = 'T' as is_summary,\n        eliminate = 'T' as is_eliminate,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your accounts_pass_through_columns variable into the staging model\n        \n\n\n\n\n        \n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:38.276281Z", "completed_at": "2024-09-05T21:07:38.571474Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:38.571989Z", "completed_at": "2024-09-05T21:07:38.571995Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.32393789291381836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__consolidated_exchange_rates_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    averagerate\n    \n as \n    \n    averagerate\n    \n, \n    \n    \n    currentrate\n    \n as \n    \n    currentrate\n    \n, \n    \n    \n    fromcurrency\n    \n as \n    \n    fromcurrency\n    \n, \n    \n    \n    fromsubsidiary\n    \n as \n    \n    fromsubsidiary\n    \n, \n    \n    \n    historicalrate\n    \n as \n    \n    historicalrate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    accountingbook\n    \n as \n    \n    accountingbook\n    \n, \n    \n    \n    postingperiod\n    \n as \n    \n    postingperiod\n    \n, \n    \n    \n    tocurrency\n    \n as \n    \n    tocurrency\n    \n, \n    \n    \n    tosubsidiary\n    \n as \n    \n    tosubsidiary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as consolidated_exchange_rate_id,\n        postingperiod as accounting_period_id,\n        fromcurrency as from_currency_id,\n        fromsubsidiary as from_subsidiary_id,\n        tocurrency as to_currency_id,\n        tosubsidiary as to_subsidiary_id,\n        accountingbook as accounting_book_id,\n        currentrate as current_rate, \n        averagerate as average_rate,\n        historicalrate as historical_rate\n\n        --The below macro adds the fields defined within your consolidated_exchange_rates_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__consolidated_exchange_rates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:38.524547Z", "completed_at": "2024-09-05T21:07:38.785829Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:38.786355Z", "completed_at": "2024-09-05T21:07:38.786362Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2901468276977539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__currencies", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__currencies_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    currencyprecision\n    \n as \n    \n    currencyprecision\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    displaysymbol\n    \n as \n    \n    displaysymbol\n    \n, \n    \n    \n    exchangerate\n    \n as \n    \n    exchangerate\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    fxrateupdatetimezone\n    \n as \n    \n    fxrateupdatetimezone\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    includeinfxrateupdates\n    \n as \n    \n    includeinfxrateupdates\n    \n, \n    \n    \n    isbasecurrency\n    \n as \n    \n    isbasecurrency\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    overridecurrencyformat\n    \n as \n    \n    overridecurrencyformat\n    \n, \n    \n    \n    symbol\n    \n as \n    \n    symbol\n    \n, \n    \n    \n    symbolplacement\n    \n as \n    \n    symbolplacement\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as currency_id,\n        name,\n        symbol\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__currencies\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:38.554262Z", "completed_at": "2024-09-05T21:07:38.814144Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:38.815944Z", "completed_at": "2024-09-05T21:07:38.815950Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.294252872467041, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__departments", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__departments_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as department_id,\n        parent as parent_id,\n        name,\n        fullname as full_name,\n        subsidiary as subsidiary_id,\n        isinactive = 'T' as is_inactive,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your departments_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__departments\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:38.547907Z", "completed_at": "2024-09-05T21:07:38.814738Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:38.816469Z", "completed_at": "2024-09-05T21:07:38.816472Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.30117297172546387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__customers", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__customers_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    entityid\n    \n as \n    \n    entityid\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    isperson\n    \n as \n    \n    isperson\n    \n, \n    \n    \n    companyname\n    \n as \n    \n    companyname\n    \n, \n    \n    \n    firstname\n    \n as \n    \n    firstname\n    \n, \n    \n    \n    lastname\n    \n as \n    \n    lastname\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    defaultbillingaddress\n    \n as \n    \n    defaultbillingaddress\n    \n, \n    \n    \n    defaultshippingaddress\n    \n as \n    \n    defaultshippingaddress\n    \n, \n    \n    \n    receivablesaccount\n    \n as \n    \n    receivablesaccount\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    firstorderdate\n    \n as \n    \n    firstorderdate\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as customer_id,\n        entityid as entity_id,\n        externalid as customer_external_id,\n        parent as parent_id,\n        isperson = 'T' as is_person,\n        companyname as company_name,\n        firstname as first_name,\n        lastname as last_name,\n        email as email_address,\n        phone as phone_number,\n        defaultbillingaddress as default_billing_address_id,\n        defaultshippingaddress as default_shipping_address_id,\n        receivablesaccount as receivables_account_id,\n        currency as currency_id,\n        firstorderdate as date_first_order_at\n\n        --The below macro adds the fields defined within your customers_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__customers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:38.601026Z", "completed_at": "2024-09-05T21:07:38.866868Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:38.868390Z", "completed_at": "2024-09-05T21:07:38.868396Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.293776273727417, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__entities", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__entities_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    contact\n    \n as \n    \n    contact\n    \n, \n    \n    \n    customer\n    \n as \n    \n    customer\n    \n, \n    \n    \n    employee\n    \n as \n    \n    employee\n    \n, \n    \n    \n    entitytitle\n    \n as \n    \n    entitytitle\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isperson\n    \n as \n    \n    isperson\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    project\n    \n as \n    \n    project\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    vendor\n    \n as \n    \n    vendor\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as entity_id,\n        parent as parent_id,\n        entitytitle as entity_name,\n        type as entity_type,\n        isperson = 'T' as is_person,\n        contact as contact_id,\n        customer as customer_id,\n        employee as employee_id,\n        project as job_id,\n        vendor as vendor_id\n\n        --The below macro adds the fields defined within your entities_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__entities\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:38.816963Z", "completed_at": "2024-09-05T21:07:39.087304Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:39.087842Z", "completed_at": "2024-09-05T21:07:39.087848Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.29875993728637695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__entity_address", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__entity_address_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    addr1\n    \n as \n    \n    addr1\n    \n, \n    \n    \n    addr2\n    \n as \n    \n    addr2\n    \n, \n    \n    \n    addr3\n    \n as \n    \n    addr3\n    \n, \n    \n    \n    addressee\n    \n as \n    \n    addressee\n    \n, \n    \n    \n    addrphone\n    \n as \n    \n    addrphone\n    \n, \n    \n    \n    addrtext\n    \n as \n    \n    addrtext\n    \n, \n    \n    \n    attention\n    \n as \n    \n    attention\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    dropdownstate\n    \n as \n    \n    dropdownstate\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    nkey\n    \n as \n    \n    nkey\n    \n, \n    \n    \n    override\n    \n as \n    \n    override\n    \n, \n    \n    \n    recordowner\n    \n as \n    \n    recordowner\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        addr1,\n        addr2,\n        addr3,\n        addressee,\n        addrtext as full_address,\n        city,\n        country,\n        coalesce(state, dropdownstate) as state,\n        nkey,\n        zip as zipcode\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__entity_address\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:38.862495Z", "completed_at": "2024-09-05T21:07:39.230049Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:39.230770Z", "completed_at": "2024-09-05T21:07:39.230777Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3993837833404541, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__jobs", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__jobs_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accountnumber\n    \n as \n    \n    accountnumber\n    \n, \n    \n    \n    actualtime\n    \n as \n    \n    actualtime\n    \n, \n    \n    \n    allowallresourcesfortasks\n    \n as \n    \n    allowallresourcesfortasks\n    \n, \n    \n    \n    allowexpenses\n    \n as \n    \n    allowexpenses\n    \n, \n    \n    \n    allowtime\n    \n as \n    \n    allowtime\n    \n, \n    \n    \n    alternatecontact\n    \n as \n    \n    alternatecontact\n    \n, \n    \n    \n    altname\n    \n as \n    \n    altname\n    \n, \n    \n    \n    billingschedule\n    \n as \n    \n    billingschedule\n    \n, \n    \n    \n    calculatedenddate\n    \n as \n    \n    calculatedenddate\n    \n, \n    \n    \n    calculatedenddatebaseline\n    \n as \n    \n    calculatedenddatebaseline\n    \n, \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    comments\n    \n as \n    \n    comments\n    \n, \n    \n    \n    companyname\n    \n as \n    \n    companyname\n    \n, \n    \n    \n    contact\n    \n as \n    \n    contact\n    \n, \n    \n    \n    contactlist\n    \n as \n    \n    contactlist\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    currencyprecision\n    \n as \n    \n    currencyprecision\n    \n, \n    \n    \n    custentity1\n    \n as \n    \n    custentity1\n    \n, \n    \n    \n    custentity4\n    \n as \n    \n    custentity4\n    \n, \n    \n    \n    custentity5\n    \n as \n    \n    custentity5\n    \n, \n    \n    \n    customer\n    \n as \n    \n    customer\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    datecreated\n    \n as \n    \n    datecreated\n    \n, \n    \n    \n    defaultbillingaddress\n    \n as \n    \n    defaultbillingaddress\n    \n, \n    \n    \n    defaultshippingaddress\n    \n as \n    \n    defaultshippingaddress\n    \n, \n    \n    \n    enddate\n    \n as \n    \n    enddate\n    \n, \n    \n    \n    entityid\n    \n as \n    \n    entityid\n    \n, \n    \n    \n    entitynumber\n    \n as \n    \n    entitynumber\n    \n, \n    \n    \n    entitystatus\n    \n as \n    \n    entitystatus\n    \n, \n    \n    \n    entitytitle\n    \n as \n    \n    entitytitle\n    \n, \n    \n    \n    estimatedcost\n    \n as \n    \n    estimatedcost\n    \n, \n    \n    \n    estimatedgrossprofit\n    \n as \n    \n    estimatedgrossprofit\n    \n, \n    \n    \n    estimatedgrossprofitpercent\n    \n as \n    \n    estimatedgrossprofitpercent\n    \n, \n    \n    \n    estimatedlaborcost\n    \n as \n    \n    estimatedlaborcost\n    \n, \n    \n    \n    estimatedlaborcostbaseline\n    \n as \n    \n    estimatedlaborcostbaseline\n    \n, \n    \n    \n    estimatedlaborrevenue\n    \n as \n    \n    estimatedlaborrevenue\n    \n, \n    \n    \n    estimatedrevenue\n    \n as \n    \n    estimatedrevenue\n    \n, \n    \n    \n    estimatedtime\n    \n as \n    \n    estimatedtime\n    \n, \n    \n    \n    estimatedtimeoverride\n    \n as \n    \n    estimatedtimeoverride\n    \n, \n    \n    \n    estimatedtimeoverridebaseline\n    \n as \n    \n    estimatedtimeoverridebaseline\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    files\n    \n as \n    \n    files\n    \n, \n    \n    \n    forecastchargerunondemand\n    \n as \n    \n    forecastchargerunondemand\n    \n, \n    \n    \n    fxrate\n    \n as \n    \n    fxrate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    includecrmtasksintotals\n    \n as \n    \n    includecrmtasksintotals\n    \n, \n    \n    \n    isexempttime\n    \n as \n    \n    isexempttime\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    isproductivetime\n    \n as \n    \n    isproductivetime\n    \n, \n    \n    \n    isutilizedtime\n    \n as \n    \n    isutilizedtime\n    \n, \n    \n    \n    jobbillingtype\n    \n as \n    \n    jobbillingtype\n    \n, \n    \n    \n    jobitem\n    \n as \n    \n    jobitem\n    \n, \n    \n    \n    jobprice\n    \n as \n    \n    jobprice\n    \n, \n    \n    \n    jobtype\n    \n as \n    \n    jobtype\n    \n, \n    \n    \n    lastbaselinedate\n    \n as \n    \n    lastbaselinedate\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    limittimetoassignees\n    \n as \n    \n    limittimetoassignees\n    \n, \n    \n    \n    materializetime\n    \n as \n    \n    materializetime\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    percentcomplete\n    \n as \n    \n    percentcomplete\n    \n, \n    \n    \n    percenttimecomplete\n    \n as \n    \n    percenttimecomplete\n    \n, \n    \n    \n    primarycontact\n    \n as \n    \n    primarycontact\n    \n, \n    \n    \n    projectedenddate\n    \n as \n    \n    projectedenddate\n    \n, \n    \n    \n    projectedenddatebaseline\n    \n as \n    \n    projectedenddatebaseline\n    \n, \n    \n    \n    projectmanager\n    \n as \n    \n    projectmanager\n    \n, \n    \n    \n    startdate\n    \n as \n    \n    startdate\n    \n, \n    \n    \n    startdatebaseline\n    \n as \n    \n    startdatebaseline\n    \n, \n    \n    \n    timeapproval\n    \n as \n    \n    timeapproval\n    \n, \n    \n    \n    timeremaining\n    \n as \n    \n    timeremaining\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        id as job_id,\n        externalid as job_external_id,\n        customer as customer_id,\n        entityid as entity_id,\n        defaultbillingaddress as billing_address_id,\n        defaultshippingaddress as shipping_address_id,\n        parent as parent_id\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__jobs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:38.895364Z", "completed_at": "2024-09-05T21:07:39.231275Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:39.232307Z", "completed_at": "2024-09-05T21:07:39.232311Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.36394500732421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__location_main_address", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__location_main_address_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    addr1\n    \n as \n    \n    addr1\n    \n, \n    \n    \n    addr2\n    \n as \n    \n    addr2\n    \n, \n    \n    \n    addr3\n    \n as \n    \n    addr3\n    \n, \n    \n    \n    addressee\n    \n as \n    \n    addressee\n    \n, \n    \n    \n    addrphone\n    \n as \n    \n    addrphone\n    \n, \n    \n    \n    addrtext\n    \n as \n    \n    addrtext\n    \n, \n    \n    \n    attention\n    \n as \n    \n    attention\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    dropdownstate\n    \n as \n    \n    dropdownstate\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    nkey\n    \n as \n    \n    nkey\n    \n, \n    \n    \n    override\n    \n as \n    \n    override\n    \n, \n    \n    \n    recordowner\n    \n as \n    \n    recordowner\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        addr1,\n        addr2,\n        addr3,\n        addressee,\n        addrtext as full_address,\n        city,\n        country,\n        coalesce(state, dropdownstate) as state,\n        nkey,\n        zip as zipcode\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__location_main_address\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:38.858272Z", "completed_at": "2024-09-05T21:07:39.231529Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:39.232556Z", "completed_at": "2024-09-05T21:07:39.232559Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.4065699577331543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__items", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__items_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as integer) as \n    \n    alternatedemandsourceitem\n    \n , \n    cast(null as integer) as \n    \n    amortizationperiod\n    \n , \n    cast(null as integer) as \n    \n    amortizationtemplate\n    \n , \n    \n    \n    assetaccount\n    \n as \n    \n    assetaccount\n    \n, \n    cast(null as TEXT) as \n    \n    atpmethod\n    \n , \n    cast(null as TEXT) as \n    \n    autoexpandkitforrevenuemgmt\n    \n , \n    cast(null as float) as \n    \n    averagecost\n    \n , \n    cast(null as integer) as \n    \n    backwardconsumptiondays\n    \n , \n    cast(null as integer) as \n    \n    billexchratevarianceacct\n    \n , \n    cast(null as integer) as \n    \n    billingschedule\n    \n , \n    cast(null as integer) as \n    \n    billpricevarianceacct\n    \n , \n    cast(null as integer) as \n    \n    billqtyvarianceacct\n    \n , \n    cast(null as TEXT) as \n    \n    buildentireassembly\n    \n , \n    cast(null as float) as \n    \n    buildtime\n    \n , \n    \n    \n    class\n    \n as \n    \n    class\n    \n, \n    cast(null as integer) as \n    \n    consumptionunit\n    \n , \n    cast(null as TEXT) as \n    \n    copydescription\n    \n , \n    cast(null as float) as \n    \n    cost\n    \n , \n    cast(null as float) as \n    \n    costestimate\n    \n , \n    cast(null as TEXT) as \n    \n    costestimatetype\n    \n , \n    cast(null as TEXT) as \n    \n    costingmethod\n    \n , \n    cast(null as TEXT) as \n    \n    costingmethoddisplay\n    \n , \n    cast(null as TEXT) as \n    \n    countryofmanufacture\n    \n , \n    cast(null as timestamp) as \n    \n    createddate\n    \n , \n    cast(null as integer) as \n    \n    createexpenseplanson\n    \n , \n    cast(null as TEXT) as \n    \n    createjob\n    \n , \n    cast(null as integer) as \n    \n    createrevenueplanson\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    \n    \n    deferralaccount\n    \n as \n    \n    deferralaccount\n    \n, \n    cast(null as integer) as \n    \n    deferredrevenueaccount\n    \n , \n    cast(null as TEXT) as \n    \n    deferrevrec\n    \n , \n    cast(null as float) as \n    \n    demandmodifier\n    \n , \n    cast(null as TEXT) as \n    \n    demandsource\n    \n , \n    cast(null as integer) as \n    \n    demandtimefence\n    \n , \n    \n    \n    department\n    \n as \n    \n    department\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    cast(null as TEXT) as \n    \n    directrevenueposting\n    \n , \n    cast(null as TEXT) as \n    \n    displayname\n    \n , \n    cast(null as integer) as \n    \n    dropshipexpenseaccount\n    \n , \n    cast(null as TEXT) as \n    \n    enforceminqtyinternally\n    \n , \n    cast(null as TEXT) as \n    \n    excludefromsitemap\n    \n , \n    \n    \n    expenseaccount\n    \n as \n    \n    expenseaccount\n    \n, \n    cast(null as integer) as \n    \n    expenseamortizationrule\n    \n , \n    cast(null as TEXT) as \n    \n    externalid\n    \n , \n    cast(null as float) as \n    \n    fixedlotsize\n    \n , \n    cast(null as integer) as \n    \n    forwardconsumptiondays\n    \n , \n    cast(null as TEXT) as \n    \n    froogleproductfeed\n    \n , \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    cast(null as float) as \n    \n    fxcost\n    \n , \n    \n    \n    gainlossaccount\n    \n as \n    \n    gainlossaccount\n    \n, \n    cast(null as TEXT) as \n    \n    generateaccruals\n    \n , \n    cast(null as float) as \n    \n    handlingcost\n    \n , \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as TEXT) as \n    \n    includechildren\n    \n , \n    \n    \n    incomeaccount\n    \n as \n    \n    incomeaccount\n    \n, \n    cast(null as integer) as \n    \n    intercodefrevaccount\n    \n , \n    cast(null as integer) as \n    \n    intercoexpenseaccount\n    \n , \n    cast(null as integer) as \n    \n    intercoincomeaccount\n    \n , \n    cast(null as TEXT) as \n    \n    isdropshipitem\n    \n , \n    cast(null as TEXT) as \n    \n    isfulfillable\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as TEXT) as \n    \n    islotitem\n    \n , \n    cast(null as TEXT) as \n    \n    isonline\n    \n , \n    cast(null as TEXT) as \n    \n    isphantom\n    \n , \n    cast(null as TEXT) as \n    \n    isserialitem\n    \n , \n    cast(null as TEXT) as \n    \n    isspecialorderitem\n    \n , \n    cast(null as TEXT) as \n    \n    isspecialworkorderitem\n    \n , \n    cast(null as TEXT) as \n    \n    itemid\n    \n , \n    cast(null as integer) as \n    \n    itemrevenuecategory\n    \n , \n    \n    \n    itemtype\n    \n as \n    \n    itemtype\n    \n, \n    cast(null as timestamp) as \n    \n    lastmodifieddate\n    \n , \n    cast(null as float) as \n    \n    lastpurchaseprice\n    \n , \n    cast(null as integer) as \n    \n    leadtime\n    \n , \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    cast(null as TEXT) as \n    \n    manufacturer\n    \n , \n    cast(null as TEXT) as \n    \n    matchbilltoreceipt\n    \n , \n    cast(null as TEXT) as \n    \n    matrixitemnametemplate\n    \n , \n    cast(null as TEXT) as \n    \n    matrixtype\n    \n , \n    cast(null as integer) as \n    \n    maximumquantity\n    \n , \n    cast(null as integer) as \n    \n    minimumquantity\n    \n , \n    cast(null as TEXT) as \n    \n    mpn\n    \n , \n    cast(null as TEXT) as \n    \n    nextagcategory\n    \n , \n    cast(null as TEXT) as \n    \n    nextagproductfeed\n    \n , \n    cast(null as TEXT) as \n    \n    overallquantitypricingtype\n    \n , \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    cast(null as integer) as \n    \n    periodiclotsizedays\n    \n , \n    cast(null as TEXT) as \n    \n    periodiclotsizetype\n    \n , \n    cast(null as integer) as \n    \n    preferredlocation\n    \n , \n    cast(null as integer) as \n    \n    pricinggroup\n    \n , \n    cast(null as TEXT) as \n    \n    printitems\n    \n , \n    cast(null as integer) as \n    \n    prodpricevarianceacct\n    \n , \n    cast(null as integer) as \n    \n    prodqtyvarianceacct\n    \n , \n    cast(null as integer) as \n    \n    projectexpensetype\n    \n , \n    cast(null as integer) as \n    \n    projecttemplate\n    \n , \n    cast(null as TEXT) as \n    \n    purchasedescription\n    \n , \n    cast(null as float) as \n    \n    purchaseorderamount\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantity\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantitydiff\n    \n , \n    cast(null as integer) as \n    \n    purchasepricevarianceacct\n    \n , \n    cast(null as integer) as \n    \n    purchaseunit\n    \n , \n    cast(null as integer) as \n    \n    quantitypricingschedule\n    \n , \n    cast(null as float) as \n    \n    receiptamount\n    \n , \n    cast(null as float) as \n    \n    receiptquantity\n    \n , \n    cast(null as float) as \n    \n    receiptquantitydiff\n    \n , \n    cast(null as TEXT) as \n    \n    relateditemsdescription\n    \n , \n    cast(null as integer) as \n    \n    rescheduleindays\n    \n , \n    cast(null as integer) as \n    \n    rescheduleoutdays\n    \n , \n    cast(null as float) as \n    \n    residual\n    \n , \n    cast(null as integer) as \n    \n    revenueallocationgroup\n    \n , \n    cast(null as integer) as \n    \n    revenuerecognitionrule\n    \n , \n    cast(null as integer) as \n    \n    revrecforecastrule\n    \n , \n    cast(null as integer) as \n    \n    revreclassfxaccount\n    \n , \n    cast(null as TEXT) as \n    \n    roundupascomponent\n    \n , \n    cast(null as float) as \n    \n    safetystocklevel\n    \n , \n    cast(null as integer) as \n    \n    saleunit\n    \n , \n    cast(null as integer) as \n    \n    scrapacct\n    \n , \n    cast(null as TEXT) as \n    \n    searchkeywords\n    \n , \n    cast(null as TEXT) as \n    \n    seasonaldemand\n    \n , \n    cast(null as TEXT) as \n    \n    shipindividually\n    \n , \n    cast(null as integer) as \n    \n    shippackage\n    \n , \n    cast(null as float) as \n    \n    shippingcost\n    \n , \n    cast(null as TEXT) as \n    \n    shoppingdotcomcategory\n    \n , \n    cast(null as TEXT) as \n    \n    shoppingproductfeed\n    \n , \n    cast(null as integer) as \n    \n    shopzillacategoryid\n    \n , \n    cast(null as TEXT) as \n    \n    shopzillaproductfeed\n    \n , \n    cast(null as TEXT) as \n    \n    sitemappriority\n    \n , \n    cast(null as TEXT) as \n    \n    stockdescription\n    \n , \n    cast(null as integer) as \n    \n    stockunit\n    \n , \n    cast(null as TEXT) as \n    \n    storedescription\n    \n , \n    cast(null as integer) as \n    \n    storedisplayimage\n    \n , \n    cast(null as TEXT) as \n    \n    storedisplayname\n    \n , \n    cast(null as integer) as \n    \n    storedisplaythumbnail\n    \n , \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n, \n    cast(null as TEXT) as \n    \n    subtype\n    \n , \n    cast(null as TEXT) as \n    \n    supplylotsizingmethod\n    \n , \n    cast(null as TEXT) as \n    \n    supplyreplenishmentmethod\n    \n , \n    cast(null as integer) as \n    \n    supplytimefence\n    \n , \n    cast(null as TEXT) as \n    \n    supplytype\n    \n , \n    cast(null as float) as \n    \n    totalquantityonhand\n    \n , \n    cast(null as float) as \n    \n    totalvalue\n    \n , \n    cast(null as float) as \n    \n    transferprice\n    \n , \n    cast(null as integer) as \n    \n    unbuildvarianceaccount\n    \n , \n    cast(null as integer) as \n    \n    unitstype\n    \n , \n    cast(null as TEXT) as \n    \n    upccode\n    \n , \n    cast(null as TEXT) as \n    \n    usebins\n    \n , \n    cast(null as TEXT) as \n    \n    usemarginalrates\n    \n , \n    cast(null as TEXT) as \n    \n    vendorname\n    \n , \n    cast(null as integer) as \n    \n    vendreturnvarianceaccount\n    \n , \n    cast(null as TEXT) as \n    \n    vsoedelivered\n    \n , \n    cast(null as TEXT) as \n    \n    vsoepermitdiscount\n    \n , \n    cast(null as TEXT) as \n    \n    vsoesopgroup\n    \n , \n    cast(null as float) as \n    \n    weight\n    \n , \n    cast(null as integer) as \n    \n    weightunit\n    \n , \n    cast(null as TEXT) as \n    \n    weightunits\n    \n , \n    cast(null as integer) as \n    \n    wipacct\n    \n , \n    cast(null as integer) as \n    \n    wipvarianceacct\n    \n , \n    cast(null as TEXT) as \n    \n    yahooproductfeed\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as item_id,\n        fullname as name,\n        itemtype as type_name,\n        description as sales_description,\n        department as department_id,\n        class as class_id,\n        location as location_id,\n        subsidiary as subsidiary_id,\n        assetaccount as asset_account_id,\n        expenseaccount as expense_account_id,\n        gainlossaccount as gain_loss_account_id,\n        incomeaccount as income_account_id,\n        intercoexpenseaccount as interco_expense_account_id,\n        intercoincomeaccount as interco_income_account_id,\n        deferralaccount as deferred_expense_account_id,\n        deferredrevenueaccount as deferred_revenue_account_id,\n        parent as parent_item_id\n\n        --The below macro adds the fields defined within your items_pass_through_columns variable into the staging model\n        \n\n\n\n\n        \n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__items\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:39.115878Z", "completed_at": "2024-09-05T21:07:39.383274Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:39.383800Z", "completed_at": "2024-09-05T21:07:39.383806Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2947237491607666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__locations", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__locations_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    mainaddress\n    \n as \n    \n    mainaddress\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as location_id,\n        name,\n        fullname as full_name,\n        mainaddress as main_address_id,\n        parent as parent_id,\n        subsidiary as subsidiary_id\n\n        --The below macro adds the fields defined within your locations_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__locations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:39.259047Z", "completed_at": "2024-09-05T21:07:39.514292Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:39.514823Z", "completed_at": "2024-09-05T21:07:39.514830Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2900123596191406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__subsidiaries", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__subsidiaries_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    mainaddress\n    \n as \n    \n    mainaddress\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    fiscalcalendar\n    \n as \n    \n    fiscalcalendar\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as subsidiary_id,\n        name,\n        fullname as full_name,\n        email as email_address,\n        mainaddress as main_address_id,\n        country,\n        state,\n        fiscalcalendar as fiscal_calendar_id,\n        parent as parent_id,\n        currency as currency_id\n\n        --The below macro adds the fields defined within your subsidiaries_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__subsidiaries\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:39.266233Z", "completed_at": "2024-09-05T21:07:39.553639Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:39.559360Z", "completed_at": "2024-09-05T21:07:39.559366Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3221418857574463, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__transaction_accounting_lines", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transaction_accounting_lines_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account\n    \n as \n    \n    account\n    \n, \n    \n    \n    accountingbook\n    \n as \n    \n    accountingbook\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amountlinked\n    \n as \n    \n    amountlinked\n    \n, \n    \n    \n    amountpaid\n    \n as \n    \n    amountpaid\n    \n, \n    \n    \n    amountunpaid\n    \n as \n    \n    amountunpaid\n    \n, \n    \n    \n    credit\n    \n as \n    \n    credit\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    debit\n    \n as \n    \n    debit\n    \n, \n    \n    \n    exchangerate\n    \n as \n    \n    exchangerate\n    \n, \n    \n    \n    netamount\n    \n as \n    \n    netamount\n    \n, \n    \n    \n    overheadparentitem\n    \n as \n    \n    overheadparentitem\n    \n, \n    \n    \n    paymentamountunused\n    \n as \n    \n    paymentamountunused\n    \n, \n    \n    \n    paymentamountused\n    \n as \n    \n    paymentamountused\n    \n, \n    \n    \n    posting\n    \n as \n    \n    posting\n    \n, \n    \n    \n    transaction\n    \n as \n    \n    transaction\n    \n, \n    \n    \n    transactionline\n    \n as \n    \n    transactionline\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted,\n        _fivetran_synced,\n        transaction as transaction_id,\n        transactionline as transaction_line_id,\n        accountingbook as accounting_book_id,\n        account as account_id,\n        posting = 'T' as is_posting,\n        amount,\n        credit as credit_amount,\n        debit as debit_amount,\n        netamount as net_amount,\n        amountpaid as paid_amount,\n        amountunpaid as unpaid_amount\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transaction_accounting_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:39.269975Z", "completed_at": "2024-09-05T21:07:39.559074Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:39.560612Z", "completed_at": "2024-09-05T21:07:39.560615Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.32203006744384766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__transaction_lines", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transaction_lines_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    transaction\n    \n as \n    \n    transaction\n    \n, \n    \n    \n    linesequencenumber\n    \n as \n    \n    linesequencenumber\n    \n, \n    \n    \n    memo\n    \n as \n    \n    memo\n    \n, \n    \n    \n    entity\n    \n as \n    \n    entity\n    \n, \n    \n    \n    item\n    \n as \n    \n    item\n    \n, \n    \n    \n    class\n    \n as \n    \n    class\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n, \n    \n    \n    department\n    \n as \n    \n    department\n    \n, \n    \n    \n    isclosed\n    \n as \n    \n    isclosed\n    \n, \n    \n    \n    isbillable\n    \n as \n    \n    isbillable\n    \n, \n    \n    \n    iscogs\n    \n as \n    \n    iscogs\n    \n, \n    \n    \n    cleared\n    \n as \n    \n    cleared\n    \n, \n    \n    \n    commitmentfirm\n    \n as \n    \n    commitmentfirm\n    \n, \n    \n    \n    mainline\n    \n as \n    \n    mainline\n    \n, \n    \n    \n    taxline\n    \n as \n    \n    taxline\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as transaction_line_id,\n        transaction as transaction_id,\n        linesequencenumber as transaction_line_number,\n        memo,\n        entity as entity_id,\n        item as item_id,\n        class as class_id,\n        location as location_id,\n        subsidiary as subsidiary_id,\n        department as department_id,\n        isclosed = 'T' as is_closed,\n        isbillable = 'T' as is_billable,\n        iscogs = 'T' as is_cogs,\n        cleared = 'T' as is_cleared,\n        commitmentfirm = 'T' as is_commitment_firm,\n        mainline = 'T' as is_main_line,\n        taxline = 'T' as is_tax_line\n\n        --The below macro adds the fields defined within your transaction_lines_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transaction_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:39.410687Z", "completed_at": "2024-09-05T21:07:39.678553Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:39.679046Z", "completed_at": "2024-09-05T21:07:39.679055Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.29404115676879883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__vendor_categories", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__vendor_categories_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    istaxagency\n    \n as \n    \n    istaxagency\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as vendor_category_id,\n        name,\n        _fivetran_synced\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__vendor_categories\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:39.589465Z", "completed_at": "2024-09-05T21:07:39.923869Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:39.924380Z", "completed_at": "2024-09-05T21:07:39.924387Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.36095404624938965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__accounting_books", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounting_books_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    accounting_book_extid\n    \n , \n    \n    \n    accounting_book_id\n    \n as \n    \n    accounting_book_id\n    \n, \n    cast(null as TEXT) as \n    \n    accounting_book_name\n    \n , \n    cast(null as float) as \n    \n    base_book_id\n    \n , \n    cast(null as timestamp) as \n    \n    date_created\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as float) as \n    \n    effective_period_id\n    \n , \n    cast(null as TEXT) as \n    \n    form_template_component_id\n    \n , \n    cast(null as float) as \n    \n    form_template_id\n    \n , \n    cast(null as TEXT) as \n    \n    is_adjustment_only\n    \n , \n    cast(null as TEXT) as \n    \n    is_arrangement_level_reclass\n    \n , \n    cast(null as TEXT) as \n    \n    is_consolidated\n    \n , \n    cast(null as TEXT) as \n    \n    is_contingent_revenue_handling\n    \n , \n    cast(null as TEXT) as \n    \n    is_include_child_subsidiaries\n    \n , \n    \n    \n    is_primary\n    \n as \n    \n    is_primary\n    \n, \n    cast(null as TEXT) as \n    \n    is_two_step_revenue_allocation\n    \n , \n    cast(null as TEXT) as \n    \n    status\n    \n , \n    cast(null as TEXT) as \n    \n    unbilled_receivable_grouping\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        accounting_book_id,\n        is_primary,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounting_books\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:39.593529Z", "completed_at": "2024-09-05T21:07:39.924949Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:39.925447Z", "completed_at": "2024-09-05T21:07:39.925450Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3610708713531494, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__vendors", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__vendors_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accountnumber\n    \n as \n    \n    accountnumber\n    \n, \n    \n    \n    altemail\n    \n as \n    \n    altemail\n    \n, \n    \n    \n    altname\n    \n as \n    \n    altname\n    \n, \n    \n    \n    altphone\n    \n as \n    \n    altphone\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    balanceprimary\n    \n as \n    \n    balanceprimary\n    \n, \n    cast(null as integer) as \n    \n    billingclass\n    \n , \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    comments\n    \n as \n    \n    comments\n    \n, \n    \n    \n    companyname\n    \n as \n    \n    companyname\n    \n, \n    \n    \n    contact\n    \n as \n    \n    contact\n    \n, \n    \n    \n    contactlist\n    \n as \n    \n    contactlist\n    \n, \n    \n    \n    creditlimit\n    \n as \n    \n    creditlimit\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    datecreated\n    \n as \n    \n    datecreated\n    \n, \n    \n    \n    defaultbankaccount\n    \n as \n    \n    defaultbankaccount\n    \n, \n    \n    \n    defaultbillingaddress\n    \n as \n    \n    defaultbillingaddress\n    \n, \n    \n    \n    defaultshippingaddress\n    \n as \n    \n    defaultshippingaddress\n    \n, \n    \n    \n    defaultvendorpaymentaccount\n    \n as \n    \n    defaultvendorpaymentaccount\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    emailpreference\n    \n as \n    \n    emailpreference\n    \n, \n    \n    \n    emailtransactions\n    \n as \n    \n    emailtransactions\n    \n, \n    \n    \n    entityid\n    \n as \n    \n    entityid\n    \n, \n    \n    \n    entitynumber\n    \n as \n    \n    entitynumber\n    \n, \n    \n    \n    entitytitle\n    \n as \n    \n    entitytitle\n    \n, \n    \n    \n    expenseaccount\n    \n as \n    \n    expenseaccount\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    fax\n    \n as \n    \n    fax\n    \n, \n    \n    \n    faxtransactions\n    \n as \n    \n    faxtransactions\n    \n, \n    \n    \n    firstname\n    \n as \n    \n    firstname\n    \n, \n    \n    \n    giveaccess\n    \n as \n    \n    giveaccess\n    \n, \n    \n    \n    homephone\n    \n as \n    \n    homephone\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    incoterm\n    \n as \n    \n    incoterm\n    \n, \n    cast(null as TEXT) as \n    \n    isautogeneratedrepresentingentity\n    \n , \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    isjobresourcevend\n    \n as \n    \n    isjobresourcevend\n    \n, \n    \n    \n    isperson\n    \n as \n    \n    isperson\n    \n, \n    \n    \n    laborcost\n    \n as \n    \n    laborcost\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    lastname\n    \n as \n    \n    lastname\n    \n, \n    \n    \n    legalname\n    \n as \n    \n    legalname\n    \n, \n    \n    \n    middlename\n    \n as \n    \n    middlename\n    \n, \n    \n    \n    mobilephone\n    \n as \n    \n    mobilephone\n    \n, \n    \n    \n    payablesaccount\n    \n as \n    \n    payablesaccount\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    printoncheckas\n    \n as \n    \n    printoncheckas\n    \n, \n    \n    \n    printtransactions\n    \n as \n    \n    printtransactions\n    \n, \n    \n    \n    purchaseorderamount\n    \n as \n    \n    purchaseorderamount\n    \n, \n    \n    \n    purchaseorderquantity\n    \n as \n    \n    purchaseorderquantity\n    \n, \n    \n    \n    purchaseorderquantitydiff\n    \n as \n    \n    purchaseorderquantitydiff\n    \n, \n    \n    \n    receiptamount\n    \n as \n    \n    receiptamount\n    \n, \n    \n    \n    receiptquantity\n    \n as \n    \n    receiptquantity\n    \n, \n    \n    \n    receiptquantitydiff\n    \n as \n    \n    receiptquantitydiff\n    \n, \n    cast(null as integer) as \n    \n    representingsubsidiary\n    \n , \n    \n    \n    rolesforsearch\n    \n as \n    \n    rolesforsearch\n    \n, \n    \n    \n    salutation\n    \n as \n    \n    salutation\n    \n, \n    \n    \n    subsidiaryedition\n    \n as \n    \n    subsidiaryedition\n    \n, \n    \n    \n    terms\n    \n as \n    \n    terms\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    unbilledorders\n    \n as \n    \n    unbilledorders\n    \n, \n    \n    \n    unbilledordersprimary\n    \n as \n    \n    unbilledordersprimary\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n, \n    \n    \n    workcalendar\n    \n as \n    \n    workcalendar\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as vendor_id,\n        companyname as company_name,\n        datecreated as create_date_at,\n        category as vendor_category_id\n\n        --The below macro adds the fields defined within your vendors_pass_through_columns variable into the staging model\n        \n\n\n\n\n        \n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__vendors\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:39.705483Z", "completed_at": "2024-09-05T21:07:39.967983Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:39.968487Z", "completed_at": "2024-09-05T21:07:39.968493Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2886240482330322, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__accounts", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounts_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    cast(null as TEXT) as \n    \n    accountnumber\n    \n , \n    \n    \n    general_rate_type\n    \n as \n    \n    general_rate_type\n    \n, \n    \n    \n    is_balancesheet\n    \n as \n    \n    is_balancesheet\n    \n, \n    \n    \n    is_leftside\n    \n as \n    \n    is_leftside\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    \n    \n    type_name\n    \n as \n    \n    type_name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        account_id,\n        parent_id,\n        name,\n        type_name,\n        accountnumber as account_number,\n        general_rate_type,\n        is_leftside,\n        is_balancesheet,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your accounts_pass_through_columns variable into the staging model\n        \n\n\n\n\n        \n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:39.554573Z", "completed_at": "2024-09-05T21:07:39.978306Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:39.978781Z", "completed_at": "2024-09-05T21:07:39.978785Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.45131993293762207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite2__transactions", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transactions_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    transactionnumber\n    \n as \n    \n    transactionnumber\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    memo\n    \n as \n    \n    memo\n    \n, \n    \n    \n    trandate\n    \n as \n    \n    trandate\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    createddate\n    \n as \n    \n    createddate\n    \n, \n    \n    \n    duedate\n    \n as \n    \n    duedate\n    \n, \n    \n    \n    closedate\n    \n as \n    \n    closedate\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    entity\n    \n as \n    \n    entity\n    \n, \n    \n    \n    postingperiod\n    \n as \n    \n    postingperiod\n    \n, \n    \n    \n    posting\n    \n as \n    \n    posting\n    \n, \n    cast(null as TEXT) as \n    \n    intercoadj\n    \n , \n    \n    \n    isreversal\n    \n as \n    \n    isreversal\n    \n, \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        cast(_fivetran_synced as date) as _fivetran_synced_date,\n        id as transaction_id,\n        transactionnumber as transaction_number,\n        type as transaction_type,\n        memo,\n        trandate as transaction_date,\n        status,\n        createddate as created_at,\n        duedate as due_date_at,\n        closedate as closed_at,\n        currency as currency_id,\n        entity as entity_id,\n        postingperiod as accounting_period_id,\n        posting = 'T' as is_posting,\n        intercoadj = 'T' as is_intercompany_adjustment,\n        isreversal = 'T' as is_reversal\n\n        --The below macro adds the fields defined within your transactions_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:39.951858Z", "completed_at": "2024-09-05T21:07:40.235058Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:40.235573Z", "completed_at": "2024-09-05T21:07:40.235578Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.309434175491333, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__accounting_periods", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounting_periods_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TEXT) as \n    \n    _fivetran_id\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    accounting_period_id\n    \n as \n    \n    accounting_period_id\n    \n, \n    \n    \n    closed\n    \n as \n    \n    closed\n    \n, \n    cast(null as TEXT) as \n    \n    closed_accounts_payable\n    \n , \n    cast(null as TEXT) as \n    \n    closed_accounts_receivable\n    \n , \n    cast(null as TEXT) as \n    \n    closed_all\n    \n , \n    cast(null as timestamp) as \n    \n    closed_on\n    \n , \n    cast(null as TEXT) as \n    \n    closed_payroll\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    \n    \n    ending\n    \n as \n    \n    ending\n    \n, \n    \n    \n    fiscal_calendar_id\n    \n as \n    \n    fiscal_calendar_id\n    \n, \n    cast(null as TEXT) as \n    \n    fivetran_index\n    \n , \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n, \n    \n    \n    is_adjustment\n    \n as \n    \n    is_adjustment\n    \n, \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as TEXT) as \n    \n    locked_accounts_payable\n    \n , \n    cast(null as TEXT) as \n    \n    locked_accounts_receivable\n    \n , \n    cast(null as TEXT) as \n    \n    locked_all\n    \n , \n    cast(null as TEXT) as \n    \n    locked_payroll\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as float) as \n    \n    parent_id\n    \n , \n    \n    \n    quarter\n    \n as \n    \n    quarter\n    \n, \n    \n    \n    starting\n    \n as \n    \n    starting\n    \n, \n    \n    \n    year_0\n    \n as \n    \n    year_0\n    \n, \n    \n    \n    year_id\n    \n as \n    \n    year_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        accounting_period_id,\n        name,\n        full_name,\n        fiscal_calendar_id,\n        year_id,\n        starting as starting_at,\n        ending as ending_at,\n        quarter,\n        year_0,\n        is_adjustment,\n        closed as is_closed,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounting_periods\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:39.956157Z", "completed_at": "2024-09-05T21:07:40.239504Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:40.239979Z", "completed_at": "2024-09-05T21:07:40.239982Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.31549715995788574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__classes", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__classes_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        class_id,\n        full_name,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your classes_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__classes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:39.994683Z", "completed_at": "2024-09-05T21:07:40.279861Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:40.280364Z", "completed_at": "2024-09-05T21:07:40.280370Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3133571147918701, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__consolidated_exchange_rates", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__consolidated_exchange_rates_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    accounting_book_id\n    \n as \n    \n    accounting_book_id\n    \n, \n    \n    \n    accounting_period_id\n    \n as \n    \n    accounting_period_id\n    \n, \n    cast(null as float) as \n    \n    average_budget_rate\n    \n , \n    \n    \n    average_rate\n    \n as \n    \n    average_rate\n    \n, \n    \n    \n    consolidated_exchange_rate_id\n    \n as \n    \n    consolidated_exchange_rate_id\n    \n, \n    cast(null as float) as \n    \n    current_budget_rate\n    \n , \n    \n    \n    current_rate\n    \n as \n    \n    current_rate\n    \n, \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    \n    \n    from_subsidiary_id\n    \n as \n    \n    from_subsidiary_id\n    \n, \n    cast(null as float) as \n    \n    historical_budget_rate\n    \n , \n    \n    \n    historical_rate\n    \n as \n    \n    historical_rate\n    \n, \n    \n    \n    to_subsidiary_id\n    \n as \n    \n    to_subsidiary_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        consolidated_exchange_rate_id,\n        accounting_book_id,\n        accounting_period_id,\n        average_rate,\n        current_rate,\n        historical_rate,\n        from_subsidiary_id,\n        to_subsidiary_id,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your consolidated_exchange_rates_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__consolidated_exchange_rates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:40.005693Z", "completed_at": "2024-09-05T21:07:40.308379Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:40.313188Z", "completed_at": "2024-09-05T21:07:40.313194Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.33414483070373535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__currencies", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__currencies_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    currency_extid\n    \n , \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as TEXT) as \n    \n    is_inactive\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as float) as \n    \n    precision_0\n    \n , \n    \n    \n    symbol\n    \n as \n    \n    symbol\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        currency_id,\n        name,\n        symbol,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__currencies\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:40.261398Z", "completed_at": "2024-09-05T21:07:40.511600Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:40.512121Z", "completed_at": "2024-09-05T21:07:40.512128Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.27689695358276367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__departments", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__departments_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        department_id,\n        name,\n        full_name,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your departments_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__departments\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:40.268074Z", "completed_at": "2024-09-05T21:07:40.521462Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:40.521957Z", "completed_at": "2024-09-05T21:07:40.521961Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2809889316558838, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__customers", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__customers_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    cast(null as TEXT) as \n    \n    companyname\n    \n , \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    cast(null as TEXT) as \n    \n    customer_extid\n    \n , \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    date_first_order\n    \n as \n    \n    date_first_order\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    zipcode\n    \n as \n    \n    zipcode\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        customer_id,\n        companyname as company_name,\n        customer_extid as customer_external_id,\n        city,\n        state,\n        zipcode,\n        country,\n        date_first_order as date_first_order_at,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your customers_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__customers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:40.309241Z", "completed_at": "2024-09-05T21:07:40.566695Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:40.567197Z", "completed_at": "2024-09-05T21:07:40.567202Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2844669818878174, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__expense_accounts", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__expense_accounts_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    cast(null as TEXT) as \n    \n    comments\n    \n , \n    cast(null as float) as \n    \n    current_balance\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as TEXT) as \n    \n    desription\n    \n , \n    cast(null as TEXT) as \n    \n    expense_account_extid\n    \n , \n    \n    \n    expense_account_id\n    \n as \n    \n    expense_account_id\n    \n, \n    cast(null as TEXT) as \n    \n    full_name\n    \n , \n    cast(null as TEXT) as \n    \n    is_including_child_subs\n    \n , \n    cast(null as TEXT) as \n    \n    is_summary\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as TEXT) as \n    \n    legal_name\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        expense_account_id,\n        name,\n        parent_id,\n        account_number,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__expense_accounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:40.340478Z", "completed_at": "2024-09-05T21:07:40.581461Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:40.581976Z", "completed_at": "2024-09-05T21:07:40.581981Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2653529644012451, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__income_accounts", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__income_accounts_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    cast(null as TEXT) as \n    \n    comments\n    \n , \n    cast(null as float) as \n    \n    current_balance\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as TEXT) as \n    \n    desription\n    \n , \n    cast(null as TEXT) as \n    \n    full_name\n    \n , \n    cast(null as TEXT) as \n    \n    income_account_extid\n    \n , \n    \n    \n    income_account_id\n    \n as \n    \n    income_account_id\n    \n, \n    cast(null as TEXT) as \n    \n    is_including_child_subs\n    \n , \n    cast(null as TEXT) as \n    \n    is_summary\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as TEXT) as \n    \n    legal_name\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        income_account_id,\n        name, \n        parent_id,\n        account_number,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__income_accounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:40.538729Z", "completed_at": "2024-09-05T21:07:40.789451Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:40.789976Z", "completed_at": "2024-09-05T21:07:40.789982Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.32360076904296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__locations", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__locations_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        location_id,\n        name,\n        full_name,\n        city,\n        country,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your locations_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__locations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:40.549314Z", "completed_at": "2024-09-05T21:07:40.862897Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:40.864017Z", "completed_at": "2024-09-05T21:07:40.864022Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3455328941345215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__items", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__items_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    allow_drop_ship\n    \n , \n    cast(null as float) as \n    \n    alt_demand_source_item_id\n    \n , \n    cast(null as float) as \n    \n    asset_account_id\n    \n , \n    cast(null as float) as \n    \n    atp_lead_time\n    \n , \n    cast(null as TEXT) as \n    \n    atp_method\n    \n , \n    cast(null as TEXT) as \n    \n    available_to_partners\n    \n , \n    cast(null as TEXT) as \n    \n    avatax_taxcode\n    \n , \n    cast(null as float) as \n    \n    averagecost\n    \n , \n    cast(null as float) as \n    \n    backward_consumption_days\n    \n , \n    cast(null as TEXT) as \n    \n    build_sub_assemblies\n    \n , \n    cast(null as float) as \n    \n    class_id\n    \n , \n    cast(null as float) as \n    \n    code_of_supply_id\n    \n , \n    cast(null as TEXT) as \n    \n    commodity_code\n    \n , \n    cast(null as float) as \n    \n    consumption_unit_id\n    \n , \n    cast(null as float) as \n    \n    cost_0\n    \n , \n    cast(null as TEXT) as \n    \n    cost_category\n    \n , \n    cast(null as TEXT) as \n    \n    cost_estimate_type\n    \n , \n    cast(null as TEXT) as \n    \n    costing_method\n    \n , \n    cast(null as TEXT) as \n    \n    country_of_manufacture\n    \n , \n    cast(null as TEXT) as \n    \n    create_plan_on_event_type\n    \n , \n    cast(null as timestamp) as \n    \n    created\n    \n , \n    cast(null as float) as \n    \n    current_on_order_count\n    \n , \n    cast(null as float) as \n    \n    custreturn_variance_account_id\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as timestamp) as \n    \n    date_of_last_transaction\n    \n , \n    cast(null as float) as \n    \n    default_return_cost\n    \n , \n    cast(null as float) as \n    \n    deferred_expense_account_id\n    \n , \n    cast(null as float) as \n    \n    deferred_revenue_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    demand_source\n    \n , \n    cast(null as float) as \n    \n    demand_time_fence\n    \n , \n    cast(null as float) as \n    \n    department_id\n    \n , \n    cast(null as TEXT) as \n    \n    deposit\n    \n , \n    cast(null as TEXT) as \n    \n    displayname\n    \n , \n    cast(null as TEXT) as \n    \n    distribution_category\n    \n , \n    cast(null as TEXT) as \n    \n    distribution_network\n    \n , \n    cast(null as float) as \n    \n    dropship_expense_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    effective_bom_control_type\n    \n , \n    cast(null as float) as \n    \n    expense_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    featureddescription\n    \n , \n    cast(null as TEXT) as \n    \n    featureditem\n    \n , \n    cast(null as float) as \n    \n    fixed_lot_size\n    \n , \n    cast(null as float) as \n    \n    forward_consumption_days\n    \n , \n    cast(null as TEXT) as \n    \n    fraud_risk\n    \n , \n    cast(null as TEXT) as \n    \n    full_name\n    \n , \n    cast(null as float) as \n    \n    fx_adjustment_account_id\n    \n , \n    cast(null as float) as \n    \n    gain_loss_account_id\n    \n , \n    cast(null as float) as \n    \n    handling_cost\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat_hazard_class\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat_id\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat_item_units\n    \n , \n    cast(null as float) as \n    \n    hazmat_item_units_qty\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat_packing_group\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat_shipping_name\n    \n , \n    cast(null as TEXT) as \n    \n    include_child_subsidiaries\n    \n , \n    cast(null as float) as \n    \n    income_account_id\n    \n , \n    cast(null as float) as \n    \n    interco_expense_account_id\n    \n , \n    cast(null as float) as \n    \n    interco_income_account_id\n    \n , \n    cast(null as float) as \n    \n    invt_count_classification\n    \n , \n    cast(null as float) as \n    \n    invt_count_interval\n    \n , \n    cast(null as TEXT) as \n    \n    is_cont_rev_handling\n    \n , \n    cast(null as TEXT) as \n    \n    is_enforce_min_qty_internally\n    \n , \n    cast(null as TEXT) as \n    \n    is_hold_rev_rec\n    \n , \n    cast(null as TEXT) as \n    \n    is_moss\n    \n , \n    cast(null as TEXT) as \n    \n    is_phantom\n    \n , \n    cast(null as TEXT) as \n    \n    is_special_order_item\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as TEXT) as \n    \n    isonline\n    \n , \n    cast(null as TEXT) as \n    \n    istaxable\n    \n , \n    cast(null as float) as \n    \n    item_defined_cost\n    \n , \n    cast(null as TEXT) as \n    \n    item_extid\n    \n , \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    cast(null as float) as \n    \n    item_image\n    \n , \n    cast(null as TEXT) as \n    \n    item_revenue_category\n    \n , \n    cast(null as float) as \n    \n    item_term_id\n    \n , \n    cast(null as timestamp) as \n    \n    last_cogs_correction\n    \n , \n    cast(null as timestamp) as \n    \n    last_invt_count_date\n    \n , \n    cast(null as float) as \n    \n    last_purchase_price\n    \n , \n    cast(null as float) as \n    \n    location_id\n    \n , \n    cast(null as TEXT) as \n    \n    lot_numbered_item\n    \n , \n    cast(null as TEXT) as \n    \n    lot_sizing_method\n    \n , \n    cast(null as TEXT) as \n    \n    manufacturer\n    \n , \n    cast(null as TEXT) as \n    \n    manufacturing_charge_item\n    \n , \n    cast(null as TEXT) as \n    \n    match_bill_to_receipt\n    \n , \n    cast(null as TEXT) as \n    \n    matrix_type\n    \n , \n    cast(null as float) as \n    \n    maximum_quantity\n    \n , \n    cast(null as float) as \n    \n    minimum_quantity\n    \n , \n    cast(null as timestamp) as \n    \n    modified\n    \n , \n    cast(null as TEXT) as \n    \n    mpn\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as float) as \n    \n    nature_of_transaction_codes_id\n    \n , \n    cast(null as timestamp) as \n    \n    next_invt_count_date\n    \n , \n    cast(null as float) as \n    \n    ng_asset_type_id\n    \n , \n    cast(null as float) as \n    \n    ns_lead_time\n    \n , \n    cast(null as TEXT) as \n    \n    offersupport\n    \n , \n    cast(null as TEXT) as \n    \n    onspecial\n    \n , \n    cast(null as TEXT) as \n    \n    overhead_type\n    \n , \n    cast(null as float) as \n    \n    parent_id\n    \n , \n    cast(null as float) as \n    \n    payment_method_id\n    \n , \n    cast(null as float) as \n    \n    periodic_lot_size_days\n    \n , \n    cast(null as TEXT) as \n    \n    periodic_lot_size_type\n    \n , \n    cast(null as float) as \n    \n    pref_purchase_tax_id\n    \n , \n    cast(null as float) as \n    \n    pref_sale_tax_id\n    \n , \n    cast(null as float) as \n    \n    pref_stock_level\n    \n , \n    cast(null as TEXT) as \n    \n    prices_include_tax\n    \n , \n    cast(null as float) as \n    \n    pricing_group_id\n    \n , \n    cast(null as TEXT) as \n    \n    print_sub_items\n    \n , \n    cast(null as float) as \n    \n    prod_price_var_account_id\n    \n , \n    cast(null as float) as \n    \n    prod_qty_var_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    prompt_payment_discount_item\n    \n , \n    cast(null as float) as \n    \n    purchase_price_var_account_id\n    \n , \n    cast(null as float) as \n    \n    purchase_unit_id\n    \n , \n    cast(null as TEXT) as \n    \n    purchasedescription\n    \n , \n    cast(null as float) as \n    \n    purchaseorderamount\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantity\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantitydiff\n    \n , \n    cast(null as float) as \n    \n    quantityavailable\n    \n , \n    cast(null as float) as \n    \n    quantitybackordered\n    \n , \n    cast(null as float) as \n    \n    quantityonhand\n    \n , \n    cast(null as float) as \n    \n    receiptamount\n    \n , \n    cast(null as float) as \n    \n    receiptquantity\n    \n , \n    cast(null as float) as \n    \n    receiptquantitydiff\n    \n , \n    cast(null as float) as \n    \n    reorder_multiple\n    \n , \n    cast(null as float) as \n    \n    reorderpoint\n    \n , \n    cast(null as TEXT) as \n    \n    replenishment_method\n    \n , \n    cast(null as TEXT) as \n    \n    resalable\n    \n , \n    cast(null as float) as \n    \n    reschedule_in_days\n    \n , \n    cast(null as float) as \n    \n    reschedule_out_days\n    \n , \n    cast(null as float) as \n    \n    rev_rec_forecast_rule_id\n    \n , \n    cast(null as float) as \n    \n    rev_rec_rule_id\n    \n , \n    cast(null as TEXT) as \n    \n    revenue_allocation_group\n    \n , \n    cast(null as TEXT) as \n    \n    round_up_as_component\n    \n , \n    cast(null as float) as \n    \n    safety_stock_days\n    \n , \n    cast(null as float) as \n    \n    safety_stock_level\n    \n , \n    cast(null as float) as \n    \n    sale_unit_id\n    \n , \n    cast(null as TEXT) as \n    \n    salesdescription\n    \n , \n    cast(null as TEXT) as \n    \n    salesforce_id\n    \n , \n    cast(null as TEXT) as \n    \n    salesprice\n    \n , \n    cast(null as float) as \n    \n    scrap_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    serialized_item\n    \n , \n    cast(null as float) as \n    \n    shippingcost\n    \n , \n    cast(null as TEXT) as \n    \n    special_work_order_item\n    \n , \n    cast(null as TEXT) as \n    \n    specialsdescription\n    \n , \n    cast(null as float) as \n    \n    stock_unit_id\n    \n , \n    cast(null as TEXT) as \n    \n    storedescription\n    \n , \n    cast(null as TEXT) as \n    \n    storedetaileddescription\n    \n , \n    cast(null as TEXT) as \n    \n    storedisplayname\n    \n , \n    cast(null as TEXT) as \n    \n    subtype\n    \n , \n    cast(null as TEXT) as \n    \n    supplementary_unit__abberviat\n    \n , \n    cast(null as float) as \n    \n    supplementary_unit_id\n    \n , \n    cast(null as float) as \n    \n    supply_time_fence\n    \n , \n    cast(null as TEXT) as \n    \n    supply_type\n    \n , \n    cast(null as float) as \n    \n    tax_item_id\n    \n , \n    cast(null as float) as \n    \n    totalvalue\n    \n , \n    cast(null as float) as \n    \n    transferprice\n    \n , \n    \n    \n    type_name\n    \n as \n    \n    type_name\n    \n, \n    cast(null as float) as \n    \n    type_of_goods_id\n    \n , \n    cast(null as TEXT) as \n    \n    udf1\n    \n , \n    cast(null as TEXT) as \n    \n    udf2\n    \n , \n    cast(null as TEXT) as \n    \n    un_number\n    \n , \n    cast(null as float) as \n    \n    unbuild_variance_account_id\n    \n , \n    cast(null as float) as \n    \n    units_type_id\n    \n , \n    cast(null as TEXT) as \n    \n    upc_code\n    \n , \n    cast(null as TEXT) as \n    \n    use_component_yield\n    \n , \n    cast(null as float) as \n    \n    vendor_id\n    \n , \n    cast(null as TEXT) as \n    \n    vendorname\n    \n , \n    cast(null as float) as \n    \n    vendreturn_variance_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    vsoe_deferral\n    \n , \n    cast(null as TEXT) as \n    \n    vsoe_delivered\n    \n , \n    cast(null as TEXT) as \n    \n    vsoe_discount\n    \n , \n    cast(null as float) as \n    \n    vsoe_price\n    \n , \n    cast(null as float) as \n    \n    weight\n    \n , \n    cast(null as float) as \n    \n    weight_in_user_defined_unit\n    \n , \n    cast(null as float) as \n    \n    weight_unit_index\n    \n , \n    cast(null as float) as \n    \n    wip_account_id\n    \n , \n    cast(null as float) as \n    \n    wip_cost_variance_account_id\n    \n , \n    cast(null as float) as \n    \n    work_order_lead_time\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        item_id,\n        name,\n        type_name,\n        salesdescription as sales_description,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your items_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__items\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:40.593584Z", "completed_at": "2024-09-05T21:07:40.892521Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:40.893033Z", "completed_at": "2024-09-05T21:07:40.893039Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.32506704330444336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__subsidiaries", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__subsidiaries_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    address\n    \n , \n    cast(null as TEXT) as \n    \n    address1\n    \n , \n    cast(null as TEXT) as \n    \n    address2\n    \n , \n    cast(null as float) as \n    \n    base_currency_id\n    \n , \n    cast(null as TEXT) as \n    \n    branch_id\n    \n , \n    cast(null as TEXT) as \n    \n    brn\n    \n , \n    cast(null as TEXT) as \n    \n    city\n    \n , \n    cast(null as TEXT) as \n    \n    country\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as TEXT) as \n    \n    edition\n    \n , \n    cast(null as TEXT) as \n    \n    federal_number\n    \n , \n    \n    \n    fiscal_calendar_id\n    \n as \n    \n    fiscal_calendar_id\n    \n, \n    cast(null as TEXT) as \n    \n    full_name\n    \n , \n    cast(null as TEXT) as \n    \n    is_elimination\n    \n , \n    cast(null as TEXT) as \n    \n    is_moss\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive_bool\n    \n , \n    cast(null as TEXT) as \n    \n    legal_name\n    \n , \n    cast(null as float) as \n    \n    moss_nexus_id\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    cast(null as float) as \n    \n    purchaseorderamount\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantity\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantitydiff\n    \n , \n    cast(null as float) as \n    \n    receiptamount\n    \n , \n    cast(null as float) as \n    \n    receiptquantity\n    \n , \n    cast(null as float) as \n    \n    receiptquantitydiff\n    \n , \n    cast(null as TEXT) as \n    \n    return_address\n    \n , \n    cast(null as TEXT) as \n    \n    return_address1\n    \n , \n    cast(null as TEXT) as \n    \n    return_address2\n    \n , \n    cast(null as TEXT) as \n    \n    return_city\n    \n , \n    cast(null as TEXT) as \n    \n    return_country\n    \n , \n    cast(null as TEXT) as \n    \n    return_state\n    \n , \n    cast(null as TEXT) as \n    \n    return_zipcode\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address1\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address2\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_city\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_country\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_state\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_zipcode\n    \n , \n    cast(null as TEXT) as \n    \n    state\n    \n , \n    cast(null as TEXT) as \n    \n    state_tax_number\n    \n , \n    cast(null as float) as \n    \n    subnav__searchable_subsidiary\n    \n , \n    cast(null as TEXT) as \n    \n    subsidiary_extid\n    \n , \n    \n    \n    subsidiary_id\n    \n as \n    \n    subsidiary_id\n    \n, \n    cast(null as float) as \n    \n    taxonomy_reference_id\n    \n , \n    cast(null as TEXT) as \n    \n    tran_num_prefix\n    \n , \n    cast(null as TEXT) as \n    \n    uen\n    \n , \n    cast(null as TEXT) as \n    \n    url\n    \n , \n    cast(null as TEXT) as \n    \n    zipcode\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        subsidiary_id,\n        fiscal_calendar_id,\n        full_name,\n        name,\n        parent_id,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your subsidiaries_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__subsidiaries\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:40.606527Z", "completed_at": "2024-09-05T21:07:40.907389Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:40.907897Z", "completed_at": "2024-09-05T21:07:40.907902Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3267538547515869, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__transaction_lines", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__transaction_lines_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    company_id\n    \n as \n    \n    company_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    memo\n    \n as \n    \n    memo\n    \n, \n    \n    \n    non_posting_line\n    \n as \n    \n    non_posting_line\n    \n, \n    \n    \n    subsidiary_id\n    \n as \n    \n    subsidiary_id\n    \n, \n    \n    \n    transaction_id\n    \n as \n    \n    transaction_id\n    \n, \n    \n    \n    transaction_line_id\n    \n as \n    \n    transaction_line_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        transaction_id,\n        transaction_line_id,\n        subsidiary_id,\n        account_id,\n        company_id,\n        item_id,\n        amount,\n        non_posting_line,\n        class_id,\n        location_id,\n        department_id,\n        memo\n\n        --The below macro adds the fields defined within your transaction_lines_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__transaction_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:40.933744Z", "completed_at": "2024-09-05T21:07:40.980455Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:40.980984Z", "completed_at": "2024-09-05T21:07:40.980991Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04825925827026367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__account_types_account_type_id.20889967ef", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_type_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__account_types\"\nwhere account_type_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:40.982561Z", "completed_at": "2024-09-05T21:07:40.986657Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:40.987151Z", "completed_at": "2024-09-05T21:07:40.987155Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005574941635131836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__account_types_account_type_id.aaea9bec0f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_type_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__account_types\"\nwhere account_type_id is not null\ngroup by account_type_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:40.988720Z", "completed_at": "2024-09-05T21:07:40.991584Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:40.992082Z", "completed_at": "2024-09-05T21:07:40.992086Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0043561458587646484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.76e6e71411", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect _fivetran_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_book_subsidiaries\"\nwhere _fivetran_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:40.993726Z", "completed_at": "2024-09-05T21:07:40.996420Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:40.996915Z", "completed_at": "2024-09-05T21:07:40.996919Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004212856292724609, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.27ddb08396", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    _fivetran_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_book_subsidiaries\"\nwhere _fivetran_id is not null\ngroup by _fivetran_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:40.998434Z", "completed_at": "2024-09-05T21:07:41.001405Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.001889Z", "completed_at": "2024-09-05T21:07:41.001893Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004457950592041016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounting_books_accounting_book_id.1b7504d30e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect accounting_book_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_books\"\nwhere accounting_book_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.003461Z", "completed_at": "2024-09-05T21:07:41.007076Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.007569Z", "completed_at": "2024-09-05T21:07:41.007573Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005106925964355469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounting_books_accounting_book_id.70d96d1230", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    accounting_book_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_books\"\nwhere accounting_book_id is not null\ngroup by accounting_book_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.009129Z", "completed_at": "2024-09-05T21:07:41.012400Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.012912Z", "completed_at": "2024-09-05T21:07:41.012916Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004769802093505859, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.ec8750b679", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect _fivetran_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_period_fiscal_cal\"\nwhere _fivetran_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.014516Z", "completed_at": "2024-09-05T21:07:41.017374Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.017875Z", "completed_at": "2024-09-05T21:07:41.017879Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004364013671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.d2038de348", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    _fivetran_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_period_fiscal_cal\"\nwhere _fivetran_id is not null\ngroup by _fivetran_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.024448Z", "completed_at": "2024-09-05T21:07:41.027506Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.028017Z", "completed_at": "2024-09-05T21:07:41.028022Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004725933074951172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounting_periods_accounting_period_id.f2db2c547c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect accounting_period_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_periods\"\nwhere accounting_period_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.029635Z", "completed_at": "2024-09-05T21:07:41.033472Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.033980Z", "completed_at": "2024-09-05T21:07:41.033984Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0053250789642333984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounting_periods_accounting_period_id.a9d8f4c6e1", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    accounting_period_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_periods\"\nwhere accounting_period_id is not null\ngroup by accounting_period_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.035596Z", "completed_at": "2024-09-05T21:07:41.038965Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.039466Z", "completed_at": "2024-09-05T21:07:41.039471Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005068778991699219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__classes_class_id.799b01ffba", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect class_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__classes\"\nwhere class_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.041477Z", "completed_at": "2024-09-05T21:07:41.044588Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.045093Z", "completed_at": "2024-09-05T21:07:41.045097Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004719972610473633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__classes_class_id.d069e30c98", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    class_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__classes\"\nwhere class_id is not null\ngroup by class_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.052373Z", "completed_at": "2024-09-05T21:07:41.055317Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.055856Z", "completed_at": "2024-09-05T21:07:41.055861Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004678964614868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounts_account_id.5a542e47a2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounts\"\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.057871Z", "completed_at": "2024-09-05T21:07:41.061243Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.061745Z", "completed_at": "2024-09-05T21:07:41.061750Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005120754241943359, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounts_account_id.23a63b3e17", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounts\"\nwhere account_id is not null\ngroup by account_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.063617Z", "completed_at": "2024-09-05T21:07:41.068310Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.068855Z", "completed_at": "2024-09-05T21:07:41.068860Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006476879119873047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.09703507c6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect consolidated_exchange_rate_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__consolidated_exchange_rates\"\nwhere consolidated_exchange_rate_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.071756Z", "completed_at": "2024-09-05T21:07:41.074990Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.075630Z", "completed_at": "2024-09-05T21:07:41.075635Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005478858947753906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.2d4725bb7a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    consolidated_exchange_rate_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__consolidated_exchange_rates\"\nwhere consolidated_exchange_rate_id is not null\ngroup by consolidated_exchange_rate_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.077734Z", "completed_at": "2024-09-05T21:07:41.080981Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.081510Z", "completed_at": "2024-09-05T21:07:41.081514Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0050089359283447266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__currencies_currency_id.7eff9f9c1c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__currencies\"\nwhere currency_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.083141Z", "completed_at": "2024-09-05T21:07:41.086040Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.086558Z", "completed_at": "2024-09-05T21:07:41.086561Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00441288948059082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__currencies_currency_id.50d9c37c78", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    currency_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__currencies\"\nwhere currency_id is not null\ngroup by currency_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.088229Z", "completed_at": "2024-09-05T21:07:41.091267Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.091780Z", "completed_at": "2024-09-05T21:07:41.091784Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004639387130737305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__departments_department_id.7395bbfe71", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect department_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__departments\"\nwhere department_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.093363Z", "completed_at": "2024-09-05T21:07:41.097226Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.097733Z", "completed_at": "2024-09-05T21:07:41.097737Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005350828170776367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__departments_department_id.13e4897f0b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    department_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__departments\"\nwhere department_id is not null\ngroup by department_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.099639Z", "completed_at": "2024-09-05T21:07:41.102647Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.103161Z", "completed_at": "2024-09-05T21:07:41.103166Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0048062801361083984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__customers_customer_id.65a5ae302a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__customers\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.112506Z", "completed_at": "2024-09-05T21:07:41.116414Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.116937Z", "completed_at": "2024-09-05T21:07:41.116940Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005933046340942383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__customers_customer_id.05ca0360f2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.118928Z", "completed_at": "2024-09-05T21:07:41.122091Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.122598Z", "completed_at": "2024-09-05T21:07:41.122603Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005197048187255859, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__entities_entity_id.f22c18cfa2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect entity_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__entities\"\nwhere entity_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.125077Z", "completed_at": "2024-09-05T21:07:41.128791Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.129285Z", "completed_at": "2024-09-05T21:07:41.129289Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0052947998046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__entities_entity_id.f9acd04f50", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    entity_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__entities\"\nwhere entity_id is not null\ngroup by entity_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.135752Z", "completed_at": "2024-09-05T21:07:41.138678Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.139176Z", "completed_at": "2024-09-05T21:07:41.139183Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004475116729736328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__jobs_job_id.d7b5b06b33", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect job_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__jobs\"\nwhere job_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:40.864269Z", "completed_at": "2024-09-05T21:07:41.115285Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.115929Z", "completed_at": "2024-09-05T21:07:41.115935Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2778170108795166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__transactions", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__transactions_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    accounting_period_id\n    \n as \n    \n    accounting_period_id\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    is_advanced_intercompany\n    \n as \n    \n    is_advanced_intercompany\n    \n, \n    \n    \n    is_intercompany\n    \n as \n    \n    is_intercompany\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    cast(null as timestamp) as \n    \n    trandate\n    \n , \n    \n    \n    transaction_id\n    \n as \n    \n    transaction_id\n    \n, \n    \n    \n    transaction_type\n    \n as \n    \n    transaction_type\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        transaction_id,\n        status,\n        trandate as transaction_date,\n        currency_id,\n        accounting_period_id,\n        due_date as due_date_at,\n        transaction_type,\n        is_intercompany,\n        is_advanced_intercompany,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your transactions_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.141939Z", "completed_at": "2024-09-05T21:07:41.152670Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.153332Z", "completed_at": "2024-09-05T21:07:41.153337Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01377725601196289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__jobs_job_id.c294ea849c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    job_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__jobs\"\nwhere job_id is not null\ngroup by job_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.145718Z", "completed_at": "2024-09-05T21:07:41.153583Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.155339Z", "completed_at": "2024-09-05T21:07:41.155342Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011595010757446289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__items_item_id.e216b5b06a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__items\"\nwhere item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:40.895612Z", "completed_at": "2024-09-05T21:07:41.153819Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.155593Z", "completed_at": "2024-09-05T21:07:41.155596Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.30913400650024414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__vendor_types", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__vendor_types_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as float) as \n    \n    parent_id\n    \n , \n    cast(null as TEXT) as \n    \n    vendor_type_extid\n    \n , \n    \n    \n    vendor_type_id\n    \n as \n    \n    vendor_type_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        vendor_type_id,\n        name,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__vendor_types\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.157450Z", "completed_at": "2024-09-05T21:07:41.186479Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.203546Z", "completed_at": "2024-09-05T21:07:41.203555Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04880189895629883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__items_item_id.3fcafd9eee", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    item_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__items\"\nwhere item_id is not null\ngroup by item_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.208975Z", "completed_at": "2024-09-05T21:07:41.217902Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.219126Z", "completed_at": "2024-09-05T21:07:41.219131Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013375043869018555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__locations_location_id.c335a5985e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__locations\"\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.212158Z", "completed_at": "2024-09-05T21:07:41.218166Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.219378Z", "completed_at": "2024-09-05T21:07:41.219382Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013245105743408203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__locations_location_id.f1469a5149", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    location_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__locations\"\nwhere location_id is not null\ngroup by location_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.215194Z", "completed_at": "2024-09-05T21:07:41.218874Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.220786Z", "completed_at": "2024-09-05T21:07:41.220789Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0131378173828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__subsidiaries_subsidiary_id.0ab6516626", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subsidiary_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__subsidiaries\"\nwhere subsidiary_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.223879Z", "completed_at": "2024-09-05T21:07:41.237367Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.237871Z", "completed_at": "2024-09-05T21:07:41.237877Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01621699333190918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__subsidiaries_subsidiary_id.8edc974229", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    subsidiary_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__subsidiaries\"\nwhere subsidiary_id is not null\ngroup by subsidiary_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:40.919284Z", "completed_at": "2024-09-05T21:07:41.205487Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.208138Z", "completed_at": "2024-09-05T21:07:41.208142Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3249020576477051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_source.stg_netsuite__vendors", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__vendors_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    account_owner\n    \n , \n    cast(null as TEXT) as \n    \n    accountnumber\n    \n , \n    cast(null as TEXT) as \n    \n    accounts_email\n    \n , \n    cast(null as float) as \n    \n    annual_revenue\n    \n , \n    cast(null as TEXT) as \n    \n    auto_renewals\n    \n , \n    cast(null as TEXT) as \n    \n    auto_send_statements\n    \n , \n    cast(null as TEXT) as \n    \n    billaddress\n    \n , \n    cast(null as float) as \n    \n    billing_class_id\n    \n , \n    cast(null as TEXT) as \n    \n    city\n    \n , \n    cast(null as TEXT) as \n    \n    comments\n    \n , \n    cast(null as TEXT) as \n    \n    companyname\n    \n , \n    cast(null as TEXT) as \n    \n    country\n    \n , \n    \n    \n    create_date\n    \n as \n    \n    create_date\n    \n, \n    cast(null as float) as \n    \n    creditlimit\n    \n , \n    cast(null as float) as \n    \n    currency_id\n    \n , \n    cast(null as timestamp) as \n    \n    date_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    date_last_modified\n    \n , \n    cast(null as TEXT) as \n    \n    dic\n    \n , \n    cast(null as TEXT) as \n    \n    email\n    \n , \n    cast(null as TEXT) as \n    \n    email_bill_payment_vouchers\n    \n , \n    cast(null as TEXT) as \n    \n    email_cash_sales\n    \n , \n    cast(null as TEXT) as \n    \n    email_credit_notes\n    \n , \n    cast(null as TEXT) as \n    \n    email_invoices\n    \n , \n    cast(null as TEXT) as \n    \n    email_item_fulfilments\n    \n , \n    cast(null as TEXT) as \n    \n    email_purchase_orders\n    \n , \n    cast(null as TEXT) as \n    \n    email_quotes\n    \n , \n    cast(null as TEXT) as \n    \n    email_sales_orders\n    \n , \n    cast(null as TEXT) as \n    \n    email_statements\n    \n , \n    cast(null as TEXT) as \n    \n    employee_number\n    \n , \n    cast(null as TEXT) as \n    \n    exemption_certificate_no\n    \n , \n    cast(null as float) as \n    \n    expense_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    fax\n    \n , \n    cast(null as TEXT) as \n    \n    full_name\n    \n , \n    cast(null as TEXT) as \n    \n    home_phone\n    \n , \n    cast(null as TEXT) as \n    \n    hris_id\n    \n , \n    cast(null as TEXT) as \n    \n    ico\n    \n , \n    cast(null as TEXT) as \n    \n    id_number_in_the_country_of_r\n    \n , \n    cast(null as float) as \n    \n    id_type_in_the_country_of_r_id\n    \n , \n    cast(null as float) as \n    \n    in_transit_balance\n    \n , \n    cast(null as TEXT) as \n    \n    incoterm\n    \n , \n    cast(null as float) as \n    \n    industry_id\n    \n , \n    cast(null as TEXT) as \n    \n    invoice_via_procurement_syste\n    \n , \n    cast(null as TEXT) as \n    \n    invoicing_details\n    \n , \n    cast(null as TEXT) as \n    \n    is1099eligible\n    \n , \n    cast(null as TEXT) as \n    \n    is_partner\n    \n , \n    cast(null as TEXT) as \n    \n    is_person\n    \n , \n    cast(null as TEXT) as \n    \n    isemailhtml\n    \n , \n    cast(null as TEXT) as \n    \n    isemailpdf\n    \n , \n    cast(null as TEXT) as \n    \n    isinactive\n    \n , \n    cast(null as float) as \n    \n    labor_cost\n    \n , \n    cast(null as timestamp) as \n    \n    last_modified_date\n    \n , \n    cast(null as timestamp) as \n    \n    last_sales_activity\n    \n , \n    cast(null as TEXT) as \n    \n    line1\n    \n , \n    cast(null as TEXT) as \n    \n    line2\n    \n , \n    cast(null as TEXT) as \n    \n    line3\n    \n , \n    cast(null as TEXT) as \n    \n    loginaccess\n    \n , \n    cast(null as TEXT) as \n    \n    lsa_link\n    \n , \n    cast(null as TEXT) as \n    \n    lsa_link_name\n    \n , \n    cast(null as TEXT) as \n    \n    mobile_phone\n    \n , \n    cast(null as timestamp) as \n    \n    msa_effective_date\n    \n , \n    cast(null as TEXT) as \n    \n    name\n    \n , \n    cast(null as float) as \n    \n    no__of_employees\n    \n , \n    cast(null as float) as \n    \n    openbalance\n    \n , \n    cast(null as float) as \n    \n    openbalance_foreign\n    \n , \n    cast(null as float) as \n    \n    payables_account_id\n    \n , \n    cast(null as float) as \n    \n    payment_terms_id\n    \n , \n    cast(null as TEXT) as \n    \n    phone\n    \n , \n    cast(null as float) as \n    \n    prepayment_balance\n    \n , \n    cast(null as TEXT) as \n    \n    printoncheckas\n    \n , \n    cast(null as float) as \n    \n    purchaseorderamount\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantity\n    \n , \n    cast(null as float) as \n    \n    purchaseorderquantitydiff\n    \n , \n    cast(null as TEXT) as \n    \n    purchases_email\n    \n , \n    cast(null as float) as \n    \n    receiptamount\n    \n , \n    cast(null as float) as \n    \n    receiptquantity\n    \n , \n    cast(null as float) as \n    \n    receiptquantitydiff\n    \n , \n    cast(null as float) as \n    \n    represents_subsidiary_id\n    \n , \n    cast(null as TEXT) as \n    \n    restrict_access_to_expensify\n    \n , \n    cast(null as TEXT) as \n    \n    salesforce_id\n    \n , \n    cast(null as TEXT) as \n    \n    shipaddress\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_email\n    \n , \n    cast(null as TEXT) as \n    \n    state\n    \n , \n    cast(null as float) as \n    \n    subsidiary\n    \n , \n    cast(null as TEXT) as \n    \n    tax_contact_first_name\n    \n , \n    cast(null as float) as \n    \n    tax_contact_id\n    \n , \n    cast(null as TEXT) as \n    \n    tax_contact_last_name\n    \n , \n    cast(null as TEXT) as \n    \n    tax_contact_middle_name\n    \n , \n    cast(null as TEXT) as \n    \n    tax_number\n    \n , \n    cast(null as TEXT) as \n    \n    taxidnum\n    \n , \n    cast(null as float) as \n    \n    time_approver_id\n    \n , \n    cast(null as TEXT) as \n    \n    transactions_need_approval\n    \n , \n    cast(null as TEXT) as \n    \n    uen\n    \n , \n    cast(null as float) as \n    \n    unbilled_orders\n    \n , \n    cast(null as float) as \n    \n    unbilled_orders_foreign\n    \n , \n    cast(null as TEXT) as \n    \n    url\n    \n , \n    cast(null as TEXT) as \n    \n    vat_registration_no\n    \n , \n    cast(null as TEXT) as \n    \n    vendor_extid\n    \n , \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n, \n    \n    \n    vendor_type_id\n    \n as \n    \n    vendor_type_id\n    \n, \n    cast(null as TEXT) as \n    \n    zipcode\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        vendor_id,\n        companyname as company_name,\n        create_date as create_date_at,\n        vendor_type_id,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your vendors_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__vendors\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.231255Z", "completed_at": "2024-09-05T21:07:41.243168Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.245759Z", "completed_at": "2024-09-05T21:07:41.245764Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.023547887802124023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_accounting_lines_transaction_id__transaction_line_id__accounting_book_id.ac47a8ecc1", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, transaction_line_id, accounting_book_id\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transaction_accounting_lines\"\n    group by transaction_id, transaction_line_id, accounting_book_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.239477Z", "completed_at": "2024-09-05T21:07:41.244267Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.246654Z", "completed_at": "2024-09-05T21:07:41.246658Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011733055114746094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_lines_transaction_id__transaction_line_id.07b823514f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, transaction_line_id\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transaction_lines\"\n    group by transaction_id, transaction_line_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.247623Z", "completed_at": "2024-09-05T21:07:41.255953Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.260484Z", "completed_at": "2024-09-05T21:07:41.260489Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018800020217895508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_id.f28afbfa25", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transaction_accounting_lines\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.251232Z", "completed_at": "2024-09-05T21:07:41.256625Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.263439Z", "completed_at": "2024-09-05T21:07:41.263443Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01843094825744629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_line_id.0f72869807", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transaction_accounting_lines\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.257778Z", "completed_at": "2024-09-05T21:07:41.265119Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.267345Z", "completed_at": "2024-09-05T21:07:41.267349Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015376806259155273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_id.267b150890", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transaction_lines\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.260765Z", "completed_at": "2024-09-05T21:07:41.265649Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.267811Z", "completed_at": "2024-09-05T21:07:41.267814Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01770496368408203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_line_id.a82e70adc1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transaction_lines\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.268079Z", "completed_at": "2024-09-05T21:07:41.274929Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.277170Z", "completed_at": "2024-09-05T21:07:41.277174Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018275022506713867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__vendor_categories_vendor_category_id.60acd9acb2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_category_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__vendor_categories\"\nwhere vendor_category_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.271208Z", "completed_at": "2024-09-05T21:07:41.275978Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.283749Z", "completed_at": "2024-09-05T21:07:41.283754Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018325090408325195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__vendor_categories_vendor_category_id.874da088c6", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    vendor_category_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__vendor_categories\"\nwhere vendor_category_id is not null\ngroup by vendor_category_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.277436Z", "completed_at": "2024-09-05T21:07:41.285841Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.288484Z", "completed_at": "2024-09-05T21:07:41.288490Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.020081043243408203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__vendors_vendor_id.777b758daf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__vendors\"\nwhere vendor_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.281154Z", "completed_at": "2024-09-05T21:07:41.286096Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.288903Z", "completed_at": "2024-09-05T21:07:41.288908Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020277976989746094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__accounting_books_accounting_book_id.12972ee6fc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect accounting_book_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounting_books\"\nwhere accounting_book_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.289228Z", "completed_at": "2024-09-05T21:07:41.297043Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.299250Z", "completed_at": "2024-09-05T21:07:41.299254Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02037501335144043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__vendors_vendor_id.415829ac1d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    vendor_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__vendors\"\nwhere vendor_id is not null\ngroup by vendor_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.292215Z", "completed_at": "2024-09-05T21:07:41.297300Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.299508Z", "completed_at": "2024-09-05T21:07:41.299511Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020568132400512695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__accounting_books_accounting_book_id.22e0106417", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    accounting_book_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounting_books\"\nwhere accounting_book_id is not null\ngroup by accounting_book_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.302753Z", "completed_at": "2024-09-05T21:07:41.308236Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.310624Z", "completed_at": "2024-09-05T21:07:41.310629Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016949892044067383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__accounts_account_id.e94563d281", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounts\"\nwhere account_id is not null\ngroup by account_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.299768Z", "completed_at": "2024-09-05T21:07:41.308812Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.311090Z", "completed_at": "2024-09-05T21:07:41.311093Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.020812034606933594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__accounts_account_id.f03cddbace", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounts\"\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.315315Z", "completed_at": "2024-09-05T21:07:41.320604Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.326693Z", "completed_at": "2024-09-05T21:07:41.326700Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02121901512145996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite2__transactions_transaction_id.af3d15dce4", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transactions\"\nwhere transaction_id is not null\ngroup by transaction_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.311360Z", "completed_at": "2024-09-05T21:07:41.321583Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.330350Z", "completed_at": "2024-09-05T21:07:41.330360Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02290630340576172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transactions_transaction_id.b4f6c6a72b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transactions\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.322421Z", "completed_at": "2024-09-05T21:07:41.331402Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.334610Z", "completed_at": "2024-09-05T21:07:41.334615Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01632380485534668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__accounting_periods_accounting_period_id__fiscal_calendar_id.43005ecb69", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        accounting_period_id, fiscal_calendar_id\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounting_periods\"\n    group by accounting_period_id, fiscal_calendar_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.327028Z", "completed_at": "2024-09-05T21:07:41.332385Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.335520Z", "completed_at": "2024-09-05T21:07:41.335525Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016566753387451172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__accounting_periods_accounting_period_id.5c1c46821c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect accounting_period_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounting_periods\"\nwhere accounting_period_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.337858Z", "completed_at": "2024-09-05T21:07:41.347224Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.355174Z", "completed_at": "2024-09-05T21:07:41.355186Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02239203453063965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__accounting_periods_fiscal_calendar_id.8d75190563", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fiscal_calendar_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounting_periods\"\nwhere fiscal_calendar_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.342723Z", "completed_at": "2024-09-05T21:07:41.347860Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.355745Z", "completed_at": "2024-09-05T21:07:41.355751Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02249598503112793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__classes_class_id.462bfda765", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect class_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__classes\"\nwhere class_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.348839Z", "completed_at": "2024-09-05T21:07:41.356840Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.360033Z", "completed_at": "2024-09-05T21:07:41.360039Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015242815017700195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__classes_class_id.c63c54840b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    class_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__classes\"\nwhere class_id is not null\ngroup by class_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.352109Z", "completed_at": "2024-09-05T21:07:41.357873Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.360748Z", "completed_at": "2024-09-05T21:07:41.360751Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015488147735595703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.83de8c8e97", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect consolidated_exchange_rate_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__consolidated_exchange_rates\"\nwhere consolidated_exchange_rate_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.362625Z", "completed_at": "2024-09-05T21:07:41.371210Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.378859Z", "completed_at": "2024-09-05T21:07:41.378866Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02020406723022461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.2ca94ecb54", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    consolidated_exchange_rate_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__consolidated_exchange_rates\"\nwhere consolidated_exchange_rate_id is not null\ngroup by consolidated_exchange_rate_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.366017Z", "completed_at": "2024-09-05T21:07:41.371795Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.379205Z", "completed_at": "2024-09-05T21:07:41.379209Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.020253896713256836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__currencies_currency_id.e8b331ffb3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__currencies\"\nwhere currency_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.372600Z", "completed_at": "2024-09-05T21:07:41.380114Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.382911Z", "completed_at": "2024-09-05T21:07:41.382915Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01397085189819336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__currencies_currency_id.09ab867f2c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    currency_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__currencies\"\nwhere currency_id is not null\ngroup by currency_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.375969Z", "completed_at": "2024-09-05T21:07:41.380949Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.383570Z", "completed_at": "2024-09-05T21:07:41.383573Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014140844345092773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__departments_department_id.6d96b00002", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect department_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__departments\"\nwhere department_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.385303Z", "completed_at": "2024-09-05T21:07:41.393101Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.401515Z", "completed_at": "2024-09-05T21:07:41.401522Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020195722579956055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__departments_department_id.2df16a9aa1", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    department_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__departments\"\nwhere department_id is not null\ngroup by department_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.388603Z", "completed_at": "2024-09-05T21:07:41.393357Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.401827Z", "completed_at": "2024-09-05T21:07:41.401831Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.020027875900268555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__customers_customer_id.bbb9eed2dc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__customers\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.393893Z", "completed_at": "2024-09-05T21:07:41.402142Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.404631Z", "completed_at": "2024-09-05T21:07:41.404635Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014326095581054688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__customers_customer_id.7c9debe8d9", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.398364Z", "completed_at": "2024-09-05T21:07:41.403787Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.406600Z", "completed_at": "2024-09-05T21:07:41.406603Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015503168106079102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__expense_accounts_expense_account_id.4de138ed23", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect expense_account_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__expense_accounts\"\nwhere expense_account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.408339Z", "completed_at": "2024-09-05T21:07:41.428533Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.436443Z", "completed_at": "2024-09-05T21:07:41.436450Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03242015838623047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__expense_accounts_expense_account_id.5e813830ff", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    expense_account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__expense_accounts\"\nwhere expense_account_id is not null\ngroup by expense_account_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.413200Z", "completed_at": "2024-09-05T21:07:41.428871Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.436771Z", "completed_at": "2024-09-05T21:07:41.436775Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03253984451293945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__income_accounts_income_account_id.a38311d5f9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect income_account_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__income_accounts\"\nwhere income_account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.425465Z", "completed_at": "2024-09-05T21:07:41.436101Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.438554Z", "completed_at": "2024-09-05T21:07:41.438559Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02390599250793457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__income_accounts_income_account_id.28b4166a07", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    income_account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__income_accounts\"\nwhere income_account_id is not null\ngroup by income_account_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.432093Z", "completed_at": "2024-09-05T21:07:41.438858Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.441709Z", "completed_at": "2024-09-05T21:07:41.441712Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.023267030715942383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__locations_location_id.9f68ecaa6b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__locations\"\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.443363Z", "completed_at": "2024-09-05T21:07:41.453164Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.458985Z", "completed_at": "2024-09-05T21:07:41.458990Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01955103874206543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__locations_location_id.3857e2cac2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    location_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__locations\"\nwhere location_id is not null\ngroup by location_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.446424Z", "completed_at": "2024-09-05T21:07:41.453437Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.459266Z", "completed_at": "2024-09-05T21:07:41.459269Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01957106590270996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__items_item_id.ba322d7da3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__items\"\nwhere item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.449909Z", "completed_at": "2024-09-05T21:07:41.454499Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.460888Z", "completed_at": "2024-09-05T21:07:41.460891Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019752025604248047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__items_item_id.760a674654", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    item_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__items\"\nwhere item_id is not null\ngroup by item_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.470740Z", "completed_at": "2024-09-05T21:07:41.476819Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.481207Z", "completed_at": "2024-09-05T21:07:41.481211Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.019131898880004883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__subsidiaries_subsidiary_id.9aa9c2d015", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subsidiary_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__subsidiaries\"\nwhere subsidiary_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.473974Z", "completed_at": "2024-09-05T21:07:41.480943Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.483390Z", "completed_at": "2024-09-05T21:07:41.483394Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019857168197631836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__subsidiaries_subsidiary_id.7d0dfe64f0", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    subsidiary_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__subsidiaries\"\nwhere subsidiary_id is not null\ngroup by subsidiary_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.477114Z", "completed_at": "2024-09-05T21:07:41.481761Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.484142Z", "completed_at": "2024-09-05T21:07:41.484145Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.023182153701782227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__transaction_lines_transaction_id__transaction_line_id.651bc3120d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, transaction_line_id\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__transaction_lines\"\n    group by transaction_id, transaction_line_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.485228Z", "completed_at": "2024-09-05T21:07:41.493390Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.502108Z", "completed_at": "2024-09-05T21:07:41.502114Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03114914894104004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_id.e8055d67bc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__transaction_lines\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.489831Z", "completed_at": "2024-09-05T21:07:41.501810Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.514597Z", "completed_at": "2024-09-05T21:07:41.514601Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03120732307434082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_line_id.420bd8637c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__transaction_lines\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.523288Z", "completed_at": "2024-09-05T21:07:41.533436Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.535407Z", "completed_at": "2024-09-05T21:07:41.535411Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020726919174194336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__transactions_transaction_id.9439fe1532", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__transactions\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.525938Z", "completed_at": "2024-09-05T21:07:41.533683Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.535894Z", "completed_at": "2024-09-05T21:07:41.535898Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.021147966384887695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__transactions_transaction_id.fd6bd3af79", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__transactions\"\nwhere transaction_id is not null\ngroup by transaction_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.529713Z", "completed_at": "2024-09-05T21:07:41.534631Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.539313Z", "completed_at": "2024-09-05T21:07:41.539316Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01840996742248535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__vendor_types_vendor_type_id.faed6fe0e9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_type_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__vendor_types\"\nwhere vendor_type_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.536156Z", "completed_at": "2024-09-05T21:07:41.541160Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.543431Z", "completed_at": "2024-09-05T21:07:41.543435Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018624067306518555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__vendor_types_vendor_type_id.6ba4f59b69", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    vendor_type_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__vendor_types\"\nwhere vendor_type_id is not null\ngroup by vendor_type_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.549803Z", "completed_at": "2024-09-05T21:07:41.557445Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.559717Z", "completed_at": "2024-09-05T21:07:41.559721Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03056168556213379, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.not_null_stg_netsuite__vendors_vendor_id.15978cc531", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__vendors\"\nwhere vendor_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.553045Z", "completed_at": "2024-09-05T21:07:41.558516Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.571769Z", "completed_at": "2024-09-05T21:07:41.571775Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.030332088470458984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_source.unique_stg_netsuite__vendors_vendor_id.a981580d39", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    vendor_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__vendors\"\nwhere vendor_id is not null\ngroup by vendor_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.591178Z", "completed_at": "2024-09-05T21:07:41.631780Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.683033Z", "completed_at": "2024-09-05T21:07:41.683042Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.09340381622314453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.netsuite__balance_sheet", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_netsuite__transaction_lines_w_accounting_period as (\n\n\nwith transactions as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__transactions\"\n), \n\ntransaction_lines as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__transaction_lines\"\n),\n\ntransaction_lines_w_accounting_period as ( -- transaction line totals, by accounts, accounting period and subsidiary\n  select\n    transaction_lines.transaction_id,\n    transaction_lines.transaction_line_id,\n    transaction_lines.subsidiary_id,\n    transaction_lines.account_id,\n    transactions.accounting_period_id as transaction_accounting_period_id,\n    coalesce(transaction_lines.amount, 0) as unconverted_amount\n  from transaction_lines\n\n  join transactions on transactions.transaction_id = transaction_lines.transaction_id\n\n  where lower(transactions.transaction_type) != 'revenue arrangement'\n    and lower(non_posting_line) != 'yes'\n)\n\nselect * \nfrom transaction_lines_w_accounting_period\n),  __dbt__cte__int_netsuite__accountxperiod_exchange_rate_map as (\n\n\nwith accounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounts\"\n), \n\naccounting_books as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounting_books\"\n), \n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__subsidiaries\"\n),\n\nconsolidated_exchange_rates as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__consolidated_exchange_rates\"\n),\n\nperiod_exchange_rate_map as ( -- exchange rates used, by accounting period, to convert to parent subsidiary\n  select\n    consolidated_exchange_rates.accounting_period_id,\n    consolidated_exchange_rates.average_rate,\n    consolidated_exchange_rates.current_rate,\n    consolidated_exchange_rates.historical_rate,\n    consolidated_exchange_rates.from_subsidiary_id,\n    consolidated_exchange_rates.to_subsidiary_id\n  from consolidated_exchange_rates\n\n  where consolidated_exchange_rates.to_subsidiary_id in (select subsidiary_id from subsidiaries where parent_id is null)  -- constrait - only the primary subsidiary has no parent\n    and consolidated_exchange_rates.accounting_book_id in (select accounting_book_id from accounting_books where lower(is_primary) = 'yes')\n), \n\naccountxperiod_exchange_rate_map as ( -- account table with exchange rate details by accounting period\n  select\n    period_exchange_rate_map.accounting_period_id,\n    period_exchange_rate_map.from_subsidiary_id,\n    period_exchange_rate_map.to_subsidiary_id,\n    accounts.account_id,\n    case \n      when lower(accounts.general_rate_type) = 'historical' then period_exchange_rate_map.historical_rate\n      when lower(accounts.general_rate_type) = 'current' then period_exchange_rate_map.current_rate\n      when lower(accounts.general_rate_type) = 'average' then period_exchange_rate_map.average_rate\n      else null\n        end as exchange_rate\n  from accounts\n  \n  cross join period_exchange_rate_map\n)\n\nselect * \nfrom accountxperiod_exchange_rate_map\n),  __dbt__cte__int_netsuite__transaction_and_reporting_periods as (\n\n\nwith accounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounting_periods\"\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__subsidiaries\"\n),\n\ntransaction_and_reporting_periods as ( \n  select\n    base.accounting_period_id as accounting_period_id,\n    multiplier.accounting_period_id as reporting_accounting_period_id\n  from accounting_periods as base\n\n  join accounting_periods as multiplier\n    on multiplier.starting_at >= base.starting_at\n      and multiplier.quarter = base.quarter\n      and multiplier.year_0 = base.year_0\n      and multiplier.fiscal_calendar_id = base.fiscal_calendar_id\n      and cast(multiplier.starting_at as timestamp) <= now() \n\n  where lower(base.quarter) = 'no'\n    and lower(base.year_0) = 'no'\n    and base.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null) -- fiscal calendar will align with parent subsidiary's default calendar\n)\n\nselect * \nfrom transaction_and_reporting_periods\n),  __dbt__cte__int_netsuite__transactions_with_converted_amounts as (\n\n\nwith transaction_lines_w_accounting_period as (\n    select * \n    from __dbt__cte__int_netsuite__transaction_lines_w_accounting_period\n), \n\naccountxperiod_exchange_rate_map as (\n    select * \n    from __dbt__cte__int_netsuite__accountxperiod_exchange_rate_map\n), \n\ntransaction_and_reporting_periods as (\n    select * \n    from __dbt__cte__int_netsuite__transaction_and_reporting_periods\n), \n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounts\"\n),\n\ntransactions_in_every_calculation_period_w_exchange_rates as (\n  select\n    transaction_lines_w_accounting_period.*,\n    reporting_accounting_period_id,\n    exchange_reporting_period.exchange_rate as exchange_rate_reporting_period,\n    exchange_transaction_period.exchange_rate as exchange_rate_transaction_period\n  from transaction_lines_w_accounting_period\n\n  join transaction_and_reporting_periods \n    on transaction_and_reporting_periods.accounting_period_id = transaction_lines_w_accounting_period.transaction_accounting_period_id \n\n  join accountxperiod_exchange_rate_map as exchange_reporting_period\n    on exchange_reporting_period.accounting_period_id = transaction_and_reporting_periods.reporting_accounting_period_id\n      and exchange_reporting_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_reporting_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n      \n  join accountxperiod_exchange_rate_map as exchange_transaction_period\n    on exchange_transaction_period.accounting_period_id = transaction_and_reporting_periods.accounting_period_id\n      and exchange_transaction_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_transaction_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n), \n\ntransactions_with_converted_amounts as (\n  select\n    transactions_in_every_calculation_period_w_exchange_rates.*,\n    unconverted_amount * exchange_rate_transaction_period as converted_amount_using_transaction_accounting_period,\n    unconverted_amount * exchange_rate_reporting_period as converted_amount_using_reporting_month,\n    case\n      when lower(accounts.type_name) in ('income','other income','expense','other expense','other income','cost of goods sold') then true\n      else false \n        end as is_income_statement,\n    case\n      when lower(accounts.type_name) in ('accounts receivable', 'bank', 'deferred expense', 'fixed asset', 'other asset', 'other current asset', 'unbilled receivable', 'prepaid expense') then 'Asset'\n      when lower(accounts.type_name) in ('cost of goods sold', 'expense', 'other expense') then 'Expense'\n      when lower(accounts.type_name) in ('income', 'other income') then 'Income'\n      when lower(accounts.type_name) in ('accounts payable', 'credit card', 'deferred revenue', 'long term liability', 'other current liability') then 'Liability'\n      when lower(accounts.type_name) in ('equity', 'retained earnings', 'net income') then 'Equity'\n      when lower(accounts.type_name) in ('non posting', 'statistical') then 'Other'\n      else null \n        end as account_category\n  from transactions_in_every_calculation_period_w_exchange_rates\n\n  left join accounts \n    on accounts.account_id = transactions_in_every_calculation_period_w_exchange_rates.account_id \n)\n\nselect * \nfrom transactions_with_converted_amounts\n), transactions_with_converted_amounts as (\n    select * \n    from __dbt__cte__int_netsuite__transactions_with_converted_amounts\n), \n\n--Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n\n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounts\"\n), \n\naccounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounting_periods\"\n), \n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__subsidiaries\"\n),\n\nbalance_sheet as ( \n  select\n    transactions_with_converted_amounts.transaction_id,\n    transactions_with_converted_amounts.transaction_line_id,\n    reporting_accounting_periods.accounting_period_id as accounting_period_id,\n    reporting_accounting_periods.ending_at as accounting_period_ending,\n    reporting_accounting_periods.full_name as accounting_period_full_name,\n    reporting_accounting_periods.name as accounting_period_name,\n    lower(reporting_accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n    lower(reporting_accounting_periods.is_closed) = 'yes' as is_accounting_period_closed,\n    transactions_with_converted_amounts.account_category as account_category,\n    case\n      when (lower(accounts.is_balancesheet) = 'f' and reporting_accounting_periods.year_id = transaction_accounting_periods.year_id) then 'Net Income'\n      when lower(accounts.is_balancesheet) = 'f' then 'Retained Earnings'\n      else accounts.name\n        end as account_name,\n    case\n      when (lower(accounts.is_balancesheet) = 'f' and reporting_accounting_periods.year_id = transaction_accounting_periods.year_id) then 'Net Income'\n      when lower(accounts.is_balancesheet) = 'f' then 'Retained Earnings'\n      else accounts.type_name\n        end as account_type_name,\n    case\n      when lower(accounts.is_balancesheet) = 'f' then null\n      else accounts.account_id\n        end as account_id,\n    case\n      when lower(accounts.is_balancesheet) = 'f' then null\n      else accounts.account_number\n        end as account_number\n    \n    --The below script allows for accounts table pass through columns.\n    \n\n\n\n,\n\n    case\n      when lower(accounts.is_balancesheet) = 'f' and lower(accounts.general_rate_type) in ('historical', 'average') then -converted_amount_using_transaction_accounting_period\n      when lower(accounts.is_balancesheet) = 'f' then -converted_amount_using_reporting_month\n      when lower(accounts.is_balancesheet) = 't' and lower(accounts.is_leftside) = 'f' and lower(accounts.general_rate_type) in ('historical', 'average') then -converted_amount_using_transaction_accounting_period\n      when lower(accounts.is_balancesheet) = 't' and lower(accounts.is_leftside) = 't' and lower(accounts.general_rate_type) in ('historical', 'average') then converted_amount_using_transaction_accounting_period\n      when lower(accounts.is_balancesheet) = 't' and lower(accounts.is_leftside) = 'f' then -converted_amount_using_reporting_month\n      when lower(accounts.is_balancesheet) = 't' and lower(accounts.is_leftside) = 't' then converted_amount_using_reporting_month\n      else 0\n        end as converted_amount,\n        \n    case\n      when lower(accounts.type_name) = 'bank' then 1\n      when lower(accounts.type_name) = 'accounts receivable' then 2\n      when lower(accounts.type_name) = 'unbilled receivable' then 3\n      when lower(accounts.type_name) = 'other current asset' then 4\n      when lower(accounts.type_name) = 'fixed asset' then 5\n      when lower(accounts.type_name) = 'other asset' then 6\n      when lower(accounts.type_name) = 'deferred expense' then 7\n      when lower(accounts.type_name) = 'accounts payable' then 8\n      when lower(accounts.type_name) = 'credit card' then 9\n      when lower(accounts.type_name) = 'other current liability' then 10\n      when lower(accounts.type_name) = 'long term liability' then 11\n      when lower(accounts.type_name) = 'deferred revenue' then 12\n      when lower(accounts.type_name) = 'equity' then 13\n      when (lower(accounts.is_balancesheet) = 'f' and reporting_accounting_periods.year_id = transaction_accounting_periods.year_id) then 15\n      when lower(accounts.is_balancesheet) = 'f' then 14\n      else null\n        end as balance_sheet_sort_helper\n    \n    --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n    \n\n  from transactions_with_converted_amounts\n  \n  --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n  \n\n\n  left join accounts \n    on accounts.account_id = transactions_with_converted_amounts.account_id\n\n  left join accounting_periods as reporting_accounting_periods \n    on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n\n  left join accounting_periods as transaction_accounting_periods \n    on transaction_accounting_periods.accounting_period_id = transactions_with_converted_amounts.transaction_accounting_period_id\n\n  where reporting_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n    and transaction_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n    and (lower(accounts.is_balancesheet) = 't'\n      or transactions_with_converted_amounts.is_income_statement)\n\n  union all\n\n  select\n    transactions_with_converted_amounts.transaction_id,\n    transactions_with_converted_amounts.transaction_line_id,\n    reporting_accounting_periods.accounting_period_id as accounting_period_id,\n    reporting_accounting_periods.ending_at as accounting_period_ending,\n    reporting_accounting_periods.full_name as accounting_period_full_name,\n    reporting_accounting_periods.name as accounting_period_name,\n    lower(reporting_accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n    lower(reporting_accounting_periods.is_closed) = 'yes' as is_accounting_period_closed,\n    'Equity' as account_category,\n    'Cumulative Translation Adjustment' as account_name,\n    'Cumulative Translation Adjustment' as account_type_name,\n    null as account_id,\n    null as account_number,\n\n    \n\n    case\n      when lower(account_category) = 'equity' or is_income_statement then converted_amount_using_transaction_accounting_period\n      else converted_amount_using_reporting_month\n        end as converted_amount,\n    16 as balance_sheet_sort_helper\n\n    --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n    \n\n  from transactions_with_converted_amounts\n\n  --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n  \n\n  left join accounts\n    on accounts.account_id = transactions_with_converted_amounts.account_id\n\n  left join accounting_periods as reporting_accounting_periods \n    on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n    \n  where reporting_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n    and (lower(accounts.is_balancesheet) = 't'\n      or transactions_with_converted_amounts.is_income_statement)\n)\n\nselect *\nfrom balance_sheet", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__balance_sheet\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.625504Z", "completed_at": "2024-09-05T21:07:41.684095Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.685260Z", "completed_at": "2024-09-05T21:07:41.685264Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.07635998725891113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.netsuite__income_statement", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_netsuite__transaction_lines_w_accounting_period as (\n\n\nwith transactions as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__transactions\"\n), \n\ntransaction_lines as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__transaction_lines\"\n),\n\ntransaction_lines_w_accounting_period as ( -- transaction line totals, by accounts, accounting period and subsidiary\n  select\n    transaction_lines.transaction_id,\n    transaction_lines.transaction_line_id,\n    transaction_lines.subsidiary_id,\n    transaction_lines.account_id,\n    transactions.accounting_period_id as transaction_accounting_period_id,\n    coalesce(transaction_lines.amount, 0) as unconverted_amount\n  from transaction_lines\n\n  join transactions on transactions.transaction_id = transaction_lines.transaction_id\n\n  where lower(transactions.transaction_type) != 'revenue arrangement'\n    and lower(non_posting_line) != 'yes'\n)\n\nselect * \nfrom transaction_lines_w_accounting_period\n),  __dbt__cte__int_netsuite__accountxperiod_exchange_rate_map as (\n\n\nwith accounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounts\"\n), \n\naccounting_books as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounting_books\"\n), \n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__subsidiaries\"\n),\n\nconsolidated_exchange_rates as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__consolidated_exchange_rates\"\n),\n\nperiod_exchange_rate_map as ( -- exchange rates used, by accounting period, to convert to parent subsidiary\n  select\n    consolidated_exchange_rates.accounting_period_id,\n    consolidated_exchange_rates.average_rate,\n    consolidated_exchange_rates.current_rate,\n    consolidated_exchange_rates.historical_rate,\n    consolidated_exchange_rates.from_subsidiary_id,\n    consolidated_exchange_rates.to_subsidiary_id\n  from consolidated_exchange_rates\n\n  where consolidated_exchange_rates.to_subsidiary_id in (select subsidiary_id from subsidiaries where parent_id is null)  -- constrait - only the primary subsidiary has no parent\n    and consolidated_exchange_rates.accounting_book_id in (select accounting_book_id from accounting_books where lower(is_primary) = 'yes')\n), \n\naccountxperiod_exchange_rate_map as ( -- account table with exchange rate details by accounting period\n  select\n    period_exchange_rate_map.accounting_period_id,\n    period_exchange_rate_map.from_subsidiary_id,\n    period_exchange_rate_map.to_subsidiary_id,\n    accounts.account_id,\n    case \n      when lower(accounts.general_rate_type) = 'historical' then period_exchange_rate_map.historical_rate\n      when lower(accounts.general_rate_type) = 'current' then period_exchange_rate_map.current_rate\n      when lower(accounts.general_rate_type) = 'average' then period_exchange_rate_map.average_rate\n      else null\n        end as exchange_rate\n  from accounts\n  \n  cross join period_exchange_rate_map\n)\n\nselect * \nfrom accountxperiod_exchange_rate_map\n),  __dbt__cte__int_netsuite__transaction_and_reporting_periods as (\n\n\nwith accounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounting_periods\"\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__subsidiaries\"\n),\n\ntransaction_and_reporting_periods as ( \n  select\n    base.accounting_period_id as accounting_period_id,\n    multiplier.accounting_period_id as reporting_accounting_period_id\n  from accounting_periods as base\n\n  join accounting_periods as multiplier\n    on multiplier.starting_at >= base.starting_at\n      and multiplier.quarter = base.quarter\n      and multiplier.year_0 = base.year_0\n      and multiplier.fiscal_calendar_id = base.fiscal_calendar_id\n      and cast(multiplier.starting_at as timestamp) <= now() \n\n  where lower(base.quarter) = 'no'\n    and lower(base.year_0) = 'no'\n    and base.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null) -- fiscal calendar will align with parent subsidiary's default calendar\n)\n\nselect * \nfrom transaction_and_reporting_periods\n),  __dbt__cte__int_netsuite__transactions_with_converted_amounts as (\n\n\nwith transaction_lines_w_accounting_period as (\n    select * \n    from __dbt__cte__int_netsuite__transaction_lines_w_accounting_period\n), \n\naccountxperiod_exchange_rate_map as (\n    select * \n    from __dbt__cte__int_netsuite__accountxperiod_exchange_rate_map\n), \n\ntransaction_and_reporting_periods as (\n    select * \n    from __dbt__cte__int_netsuite__transaction_and_reporting_periods\n), \n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounts\"\n),\n\ntransactions_in_every_calculation_period_w_exchange_rates as (\n  select\n    transaction_lines_w_accounting_period.*,\n    reporting_accounting_period_id,\n    exchange_reporting_period.exchange_rate as exchange_rate_reporting_period,\n    exchange_transaction_period.exchange_rate as exchange_rate_transaction_period\n  from transaction_lines_w_accounting_period\n\n  join transaction_and_reporting_periods \n    on transaction_and_reporting_periods.accounting_period_id = transaction_lines_w_accounting_period.transaction_accounting_period_id \n\n  join accountxperiod_exchange_rate_map as exchange_reporting_period\n    on exchange_reporting_period.accounting_period_id = transaction_and_reporting_periods.reporting_accounting_period_id\n      and exchange_reporting_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_reporting_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n      \n  join accountxperiod_exchange_rate_map as exchange_transaction_period\n    on exchange_transaction_period.accounting_period_id = transaction_and_reporting_periods.accounting_period_id\n      and exchange_transaction_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_transaction_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n), \n\ntransactions_with_converted_amounts as (\n  select\n    transactions_in_every_calculation_period_w_exchange_rates.*,\n    unconverted_amount * exchange_rate_transaction_period as converted_amount_using_transaction_accounting_period,\n    unconverted_amount * exchange_rate_reporting_period as converted_amount_using_reporting_month,\n    case\n      when lower(accounts.type_name) in ('income','other income','expense','other expense','other income','cost of goods sold') then true\n      else false \n        end as is_income_statement,\n    case\n      when lower(accounts.type_name) in ('accounts receivable', 'bank', 'deferred expense', 'fixed asset', 'other asset', 'other current asset', 'unbilled receivable', 'prepaid expense') then 'Asset'\n      when lower(accounts.type_name) in ('cost of goods sold', 'expense', 'other expense') then 'Expense'\n      when lower(accounts.type_name) in ('income', 'other income') then 'Income'\n      when lower(accounts.type_name) in ('accounts payable', 'credit card', 'deferred revenue', 'long term liability', 'other current liability') then 'Liability'\n      when lower(accounts.type_name) in ('equity', 'retained earnings', 'net income') then 'Equity'\n      when lower(accounts.type_name) in ('non posting', 'statistical') then 'Other'\n      else null \n        end as account_category\n  from transactions_in_every_calculation_period_w_exchange_rates\n\n  left join accounts \n    on accounts.account_id = transactions_in_every_calculation_period_w_exchange_rates.account_id \n)\n\nselect * \nfrom transactions_with_converted_amounts\n), transactions_with_converted_amounts as (\n    select * \n    from __dbt__cte__int_netsuite__transactions_with_converted_amounts\n), \n\n--Below is only used if income statement transaction detail columns are specified dbt_project.yml file.\n\n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounts\"\n), \n\naccounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounting_periods\"\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__subsidiaries\"\n),\n\ntransaction_lines as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__transaction_lines\"\n),\n\nclasses as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__classes\"\n),\n\nlocations as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__locations\"\n),\n\ndepartments as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__departments\"\n),\n\nincome_statement as (\n    select\n        transactions_with_converted_amounts.transaction_id,\n        transactions_with_converted_amounts.transaction_line_id,\n        reporting_accounting_periods.accounting_period_id as accounting_period_id,\n        reporting_accounting_periods.ending_at as accounting_period_ending,\n        reporting_accounting_periods.full_name as accounting_period_full_name,\n        reporting_accounting_periods.name as accounting_period_name,\n        lower(reporting_accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n        lower(reporting_accounting_periods.is_closed) = 'yes' as is_accounting_period_closed,\n        accounts.name as account_name,\n        accounts.type_name as account_type_name,\n        accounts.account_id as account_id,\n        accounts.account_number,\n        subsidiaries.subsidiary_id,\n        subsidiaries.full_name as subsidiary_full_name,\n        subsidiaries.name as subsidiary_name\n\n        --The below script allows for accounts table pass through columns.\n        \n\n\n\n,\n\n        accounts.account_number || '-' || accounts.name as account_number_and_name,\n        classes.full_name as class_full_name\n\n        --The below script allows for classes table pass through columns.\n        \n\n\n\n,\n\n        locations.full_name as location_full_name,\n        departments.full_name as department_full_name\n\n        --The below script allows for departments table pass through columns.\n        \n\n\n\n,\n\n        -converted_amount_using_transaction_accounting_period as converted_amount,\n        transactions_with_converted_amounts.account_category as account_category,\n        case when lower(accounts.type_name) = 'income' then 1\n            when lower(accounts.type_name) = 'cost of goods sold' then 2\n            when lower(accounts.type_name) = 'expense' then 3\n            when lower(accounts.type_name) = 'other income' then 4\n            when lower(accounts.type_name) = 'other expense' then 5\n            else null\n            end as income_statement_sort_helper\n\n        --Below is only used if income statement transaction detail columns are specified dbt_project.yml file.\n        \n    \n        \n    from transactions_with_converted_amounts\n\n    join transaction_lines as transaction_lines\n        on transaction_lines.transaction_line_id = transactions_with_converted_amounts.transaction_line_id\n            and transaction_lines.transaction_id = transactions_with_converted_amounts.transaction_id\n\n    left join classes \n        on classes.class_id = transaction_lines.class_id\n\n    left join locations\n        on locations.location_id = transaction_lines.location_id\n\n    left join departments \n        on departments.department_id = transaction_lines.department_id\n    join accounts on accounts.account_id = transactions_with_converted_amounts.account_id\n\n    join accounting_periods as reporting_accounting_periods \n        on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n    \n    join subsidiaries\n        on transactions_with_converted_amounts.subsidiary_id = subsidiaries.subsidiary_id\n\n    --Below is only used if income statement transaction detail columns are specified dbt_project.yml file.\n    \n\n    where reporting_accounting_periods.fiscal_calendar_id  = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n        and transactions_with_converted_amounts.transaction_accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n        and transactions_with_converted_amounts.is_income_statement\n)\n\nselect *\nfrom income_statement", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__income_statement\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.648732Z", "completed_at": "2024-09-05T21:07:41.684757Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.686576Z", "completed_at": "2024-09-05T21:07:41.686579Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.06322407722473145, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.netsuite__transaction_details", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_netsuite__transaction_lines_w_accounting_period as (\n\n\nwith transactions as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__transactions\"\n), \n\ntransaction_lines as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__transaction_lines\"\n),\n\ntransaction_lines_w_accounting_period as ( -- transaction line totals, by accounts, accounting period and subsidiary\n  select\n    transaction_lines.transaction_id,\n    transaction_lines.transaction_line_id,\n    transaction_lines.subsidiary_id,\n    transaction_lines.account_id,\n    transactions.accounting_period_id as transaction_accounting_period_id,\n    coalesce(transaction_lines.amount, 0) as unconverted_amount\n  from transaction_lines\n\n  join transactions on transactions.transaction_id = transaction_lines.transaction_id\n\n  where lower(transactions.transaction_type) != 'revenue arrangement'\n    and lower(non_posting_line) != 'yes'\n)\n\nselect * \nfrom transaction_lines_w_accounting_period\n),  __dbt__cte__int_netsuite__accountxperiod_exchange_rate_map as (\n\n\nwith accounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounts\"\n), \n\naccounting_books as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounting_books\"\n), \n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__subsidiaries\"\n),\n\nconsolidated_exchange_rates as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__consolidated_exchange_rates\"\n),\n\nperiod_exchange_rate_map as ( -- exchange rates used, by accounting period, to convert to parent subsidiary\n  select\n    consolidated_exchange_rates.accounting_period_id,\n    consolidated_exchange_rates.average_rate,\n    consolidated_exchange_rates.current_rate,\n    consolidated_exchange_rates.historical_rate,\n    consolidated_exchange_rates.from_subsidiary_id,\n    consolidated_exchange_rates.to_subsidiary_id\n  from consolidated_exchange_rates\n\n  where consolidated_exchange_rates.to_subsidiary_id in (select subsidiary_id from subsidiaries where parent_id is null)  -- constrait - only the primary subsidiary has no parent\n    and consolidated_exchange_rates.accounting_book_id in (select accounting_book_id from accounting_books where lower(is_primary) = 'yes')\n), \n\naccountxperiod_exchange_rate_map as ( -- account table with exchange rate details by accounting period\n  select\n    period_exchange_rate_map.accounting_period_id,\n    period_exchange_rate_map.from_subsidiary_id,\n    period_exchange_rate_map.to_subsidiary_id,\n    accounts.account_id,\n    case \n      when lower(accounts.general_rate_type) = 'historical' then period_exchange_rate_map.historical_rate\n      when lower(accounts.general_rate_type) = 'current' then period_exchange_rate_map.current_rate\n      when lower(accounts.general_rate_type) = 'average' then period_exchange_rate_map.average_rate\n      else null\n        end as exchange_rate\n  from accounts\n  \n  cross join period_exchange_rate_map\n)\n\nselect * \nfrom accountxperiod_exchange_rate_map\n),  __dbt__cte__int_netsuite__transaction_and_reporting_periods as (\n\n\nwith accounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounting_periods\"\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__subsidiaries\"\n),\n\ntransaction_and_reporting_periods as ( \n  select\n    base.accounting_period_id as accounting_period_id,\n    multiplier.accounting_period_id as reporting_accounting_period_id\n  from accounting_periods as base\n\n  join accounting_periods as multiplier\n    on multiplier.starting_at >= base.starting_at\n      and multiplier.quarter = base.quarter\n      and multiplier.year_0 = base.year_0\n      and multiplier.fiscal_calendar_id = base.fiscal_calendar_id\n      and cast(multiplier.starting_at as timestamp) <= now() \n\n  where lower(base.quarter) = 'no'\n    and lower(base.year_0) = 'no'\n    and base.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null) -- fiscal calendar will align with parent subsidiary's default calendar\n)\n\nselect * \nfrom transaction_and_reporting_periods\n),  __dbt__cte__int_netsuite__transactions_with_converted_amounts as (\n\n\nwith transaction_lines_w_accounting_period as (\n    select * \n    from __dbt__cte__int_netsuite__transaction_lines_w_accounting_period\n), \n\naccountxperiod_exchange_rate_map as (\n    select * \n    from __dbt__cte__int_netsuite__accountxperiod_exchange_rate_map\n), \n\ntransaction_and_reporting_periods as (\n    select * \n    from __dbt__cte__int_netsuite__transaction_and_reporting_periods\n), \n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounts\"\n),\n\ntransactions_in_every_calculation_period_w_exchange_rates as (\n  select\n    transaction_lines_w_accounting_period.*,\n    reporting_accounting_period_id,\n    exchange_reporting_period.exchange_rate as exchange_rate_reporting_period,\n    exchange_transaction_period.exchange_rate as exchange_rate_transaction_period\n  from transaction_lines_w_accounting_period\n\n  join transaction_and_reporting_periods \n    on transaction_and_reporting_periods.accounting_period_id = transaction_lines_w_accounting_period.transaction_accounting_period_id \n\n  join accountxperiod_exchange_rate_map as exchange_reporting_period\n    on exchange_reporting_period.accounting_period_id = transaction_and_reporting_periods.reporting_accounting_period_id\n      and exchange_reporting_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_reporting_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n      \n  join accountxperiod_exchange_rate_map as exchange_transaction_period\n    on exchange_transaction_period.accounting_period_id = transaction_and_reporting_periods.accounting_period_id\n      and exchange_transaction_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_transaction_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n), \n\ntransactions_with_converted_amounts as (\n  select\n    transactions_in_every_calculation_period_w_exchange_rates.*,\n    unconverted_amount * exchange_rate_transaction_period as converted_amount_using_transaction_accounting_period,\n    unconverted_amount * exchange_rate_reporting_period as converted_amount_using_reporting_month,\n    case\n      when lower(accounts.type_name) in ('income','other income','expense','other expense','other income','cost of goods sold') then true\n      else false \n        end as is_income_statement,\n    case\n      when lower(accounts.type_name) in ('accounts receivable', 'bank', 'deferred expense', 'fixed asset', 'other asset', 'other current asset', 'unbilled receivable', 'prepaid expense') then 'Asset'\n      when lower(accounts.type_name) in ('cost of goods sold', 'expense', 'other expense') then 'Expense'\n      when lower(accounts.type_name) in ('income', 'other income') then 'Income'\n      when lower(accounts.type_name) in ('accounts payable', 'credit card', 'deferred revenue', 'long term liability', 'other current liability') then 'Liability'\n      when lower(accounts.type_name) in ('equity', 'retained earnings', 'net income') then 'Equity'\n      when lower(accounts.type_name) in ('non posting', 'statistical') then 'Other'\n      else null \n        end as account_category\n  from transactions_in_every_calculation_period_w_exchange_rates\n\n  left join accounts \n    on accounts.account_id = transactions_in_every_calculation_period_w_exchange_rates.account_id \n)\n\nselect * \nfrom transactions_with_converted_amounts\n), transactions_with_converted_amounts as (\n    select * \n    from __dbt__cte__int_netsuite__transactions_with_converted_amounts\n),\n\naccounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounts\"\n),\n\naccounting_periods as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__accounting_periods\"\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__subsidiaries\"\n),\n\ntransaction_lines as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__transaction_lines\"\n),\n\ntransactions as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__transactions\"\n),\n\nincome_accounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__income_accounts\"\n),\n\nexpense_accounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__expense_accounts\"\n),\n\ncustomers as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__customers\"\n),\n\nitems as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__items\"\n),\n\nlocations as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__locations\"\n),\n\nvendors as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__vendors\"\n),\n\nvendor_types as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__vendor_types\"\n),\n\ndepartments as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__departments\"\n),\n\ncurrencies as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__currencies\"\n),\n\nclasses as (\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite__classes\"\n),\n\ntransaction_details as (\n  select\n    transaction_lines.transaction_line_id,\n    transaction_lines.memo as transaction_memo,\n    lower(transaction_lines.non_posting_line) = 'yes' as is_transaction_non_posting,\n    transactions.transaction_id,\n    transactions.status as transaction_status,\n    transactions.transaction_date,\n    transactions.due_date_at as transaction_due_date,\n    transactions.transaction_type as transaction_type,\n    (lower(transactions.is_advanced_intercompany) = 'yes' or lower(transactions.is_intercompany) = 'yes') as is_transaction_intercompany\n\n    --The below script allows for transactions table pass through columns.\n    \n\n\n\n    \n\n    --The below script allows for transaction lines table pass through columns.\n    \n\n\n\n,\n\n    accounting_periods.ending_at as accounting_period_ending,\n    accounting_periods.full_name as accounting_period_full_name,\n    accounting_periods.name as accounting_period_name,\n    lower(accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n    lower(accounting_periods.is_closed) = 'yes' as is_accounting_period_closed,\n    accounts.name as account_name,\n    accounts.type_name as account_type_name,\n    accounts.account_id as account_id,\n    accounts.account_number\n\n    --The below script allows for accounts table pass through columns.\n    \n\n\n\n,\n\n    lower(accounts.is_leftside) = 't' as is_account_leftside,\n    lower(accounts.type_name) like 'accounts payable%' as is_accounts_payable,\n    lower(accounts.type_name) like 'accounts receivable%' as is_accounts_receivable,\n    lower(accounts.name) like '%intercompany%' as is_account_intercompany,\n    coalesce(parent_account.name, accounts.name) as parent_account_name,\n    income_accounts.income_account_id is not null as is_income_account,\n    expense_accounts.expense_account_id is not null as is_expense_account,\n    customers.company_name,\n    customers.city as customer_city,\n    customers.state as customer_state,\n    customers.zipcode as customer_zipcode,\n    customers.country as customer_country,\n    customers.date_first_order_at as customer_date_first_order,\n    customers.customer_external_id,\n    classes.full_name as class_full_name,\n    items.name as item_name,\n    items.type_name as item_type_name,\n    items.sales_description,\n    locations.name as location_name,\n    locations.city as location_city,\n    locations.country as location_country,\n    vendor_types.name as vendor_type_name,\n    vendors.company_name as vendor_name,\n    vendors.create_date_at as vendor_create_date,\n    currencies.name as currency_name,\n    currencies.symbol as currency_symbol,\n    departments.name as department_name\n\n    --The below script allows for departments table pass through columns.\n    \n\n\n\n,\n\n    subsidiaries.name as subsidiary_name,\n    case\n      when lower(accounts.type_name) = 'income' or lower(accounts.type_name) = 'other income' then -converted_amount_using_transaction_accounting_period\n      else converted_amount_using_transaction_accounting_period\n        end as converted_amount,\n    case\n      when lower(accounts.type_name) = 'income' or lower(accounts.type_name) = 'other income' then -transaction_lines.amount\n      else transaction_lines.amount\n        end as transaction_amount\n  from transaction_lines\n\n  join transactions\n    on transactions.transaction_id = transaction_lines.transaction_id\n\n  left join transactions_with_converted_amounts as transactions_with_converted_amounts\n    on transactions_with_converted_amounts.transaction_line_id = transaction_lines.transaction_line_id\n      and transactions_with_converted_amounts.transaction_id = transaction_lines.transaction_id\n      and transactions_with_converted_amounts.transaction_accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n\n  left join accounts \n    on accounts.account_id = transaction_lines.account_id\n\n  left join accounts as parent_account \n    on parent_account.account_id = accounts.parent_id\n\n  left join accounting_periods \n    on accounting_periods.accounting_period_id = transactions.accounting_period_id\n  left join income_accounts \n    on income_accounts.income_account_id = accounts.account_id\n\n  left join expense_accounts \n    on expense_accounts.expense_account_id = accounts.account_id\n\n  left join customers \n    on customers.customer_id = transaction_lines.company_id\n  \n  left join classes\n    on classes.class_id = transaction_lines.class_id\n\n  left join items \n    on items.item_id = transaction_lines.item_id\n\n  left join locations \n    on locations.location_id = transaction_lines.location_id\n\n  left join vendors \n    on vendors.vendor_id = transaction_lines.company_id\n\n  left join vendor_types \n    on vendor_types.vendor_type_id = vendors.vendor_type_id\n\n  left join currencies \n    on currencies.currency_id = transactions.currency_id\n\n  left join departments \n    on departments.department_id = transaction_lines.department_id\n\n  join subsidiaries \n    on subsidiaries.subsidiary_id = transaction_lines.subsidiary_id\n    \n  where (accounting_periods.fiscal_calendar_id is null\n    or accounting_periods.fiscal_calendar_id  = (select fiscal_calendar_id from subsidiaries where parent_id is null))\n)\n\nselect *\nfrom transaction_details", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__transaction_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.687904Z", "completed_at": "2024-09-05T21:07:41.695628Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.698970Z", "completed_at": "2024-09-05T21:07:41.698975Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015022039413452148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.dbt_utils_unique_combination_of_columns_netsuite__balance_sheet_transaction_line_id__transaction_id__accounting_period_id__account_name.7d7c0ea1da", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_line_id, transaction_id, accounting_period_id, account_name\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__balance_sheet\"\n    group by transaction_line_id, transaction_id, accounting_period_id, account_name\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.692727Z", "completed_at": "2024-09-05T21:07:41.698671Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.701366Z", "completed_at": "2024-09-05T21:07:41.701370Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011057853698730469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite__balance_sheet_transaction_id.bb54ae3b9e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__balance_sheet\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.695972Z", "completed_at": "2024-09-05T21:07:41.701096Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.702981Z", "completed_at": "2024-09-05T21:07:41.702984Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011583089828491211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite__balance_sheet_transaction_line_id.2467dc5a32", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__balance_sheet\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.704561Z", "completed_at": "2024-09-05T21:07:41.711088Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.714651Z", "completed_at": "2024-09-05T21:07:41.714655Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012948989868164062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.dbt_utils_unique_combination_of_columns_netsuite__income_statement_transaction_line_id__transaction_id__accounting_period_id__account_name.8ee630c641", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_line_id, transaction_id, accounting_period_id, account_name\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__income_statement\"\n    group by transaction_line_id, transaction_id, accounting_period_id, account_name\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.708278Z", "completed_at": "2024-09-05T21:07:41.714366Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.715871Z", "completed_at": "2024-09-05T21:07:41.715874Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012721061706542969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite__income_statement_transaction_id.12be020c7d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__income_statement\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.711405Z", "completed_at": "2024-09-05T21:07:41.715143Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.717330Z", "completed_at": "2024-09-05T21:07:41.717337Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010721921920776367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite__income_statement_transaction_line_id.00136bcf80", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__income_statement\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.719779Z", "completed_at": "2024-09-05T21:07:41.734480Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.737996Z", "completed_at": "2024-09-05T21:07:41.738001Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02127814292907715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.accepted_values_netsuite__transaction_details_account_type_name__Accounts_Receivable__Bank__Deferred_Expense__Fixed_Asset__Other_Asset__Other_Current_Asset__Unbilled_Receivable__Prepaid_Expense__Cost_of_Goods_Sold__Expense__Other_Expense__Income__Other_Income__Accounts_Payable__Credit_Card__Deferred_Revenue__Long_Term_Liability__Other_Current_Liability__Equity__Retained_Earnings__Net_Income__Non_Posting__Statistical.fd03652096", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        account_type_name as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__transaction_details\"\n    group by account_type_name\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Accounts Receivable','Bank','Deferred Expense','Fixed Asset','Other Asset','Other Current Asset','Unbilled Receivable','Prepaid Expense','Cost of Goods Sold','Expense','Other Expense','Income','Other Income','Accounts Payable','Credit Card','Deferred Revenue','Long Term Liability','Other Current Liability','Equity','Retained Earnings','Net Income','Non Posting','Statistical'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.730632Z", "completed_at": "2024-09-05T21:07:41.737697Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.739329Z", "completed_at": "2024-09-05T21:07:41.739332Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.021177053451538086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.dbt_utils_unique_combination_of_columns_netsuite__transaction_details_transaction_line_id__transaction_id.5613fa3400", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_line_id, transaction_id\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__transaction_details\"\n    group by transaction_line_id, transaction_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.734783Z", "completed_at": "2024-09-05T21:07:41.738545Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.740677Z", "completed_at": "2024-09-05T21:07:41.740680Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01138615608215332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite__transaction_details_transaction_id.a65a8e2f58", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__transaction_details\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.742162Z", "completed_at": "2024-09-05T21:07:41.745091Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.745589Z", "completed_at": "2024-09-05T21:07:41.745592Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005048274993896484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite__transaction_details_transaction_line_id.1662f317e3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite__transaction_details\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.573930Z", "completed_at": "2024-09-05T21:07:41.806770Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:41.807334Z", "completed_at": "2024-09-05T21:07:41.807341Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.23613309860229492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.int_netsuite2__tran_with_converted_amounts", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_netsuite2__transaction_lines as (\n\n\nwith transaction_lines as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transaction_lines\"\n),\n\ntransaction_accounting_lines as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transaction_accounting_lines\"\n),\n\n\n\njoined as (\n\n    select \n        transaction_lines.*,\n        transaction_accounting_lines.account_id,\n\n        \n        \n        transaction_accounting_lines.amount,\n        transaction_accounting_lines.credit_amount,\n        transaction_accounting_lines.debit_amount,\n        transaction_accounting_lines.paid_amount,\n        transaction_accounting_lines.unpaid_amount,\n        transaction_accounting_lines.is_posting\n\n    from transaction_lines\n    left join transaction_accounting_lines\n        on transaction_lines.transaction_line_id = transaction_accounting_lines.transaction_line_id\n        and transaction_lines.transaction_id = transaction_accounting_lines.transaction_id\n        \n    \n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__tran_lines_w_accounting_period as (\n\n\nwith transactions as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transactions\"\n), \n\ntransaction_lines as (\n    select * \n    from __dbt__cte__int_netsuite2__transaction_lines\n),\n\ntransaction_lines_w_accounting_period as ( -- transaction line totals, by accounts, accounting period and subsidiary\n  select\n    transaction_lines.transaction_id,\n    transaction_lines.transaction_line_id,\n    transaction_lines.subsidiary_id,\n    transaction_lines.account_id,\n\n    \n    \n    transactions.accounting_period_id as transaction_accounting_period_id,\n    coalesce(transaction_lines.amount, 0) as unconverted_amount,\n    transactions._fivetran_synced_date\n  from transaction_lines\n\n  join transactions on transactions.transaction_id = transaction_lines.transaction_id\n\n  where lower(transactions.transaction_type) != 'revenue arrangement'\n    and transaction_lines.is_posting\n)\n\nselect * \nfrom transaction_lines_w_accounting_period\n),  __dbt__cte__int_netsuite2__accounts as (\n\n\nwith accounts as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounts\"\n),\n\naccount_types as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__account_types\"\n),\n\njoined as (\n\n    select \n        accounts.*,\n        account_types.type_name,\n        account_types.is_balancesheet,\n        account_types.is_leftside\n\n    from accounts\n    left join account_types\n        on accounts.account_type_id = account_types.account_type_id\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__acctxperiod_exchange_rate_map as (\n\n\nwith accounts as (\n    select * \n    from __dbt__cte__int_netsuite2__accounts\n), \n\n\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__subsidiaries\"\n),\n\nconsolidated_exchange_rates as (\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__consolidated_exchange_rates\"\n),\n\ncurrencies as (\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__currencies\"\n),\n\nperiod_exchange_rate_map as ( -- exchange rates used, by accounting period, to convert to parent subsidiary\n  select\n    consolidated_exchange_rates.accounting_period_id,\n\n    \n\n    consolidated_exchange_rates.average_rate,\n    consolidated_exchange_rates.current_rate,\n    consolidated_exchange_rates.historical_rate,\n    consolidated_exchange_rates.from_subsidiary_id,\n    consolidated_exchange_rates.to_subsidiary_id,\n    to_subsidiaries.name as to_subsidiary_name,\n    currencies.symbol as to_subsidiary_currency_symbol\n  from consolidated_exchange_rates\n  \n  left join subsidiaries as to_subsidiaries\n    on consolidated_exchange_rates.to_subsidiary_id = to_subsidiaries.subsidiary_id\n\n  left join currencies\n    on currencies.currency_id = to_subsidiaries.currency_id\n\n  \n  where consolidated_exchange_rates.to_subsidiary_id in (select subsidiary_id from subsidiaries where parent_id is null)  -- constraint - only the primary subsidiary has no parent\n  \n), \n\naccountxperiod_exchange_rate_map as ( -- account table with exchange rate details by accounting period\n  select\n    period_exchange_rate_map.accounting_period_id,\n\n    \n    \n    period_exchange_rate_map.from_subsidiary_id,\n    period_exchange_rate_map.to_subsidiary_id,\n    period_exchange_rate_map.to_subsidiary_name,\n    period_exchange_rate_map.to_subsidiary_currency_symbol,\n    accounts.account_id,\n    case \n      when lower(accounts.general_rate_type) = 'historical' then period_exchange_rate_map.historical_rate\n      when lower(accounts.general_rate_type) = 'current' then period_exchange_rate_map.current_rate\n      when lower(accounts.general_rate_type) = 'average' then period_exchange_rate_map.average_rate\n      else null\n        end as exchange_rate\n  from accounts\n  \n  cross join period_exchange_rate_map\n)\n\nselect *\nfrom accountxperiod_exchange_rate_map\n),  __dbt__cte__int_netsuite2__accounting_periods as (\n\n\nwith accounting_periods as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_periods\"\n),\n\naccounting_period_fiscal_calendars as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_period_fiscal_cal\"\n),\n\njoined as (\n\n    select \n        accounting_periods.*,\n        accounting_period_fiscal_calendars.fiscal_calendar_id\n\n    from accounting_periods\n    left join accounting_period_fiscal_calendars\n        on accounting_periods.accounting_period_id = accounting_period_fiscal_calendars.accounting_period_id\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__tran_and_reporting_periods as (\n\n\nwith accounting_periods as (\n    select * \n    from __dbt__cte__int_netsuite2__accounting_periods\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__subsidiaries\"\n),\n\ntransaction_and_reporting_periods as ( \n  select\n    base.accounting_period_id as accounting_period_id,\n    multiplier.accounting_period_id as reporting_accounting_period_id\n  from accounting_periods as base\n\n  join accounting_periods as multiplier\n    on multiplier.starting_at >= base.starting_at\n      and multiplier.is_quarter = base.is_quarter\n      and multiplier.is_year = base.is_year -- this was year_0 in netsuite1\n      and multiplier.fiscal_calendar_id = base.fiscal_calendar_id\n      and cast(multiplier.starting_at as timestamp) <= now() \n\n  where not base.is_quarter\n    and not base.is_year\n    and base.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null) -- fiscal calendar will align with parent subsidiary's default calendar\n)\n\nselect * \nfrom transaction_and_reporting_periods\n), transaction_lines_w_accounting_period as (\n  select * \n  from __dbt__cte__int_netsuite2__tran_lines_w_accounting_period\n\n  \n  where _fivetran_synced_date >= \n\n\n\n    \n\n    \n\n    cast('2010-01-01' as date) + ((interval '1 day') * (-3))\n\n\n\n\n  \n), \n\n\naccountxperiod_exchange_rate_map as (\n  select * \n  from __dbt__cte__int_netsuite2__acctxperiod_exchange_rate_map\n), \n\n\ntransaction_and_reporting_periods as (\n  select * \n  from __dbt__cte__int_netsuite2__tran_and_reporting_periods\n), \n\naccounts as (\n  select * \n  from __dbt__cte__int_netsuite2__accounts\n),\n\ntransactions_in_every_calculation_period_w_exchange_rates as (\n  select\n    transaction_lines_w_accounting_period.*,\n    reporting_accounting_period_id\n    \n    \n    , exchange_reporting_period.exchange_rate as exchange_rate_reporting_period\n    , exchange_transaction_period.exchange_rate as exchange_rate_transaction_period\n    \n\n    \n\n  from transaction_lines_w_accounting_period\n\n  left join transaction_and_reporting_periods \n    on transaction_and_reporting_periods.accounting_period_id = transaction_lines_w_accounting_period.transaction_accounting_period_id \n\n  \n  left join accountxperiod_exchange_rate_map as exchange_reporting_period\n    on exchange_reporting_period.accounting_period_id = transaction_and_reporting_periods.reporting_accounting_period_id\n      and exchange_reporting_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_reporting_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n\n      \n      \n  left join accountxperiod_exchange_rate_map as exchange_transaction_period\n    on exchange_transaction_period.accounting_period_id = transaction_and_reporting_periods.accounting_period_id\n      and exchange_transaction_period.account_id = transaction_lines_w_accounting_period.account_id\n      and exchange_transaction_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n      \n      \n\n      \n  \n), \n\ntransactions_with_converted_amounts as (\n  select\n    transactions_in_every_calculation_period_w_exchange_rates.*,\n    \n    unconverted_amount * exchange_rate_transaction_period as converted_amount_using_transaction_accounting_period,\n    unconverted_amount * exchange_rate_reporting_period as converted_amount_using_reporting_month,\n    \n    case\n      when lower(accounts.account_type_id) in ('income','othincome','expense','othexpense','cogs') then true\n      else false \n        end as is_income_statement,\n    case\n      when lower(accounts.account_type_id) in ('acctrec', 'bank', 'deferexpense', 'fixedasset', 'othasset', 'othcurrasset', 'unbilledrec') then 'Asset'\n      when lower(accounts.account_type_id) in ('cogs', 'expense', 'othexpense') then 'Expense'\n      when lower(accounts.account_type_id) in ('income', 'othincome') then 'Income'\n      when lower(accounts.account_type_id) in ('acctpay', 'credcard', 'deferrevenue', 'longtermliab', 'othcurrliab') then 'Liability'\n      when lower(accounts.account_type_id) in ('equity', 'retained_earnings', 'net_income') then 'Equity'\n      when lower(accounts.account_type_id) in ('nonposting', 'stat') then 'Other'\n      else null \n        end as account_category\n  from transactions_in_every_calculation_period_w_exchange_rates\n\n  left join accounts\n    on accounts.account_id = transactions_in_every_calculation_period_w_exchange_rates.account_id \n),\n\nsurrogate_key as ( \n   -- add 'source_relation' when combining with union schema\n  \n  \n\n  select \n    *,\n    md5(cast(coalesce(cast(transaction_line_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transaction_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(reporting_accounting_period_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as tran_with_converted_amounts_id\n\n  from transactions_with_converted_amounts\n)\n\nselect * \nfrom surrogate_key", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__tran_with_converted_amounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.809534Z", "completed_at": "2024-09-05T21:07:42.187786Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:42.188286Z", "completed_at": "2024-09-05T21:07:42.188289Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3809661865234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.netsuite2__balance_sheet", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_netsuite2__accounts as (\n\n\nwith accounts as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounts\"\n),\n\naccount_types as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__account_types\"\n),\n\njoined as (\n\n    select \n        accounts.*,\n        account_types.type_name,\n        account_types.is_balancesheet,\n        account_types.is_leftside\n\n    from accounts\n    left join account_types\n        on accounts.account_type_id = account_types.account_type_id\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__accounting_periods as (\n\n\nwith accounting_periods as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_periods\"\n),\n\naccounting_period_fiscal_calendars as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_period_fiscal_cal\"\n),\n\njoined as (\n\n    select \n        accounting_periods.*,\n        accounting_period_fiscal_calendars.fiscal_calendar_id\n\n    from accounting_periods\n    left join accounting_period_fiscal_calendars\n        on accounting_periods.accounting_period_id = accounting_period_fiscal_calendars.accounting_period_id\n)\n\nselect *\nfrom joined\n), transactions_with_converted_amounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__tran_with_converted_amounts\"\n\n    \n    where _fivetran_synced_date >= \n\n\n\n    \n\n    \n\n    cast('2010-01-01' as date) + ((interval '1 day') * (-3))\n\n\n\n\n    \n), \n\n--Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n\n\naccounts as (\n    select * \n    from __dbt__cte__int_netsuite2__accounts\n), \n\naccounting_periods as (\n    select * \n    from __dbt__cte__int_netsuite2__accounting_periods\n), \n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__subsidiaries\"\n),\n\nbalance_sheet as ( \n    select\n        transactions_with_converted_amounts.transaction_id,\n        transactions_with_converted_amounts.transaction_line_id,\n        transactions_with_converted_amounts.subsidiary_id,\n        transactions_with_converted_amounts._fivetran_synced_date,\n        subsidiaries.name as subsidiary_name,\n\n        \n        \n        \n\n        reporting_accounting_periods.accounting_period_id as accounting_period_id,\n        reporting_accounting_periods.ending_at as accounting_period_ending,\n        reporting_accounting_periods.name as accounting_period_name,\n        reporting_accounting_periods.is_adjustment as is_accounting_period_adjustment,\n        reporting_accounting_periods.is_closed as is_accounting_period_closed,\n        transactions_with_converted_amounts.account_category as account_category,\n        case\n        when (not accounts.is_balancesheet \n                and date_trunc('year', reporting_accounting_periods.starting_at) = date_trunc('year', transaction_accounting_periods.starting_at) \n                and reporting_accounting_periods.fiscal_calendar_id = transaction_accounting_periods.fiscal_calendar_id) then 'Net Income'\n        when not accounts.is_balancesheet then 'Retained Earnings'\n        else accounts.name\n            end as account_name,\n        case\n        when (not accounts.is_balancesheet \n                and date_trunc('year', reporting_accounting_periods.starting_at) = date_trunc('year', transaction_accounting_periods.starting_at) \n                and reporting_accounting_periods.fiscal_calendar_id = transaction_accounting_periods.fiscal_calendar_id) then 'Net Income'\n        when not accounts.is_balancesheet then 'Retained Earnings'\n        when lower(accounts.special_account_type_id) = 'retearnings' then 'Retained Earnings'\n        when lower(accounts.special_account_type_id) in ('cta-e', 'cumultransadj') then 'Cumulative Translation Adjustment'\n        else accounts.type_name\n            end as account_type_name,\n        case\n        when (not accounts.is_balancesheet \n                and date_trunc('year', reporting_accounting_periods.starting_at) = date_trunc('year', transaction_accounting_periods.starting_at) \n                and reporting_accounting_periods.fiscal_calendar_id = transaction_accounting_periods.fiscal_calendar_id) then 'net_income'\n        when not accounts.is_balancesheet then 'retained_earnings'\n        when lower(accounts.special_account_type_id) = 'retearnings' then 'retained_earnings'\n        when lower(accounts.special_account_type_id) in ('cta-e', 'cumultransadj') then 'cumulative_translation_adjustment'\n        else accounts.account_type_id\n            end as account_type_id,\n        case\n        when not accounts.is_balancesheet then null\n        else accounts.account_id\n            end as account_id,\n        case\n        when not accounts.is_balancesheet then null\n        else accounts.account_number\n            end as account_number\n        \n        --The below script allows for accounts table pass through columns.\n        \n\n\n\n,\n\n        case\n        when not accounts.is_balancesheet and lower(accounts.general_rate_type) in ('historical', 'average') then -converted_amount_using_transaction_accounting_period\n        when not accounts.is_balancesheet then -converted_amount_using_reporting_month\n        when accounts.is_balancesheet and not accounts.is_leftside and lower(accounts.general_rate_type) in ('historical', 'average') then -converted_amount_using_transaction_accounting_period\n        when accounts.is_balancesheet and accounts.is_leftside and lower(accounts.general_rate_type) in ('historical', 'average') then converted_amount_using_transaction_accounting_period\n        when accounts.is_balancesheet and not accounts.is_leftside then -converted_amount_using_reporting_month\n        when accounts.is_balancesheet and accounts.is_leftside then converted_amount_using_reporting_month\n        else 0\n            end as converted_amount,\n\n        case\n        when lower(accounts.account_type_id) = 'bank' then 1\n        when lower(accounts.account_type_id) = 'acctrec' then 2\n        when lower(accounts.account_type_id) = 'unbilledrec' then 3\n        when lower(accounts.account_type_id) = 'othcurrasset' then 4\n        when lower(accounts.account_type_id) = 'fixedasset' then 5\n        when lower(accounts.account_type_id) = 'othasset' then 6\n        when lower(accounts.account_type_id) = 'deferexpense' then 7\n        when lower(accounts.account_type_id) = 'acctpay' then 8\n        when lower(accounts.account_type_id) = 'credcard' then 9\n        when lower(accounts.account_type_id) = 'othcurrliab' then 10\n        when lower(accounts.account_type_id) = 'longtermliab' then 11\n        when lower(accounts.account_type_id) = 'deferrevenue' then 12\n        when lower(accounts.special_account_type_id) = 'retearnings' then 14\n        when lower(accounts.special_account_type_id) in ('cta-e', 'cumultransadj') then 16\n        when lower(accounts.account_type_id) = 'equity' then 13\n        when (not accounts.is_balancesheet \n                and date_trunc('year', reporting_accounting_periods.starting_at) = date_trunc('year', transaction_accounting_periods.starting_at) \n                and reporting_accounting_periods.fiscal_calendar_id = transaction_accounting_periods.fiscal_calendar_id) then 15\n        when not accounts.is_balancesheet then 14\n        else null\n            end as balance_sheet_sort_helper\n\n    --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n    \n\n    from transactions_with_converted_amounts\n    \n    --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n    \n\n\n    left join accounts \n        on accounts.account_id = transactions_with_converted_amounts.account_id\n\n    left join accounting_periods as reporting_accounting_periods \n        on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n\n    left join accounting_periods as transaction_accounting_periods \n        on transaction_accounting_periods.accounting_period_id = transactions_with_converted_amounts.transaction_accounting_period_id\n\n    left join subsidiaries\n        on subsidiaries.subsidiary_id = transactions_with_converted_amounts.subsidiary_id\n\n    where reporting_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n        and transaction_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n        and (accounts.is_balancesheet\n        or transactions_with_converted_amounts.is_income_statement)\n\n    union all\n\n    select\n        transactions_with_converted_amounts.transaction_id,\n        transactions_with_converted_amounts.transaction_line_id,\n        transactions_with_converted_amounts.subsidiary_id,\n        transactions_with_converted_amounts._fivetran_synced_date,\n        subsidiaries.name as subsidiary_name,\n\n        \n\n        \n        \n        reporting_accounting_periods.accounting_period_id as accounting_period_id,\n        reporting_accounting_periods.ending_at as accounting_period_ending,\n        reporting_accounting_periods.name as accounting_period_name,\n        reporting_accounting_periods.is_adjustment as is_accounting_period_adjustment,\n        reporting_accounting_periods.is_closed as is_accounting_period_closed,\n        'Equity' as account_category,\n        'Cumulative Translation Adjustment' as account_name,\n        'Cumulative Translation Adjustment' as account_type_name,\n        'cumulative_translation_adjustment' as account_type_id,\n        null as account_id,\n        null as account_number,\n\n        \n\n        case\n        when lower(accounts.general_rate_type) in ('historical', 'average') then converted_amount_using_transaction_accounting_period\n        else converted_amount_using_reporting_month\n            end as converted_amount,\n        16 as balance_sheet_sort_helper\n\n        --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n        \n\n    from transactions_with_converted_amounts\n\n    --Below is only used if balance sheet transaction detail columns are specified dbt_project.yml file.\n    \n\n    left join accounts\n        on accounts.account_id = transactions_with_converted_amounts.account_id\n\n    left join accounting_periods as reporting_accounting_periods \n        on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n\n    left join subsidiaries\n        on subsidiaries.subsidiary_id = transactions_with_converted_amounts.subsidiary_id\n\n    where reporting_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n        and (accounts.is_balancesheet\n        or transactions_with_converted_amounts.is_income_statement)\n    ),\n\n    surrogate_key as ( \n    \n    \n    \n\n    select \n        *,\n        md5(cast(coalesce(cast(transaction_line_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transaction_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(accounting_period_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(account_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(account_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as balance_sheet_id\n\n    from balance_sheet\n)\n\nselect *\nfrom surrogate_key", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__balance_sheet\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.824079Z", "completed_at": "2024-09-05T21:07:42.183122Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:42.187076Z", "completed_at": "2024-09-05T21:07:42.187085Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.36862993240356445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.netsuite2__income_statement", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_netsuite2__accounts as (\n\n\nwith accounts as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounts\"\n),\n\naccount_types as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__account_types\"\n),\n\njoined as (\n\n    select \n        accounts.*,\n        account_types.type_name,\n        account_types.is_balancesheet,\n        account_types.is_leftside\n\n    from accounts\n    left join account_types\n        on accounts.account_type_id = account_types.account_type_id\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__accounting_periods as (\n\n\nwith accounting_periods as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_periods\"\n),\n\naccounting_period_fiscal_calendars as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_period_fiscal_cal\"\n),\n\njoined as (\n\n    select \n        accounting_periods.*,\n        accounting_period_fiscal_calendars.fiscal_calendar_id\n\n    from accounting_periods\n    left join accounting_period_fiscal_calendars\n        on accounting_periods.accounting_period_id = accounting_period_fiscal_calendars.accounting_period_id\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__transaction_lines as (\n\n\nwith transaction_lines as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transaction_lines\"\n),\n\ntransaction_accounting_lines as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transaction_accounting_lines\"\n),\n\n\n\njoined as (\n\n    select \n        transaction_lines.*,\n        transaction_accounting_lines.account_id,\n\n        \n        \n        transaction_accounting_lines.amount,\n        transaction_accounting_lines.credit_amount,\n        transaction_accounting_lines.debit_amount,\n        transaction_accounting_lines.paid_amount,\n        transaction_accounting_lines.unpaid_amount,\n        transaction_accounting_lines.is_posting\n\n    from transaction_lines\n    left join transaction_accounting_lines\n        on transaction_lines.transaction_line_id = transaction_accounting_lines.transaction_line_id\n        and transaction_lines.transaction_id = transaction_accounting_lines.transaction_id\n        \n    \n\n)\n\nselect *\nfrom joined\n), transactions_with_converted_amounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__tran_with_converted_amounts\"\n\n    \n    where _fivetran_synced_date >= \n\n\n\n    \n\n    \n\n    cast('2010-01-01' as date) + ((interval '1 day') * (-3))\n\n\n\n\n    \n), \n\n--Below is only used if income statement transaction detail columns are specified dbt_project.yml file.\n\n\naccounts as (\n    select * \n    from __dbt__cte__int_netsuite2__accounts\n), \n\naccounting_periods as (\n    select * \n    from __dbt__cte__int_netsuite2__accounting_periods\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__subsidiaries\"\n),\n\ntransaction_lines as (\n    select * \n    from __dbt__cte__int_netsuite2__transaction_lines\n),\n\nclasses as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__classes\"\n),\n\nlocations as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__locations\"\n),\n\ndepartments as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__departments\"\n),\n\nincome_statement as (\n    select\n        transactions_with_converted_amounts.transaction_id,\n        transactions_with_converted_amounts.transaction_line_id,\n        transactions_with_converted_amounts._fivetran_synced_date,\n\n        \n\n        \n\n        reporting_accounting_periods.accounting_period_id as accounting_period_id,\n        reporting_accounting_periods.ending_at as accounting_period_ending,\n        reporting_accounting_periods.name as accounting_period_name,\n        reporting_accounting_periods.is_adjustment as is_accounting_period_adjustment,\n        reporting_accounting_periods.is_closed as is_accounting_period_closed,\n        accounts.name as account_name,\n        accounts.type_name as account_type_name,\n        accounts.account_type_id,\n        accounts.account_id as account_id,\n        accounts.account_number,\n        subsidiaries.subsidiary_id,\n        subsidiaries.full_name as subsidiary_full_name,\n        subsidiaries.name as subsidiary_name\n\n        --The below script allows for accounts table pass through columns.\n        \n\n\n\n,\n\n        accounts.account_number || '-' || accounts.name as account_number_and_name,\n        classes.full_name as class_full_name\n\n        --The below script allows for accounts table pass through columns.\n        \n\n\n\n,\n\n        locations.full_name as location_full_name,\n        departments.full_name as department_full_name\n\n        --The below script allows for departments table pass through columns.\n        \n\n\n\n,\n\n        transactions_with_converted_amounts.account_category as account_category,\n        case when lower(accounts.account_type_id) = 'income' then 1\n            when lower(accounts.account_type_id) = 'cogs' then 2\n            when lower(accounts.account_type_id) = 'expense' then 3\n            when lower(accounts.account_type_id) = 'othincome' then 4\n            when lower(accounts.account_type_id) = 'othexpense' then 5\n            else null\n            end as income_statement_sort_helper\n\n        --Below is only used if income statement transaction detail columns are specified dbt_project.yml file.\n        \n\n        , -converted_amount_using_transaction_accounting_period as converted_amount\n        \n    from transactions_with_converted_amounts\n\n    join transaction_lines as transaction_lines\n        on transaction_lines.transaction_line_id = transactions_with_converted_amounts.transaction_line_id\n            and transaction_lines.transaction_id = transactions_with_converted_amounts.transaction_id\n\n            \n\n    left join departments \n        on departments.department_id = transaction_lines.department_id\n    \n    left join accounts \n        on accounts.account_id = transactions_with_converted_amounts.account_id\n\n    left join locations\n        on locations.location_id = transaction_lines.location_id\n\n    left join classes \n        on classes.class_id = transaction_lines.class_id\n\n    left join accounting_periods as reporting_accounting_periods \n        on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n    \n    left join subsidiaries\n        on transactions_with_converted_amounts.subsidiary_id = subsidiaries.subsidiary_id\n\n    --Below is only used if income statement transaction detail columns are specified dbt_project.yml file.\n    \n\n    where reporting_accounting_periods.fiscal_calendar_id  = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n        and transactions_with_converted_amounts.transaction_accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n        and transactions_with_converted_amounts.is_income_statement\n),\n\nsurrogate_key as ( \n    \n    \n    \n\n    select \n        *,\n        md5(cast(coalesce(cast(transaction_line_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transaction_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(accounting_period_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(account_name as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as income_statement_id\n\n    from income_statement\n)\n\nselect *\nfrom surrogate_key", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__income_statement\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:41.833339Z", "completed_at": "2024-09-05T21:07:42.188748Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:42.189248Z", "completed_at": "2024-09-05T21:07:42.189251Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3678700923919678, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite.netsuite2__transaction_details", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_netsuite2__accounts as (\n\n\nwith accounts as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounts\"\n),\n\naccount_types as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__account_types\"\n),\n\njoined as (\n\n    select \n        accounts.*,\n        account_types.type_name,\n        account_types.is_balancesheet,\n        account_types.is_leftside\n\n    from accounts\n    left join account_types\n        on accounts.account_type_id = account_types.account_type_id\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__accounting_periods as (\n\n\nwith accounting_periods as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_periods\"\n),\n\naccounting_period_fiscal_calendars as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__accounting_period_fiscal_cal\"\n),\n\njoined as (\n\n    select \n        accounting_periods.*,\n        accounting_period_fiscal_calendars.fiscal_calendar_id\n\n    from accounting_periods\n    left join accounting_period_fiscal_calendars\n        on accounting_periods.accounting_period_id = accounting_period_fiscal_calendars.accounting_period_id\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__transaction_lines as (\n\n\nwith transaction_lines as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transaction_lines\"\n),\n\ntransaction_accounting_lines as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transaction_accounting_lines\"\n),\n\n\n\njoined as (\n\n    select \n        transaction_lines.*,\n        transaction_accounting_lines.account_id,\n\n        \n        \n        transaction_accounting_lines.amount,\n        transaction_accounting_lines.credit_amount,\n        transaction_accounting_lines.debit_amount,\n        transaction_accounting_lines.paid_amount,\n        transaction_accounting_lines.unpaid_amount,\n        transaction_accounting_lines.is_posting\n\n    from transaction_lines\n    left join transaction_accounting_lines\n        on transaction_lines.transaction_line_id = transaction_accounting_lines.transaction_line_id\n        and transaction_lines.transaction_id = transaction_accounting_lines.transaction_id\n        \n    \n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__customers as (\n\n\nwith customers as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__customers\"\n),\n\nentity_address as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__entity_address\"\n),\n\njoined as (\n\n    select \n        customers.*,\n        entity_address.city,\n        entity_address.state,\n        entity_address.zipcode,\n        entity_address.country\n\n    from customers\n    left join entity_address\n        on coalesce(customers.default_billing_address_id, customers.default_shipping_address_id) = entity_address.nkey\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_netsuite2__locations as (\n\n\nwith locations as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__locations\"\n),\n\nlocation_main_address as (\n\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__location_main_address\"\n),\n\njoined as (\n\n    select \n        locations.*,\n        location_main_address.city,\n        location_main_address.state,\n        location_main_address.zipcode,\n        location_main_address.country\n\n    from locations\n    left join location_main_address\n        on locations.main_address_id = location_main_address.nkey\n)\n\nselect *\nfrom joined\n), transactions_with_converted_amounts as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"int_netsuite2__tran_with_converted_amounts\"\n\n    \n    where _fivetran_synced_date >= \n\n\n\n    \n\n    \n\n    cast('2010-01-01' as date) + ((interval '1 day') * (-3))\n\n\n\n\n    \n),\n\naccounts as (\n    select * \n    from __dbt__cte__int_netsuite2__accounts\n),\n\naccounting_periods as (\n    select * \n    from __dbt__cte__int_netsuite2__accounting_periods\n),\n\nsubsidiaries as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__subsidiaries\"\n),\n\ntransaction_lines as (\n    select * \n    from __dbt__cte__int_netsuite2__transaction_lines\n),\n\ntransactions as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__transactions\"\n\n    \n    where _fivetran_synced_date >= \n\n\n\n    \n\n    \n\n    cast('2010-01-01' as date) + ((interval '1 day') * (-3))\n\n\n\n\n    \n),\n\ncustomers as (\n    select * \n    from __dbt__cte__int_netsuite2__customers\n),\n\nitems as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__items\"\n),\n\nlocations as (\n    select * \n    from __dbt__cte__int_netsuite2__locations\n),\n\nvendors as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__vendors\"\n),\n\n\nvendor_categories as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__vendor_categories\"\n),\n\n\ndepartments as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__departments\"\n),\n\ncurrencies as (\n    select * \n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__currencies\"\n),\n\nclasses as (\n    select *\n    from \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"stg_netsuite2__classes\"\n),\n\ntransaction_details as (\n  select\n\n    \n\n    \n    \n    transaction_lines.transaction_line_id,\n    transaction_lines.memo as transaction_memo,\n    not transaction_lines.is_posting as is_transaction_non_posting,\n    transaction_lines.is_main_line,\n    transaction_lines.is_tax_line,\n    transaction_lines.is_closed,\n    transactions.transaction_id,\n    transactions.status as transaction_status,\n    transactions.transaction_date,\n    transactions.due_date_at as transaction_due_date,\n    transactions.transaction_type as transaction_type,\n    transactions._fivetran_synced_date,\n    transactions.transaction_number,\n    coalesce(transaction_lines.entity_id, transactions.entity_id) as entity_id,\n    transactions.is_intercompany_adjustment as is_transaction_intercompany_adjustment\n\n    --The below script allows for transactions table pass through columns.\n    \n\n\n\n\n\n    --The below script allows for transaction lines table pass through columns.\n    \n\n\n\n,\n\n    accounting_periods.ending_at as accounting_period_ending,\n    accounting_periods.name as accounting_period_name,\n    accounting_periods.accounting_period_id as accounting_period_id,\n    accounting_periods.is_adjustment as is_accounting_period_adjustment,\n    accounting_periods.is_closed as is_accounting_period_closed,\n    accounts.name as account_name,\n    accounts.type_name as account_type_name,\n    accounts.account_type_id,\n    accounts.account_id as account_id,\n    accounts.account_number\n\n    --The below script allows for accounts table pass through columns.\n    \n\n\n\n,\n\n    accounts.is_leftside as is_account_leftside,\n    lower(accounts.account_type_id) = 'acctpay' as is_accounts_payable,\n    lower(accounts.account_type_id) = 'acctrec' as is_accounts_receivable,\n    accounts.is_eliminate as is_account_intercompany,\n    coalesce(parent_account.name, accounts.name) as parent_account_name,\n    lower(accounts.account_type_id) in ('expense', 'othexpense', 'deferexpense') as is_expense_account,\n    lower(accounts.account_type_id) in ('income', 'othincome') as is_income_account,\n    customers.company_name,\n    customers.city as customer_city,\n    customers.state as customer_state,\n    customers.zipcode as customer_zipcode,\n    customers.country as customer_country,\n    customers.date_first_order_at as customer_date_first_order,\n    customers.customer_external_id,\n    classes.full_name as class_full_name,\n    transaction_lines.item_id,\n    items.name as item_name,\n    items.type_name as item_type_name,\n    items.sales_description,\n    locations.name as location_name,\n    locations.city as location_city,\n    locations.country as location_country,\n    \n    vendor_categories.name as vendor_category_name,\n    \n    vendors.company_name as vendor_name,\n    vendors.create_date_at as vendor_create_date,\n    currencies.name as currency_name,\n    currencies.symbol as currency_symbol,\n    transaction_lines.department_id,\n    departments.name as department_name\n\n    --The below script allows for departments table pass through columns.\n    \n\n\n\n,\n\n    subsidiaries.subsidiary_id,\n    subsidiaries.name as subsidiary_name,\n    case\n      when lower(accounts.account_type_id) in ('income', 'othincome') then -transactions_with_converted_amounts.converted_amount_using_transaction_accounting_period\n      else transactions_with_converted_amounts.converted_amount_using_transaction_accounting_period\n        end as converted_amount,\n    case\n      when lower(accounts.account_type_id) in ('income', 'othincome') then -transaction_lines.amount\n      else transaction_lines.amount\n        end as transaction_amount\n  from transaction_lines\n\n  join transactions\n    on transactions.transaction_id = transaction_lines.transaction_id\n\n  left join transactions_with_converted_amounts\n    on transactions_with_converted_amounts.transaction_line_id = transaction_lines.transaction_line_id\n      and transactions_with_converted_amounts.transaction_id = transaction_lines.transaction_id\n      and transactions_with_converted_amounts.transaction_accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n      \n      \n\n  left join accounts \n    on accounts.account_id = transaction_lines.account_id\n\n  left join accounts as parent_account \n    on parent_account.account_id = accounts.parent_id\n\n  left join accounting_periods \n    on accounting_periods.accounting_period_id = transactions.accounting_period_id\n\n  left join customers \n    on customers.customer_id = coalesce(transaction_lines.entity_id, transactions.entity_id)\n  \n  left join classes\n    on classes.class_id = transaction_lines.class_id\n\n  left join items \n    on items.item_id = transaction_lines.item_id\n\n  left join locations \n    on locations.location_id = transaction_lines.location_id\n\n  left join vendors \n    on vendors.vendor_id = coalesce(transaction_lines.entity_id, transactions.entity_id)\n\n  \n  left join vendor_categories \n    on vendor_categories.vendor_category_id = vendors.vendor_category_id\n  \n\n  left join currencies \n    on currencies.currency_id = transactions.currency_id\n\n  left join departments \n    on departments.department_id = transaction_lines.department_id\n\n  join subsidiaries \n    on subsidiaries.subsidiary_id = transaction_lines.subsidiary_id\n    \n  where (accounting_periods.fiscal_calendar_id is null\n    or accounting_periods.fiscal_calendar_id  = (select fiscal_calendar_id from subsidiaries where parent_id is null))\n),\n\nsurrogate_key as ( \n    \n    \n    \n\n    select \n        *,\n        md5(cast(coalesce(cast(transaction_line_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transaction_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as transaction_details_id\n\n    from transaction_details\n)\n\nselect *\nfrom surrogate_key", "relation_name": "\"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__transaction_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:42.200987Z", "completed_at": "2024-09-05T21:07:42.206204Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:42.206709Z", "completed_at": "2024-09-05T21:07:42.206713Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013882875442504883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__balance_sheet_transaction_line_id.dd5f702ec9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__balance_sheet\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:42.194770Z", "completed_at": "2024-09-05T21:07:42.207438Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:42.209819Z", "completed_at": "2024-09-05T21:07:42.209823Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018520116806030273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__balance_sheet_balance_sheet_id.0e299c6c01", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect balance_sheet_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__balance_sheet\"\nwhere balance_sheet_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:42.198436Z", "completed_at": "2024-09-05T21:07:42.207704Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:42.210084Z", "completed_at": "2024-09-05T21:07:42.210087Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01859879493713379, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__balance_sheet_transaction_id.4e0a408da1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__balance_sheet\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:42.203385Z", "completed_at": "2024-09-05T21:07:42.207961Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:42.210353Z", "completed_at": "2024-09-05T21:07:42.210356Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01833796501159668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.unique_netsuite2__balance_sheet_balance_sheet_id.8bb14ebf4a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    balance_sheet_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__balance_sheet\"\nwhere balance_sheet_id is not null\ngroup by balance_sheet_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:42.212234Z", "completed_at": "2024-09-05T21:07:42.217194Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:42.226937Z", "completed_at": "2024-09-05T21:07:42.226943Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.018450260162353516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__income_statement_income_statement_id.4c1a7c959e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect income_statement_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__income_statement\"\nwhere income_statement_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:42.217917Z", "completed_at": "2024-09-05T21:07:42.227320Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:42.229824Z", "completed_at": "2024-09-05T21:07:42.229829Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015501022338867188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__income_statement_transaction_id.0ecd59a9ef", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__income_statement\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:42.221661Z", "completed_at": "2024-09-05T21:07:42.228252Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:42.230868Z", "completed_at": "2024-09-05T21:07:42.230873Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016073942184448242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__income_statement_transaction_line_id.8fdd5b1706", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__income_statement\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:42.224266Z", "completed_at": "2024-09-05T21:07:42.228826Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:42.231646Z", "completed_at": "2024-09-05T21:07:42.231649Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01642298698425293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.unique_netsuite2__income_statement_income_statement_id.20a530fc68", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    income_statement_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__income_statement\"\nwhere income_statement_id is not null\ngroup by income_statement_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:42.233329Z", "completed_at": "2024-09-05T21:07:42.238311Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:42.247831Z", "completed_at": "2024-09-05T21:07:42.247837Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.018443822860717773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__transaction_details_transaction_details_id.a24a6eb6c0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_details_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__transaction_details\"\nwhere transaction_details_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:42.238579Z", "completed_at": "2024-09-05T21:07:42.248103Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:42.249995Z", "completed_at": "2024-09-05T21:07:42.249998Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014578104019165039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__transaction_details_transaction_id.e9ee05db79", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__transaction_details\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:42.241396Z", "completed_at": "2024-09-05T21:07:42.248430Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:42.250479Z", "completed_at": "2024-09-05T21:07:42.250483Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014627933502197266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.not_null_netsuite2__transaction_details_transaction_line_id.12a67b5f36", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_id\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__transaction_details\"\nwhere transaction_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T21:07:42.245135Z", "completed_at": "2024-09-05T21:07:42.249443Z"}, {"name": "execute", "started_at": "2024-09-05T21:07:42.251219Z", "completed_at": "2024-09-05T21:07:42.251222Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01439213752746582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite.unique_netsuite2__transaction_details_transaction_details_id.cb70f22d04", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_details_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_integration_tests_5_netsuite\".\"netsuite2__transaction_details\"\nwhere transaction_details_id is not null\ngroup by transaction_details_id\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 5.744760751724243, "args": {"partial_parse": true, "strict_mode": false, "empty_catalog": false, "select": [], "macro_debugging": false, "log_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite/integration_tests/logs", "favor_state": false, "log_format_file": "debug", "use_colors": true, "use_colors_file": true, "print": true, "introspect": true, "vars": {}, "quiet": false, "which": "generate", "printer_width": 80, "cache_selected_only": false, "version_check": true, "require_explicit_package_overrides_for_builtin_materializations": false, "defer": false, "partial_parse_file_diff": true, "log_format": "default", "invocation_command": "dbt docs generate -t postgres", "project_dir": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite/integration_tests", "log_file_max_bytes": 10485760, "send_anonymous_usage_stats": true, "enable_legacy_logger": false, "show_resource_report": false, "warn_error_options": {"include": [], "exclude": []}, "exclude": [], "populate_cache": true, "write_json": true, "indirect_selection": "eager", "profiles_dir": "/Users/joseph.markiewicz/.dbt", "compile": true, "target": "postgres", "log_level": "info", "static_parser": true, "log_level_file": "debug", "static": false}}